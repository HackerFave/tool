// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CANINFO_CAN_H_
#define FLATBUFFERS_GENERATED_CANINFO_CAN_H_

#include "flatbuffers/flatbuffers.h"

namespace can {

struct CanAboutDevStatus;
struct CanAboutDevStatusBuilder;
struct CanAboutDevStatusT;

struct WireControlVcuVersion;
struct WireControlVcuVersionBuilder;
struct WireControlVcuVersionT;

struct WireControlVehicleFault;
struct WireControlVehicleFaultBuilder;
struct WireControlVehicleFaultT;

struct WireControlVehicleMovation;
struct WireControlVehicleMovationBuilder;
struct WireControlVehicleMovationT;

struct WireControlVehicleStatus;
struct WireControlVehicleStatusBuilder;
struct WireControlVehicleStatusT;

struct MsgVcuVersion;
struct MsgVcuVersionBuilder;
struct MsgVcuVersionT;

bool operator==(const CanAboutDevStatusT &lhs, const CanAboutDevStatusT &rhs);
bool operator!=(const CanAboutDevStatusT &lhs, const CanAboutDevStatusT &rhs);
bool operator==(const WireControlVcuVersionT &lhs, const WireControlVcuVersionT &rhs);
bool operator!=(const WireControlVcuVersionT &lhs, const WireControlVcuVersionT &rhs);
bool operator==(const WireControlVehicleFaultT &lhs, const WireControlVehicleFaultT &rhs);
bool operator!=(const WireControlVehicleFaultT &lhs, const WireControlVehicleFaultT &rhs);
bool operator==(const WireControlVehicleMovationT &lhs, const WireControlVehicleMovationT &rhs);
bool operator!=(const WireControlVehicleMovationT &lhs, const WireControlVehicleMovationT &rhs);
bool operator==(const WireControlVehicleStatusT &lhs, const WireControlVehicleStatusT &rhs);
bool operator!=(const WireControlVehicleStatusT &lhs, const WireControlVehicleStatusT &rhs);
bool operator==(const MsgVcuVersionT &lhs, const MsgVcuVersionT &rhs);
bool operator!=(const MsgVcuVersionT &lhs, const MsgVcuVersionT &rhs);

inline const flatbuffers::TypeTable *CanAboutDevStatusTypeTable();

inline const flatbuffers::TypeTable *WireControlVcuVersionTypeTable();

inline const flatbuffers::TypeTable *WireControlVehicleFaultTypeTable();

inline const flatbuffers::TypeTable *WireControlVehicleMovationTypeTable();

inline const flatbuffers::TypeTable *WireControlVehicleStatusTypeTable();

inline const flatbuffers::TypeTable *MsgVcuVersionTypeTable();

struct CanAboutDevStatusT : public flatbuffers::NativeTable {
  typedef CanAboutDevStatus TableType;
  bool wire_can_offline_flag;
  bool tx2_can_offline_flag;
  bool cgu_can_offline_flag;
  bool front_lidar_offline_flag;
  bool front_left_radar_offline_flag;
  bool front_middle_radar_offline_flag;
  bool front_right_radar_offline_flag;
  bool rear_lidar_offline_flag;
  bool rear_radar_offline_flag;
  bool left_lidar_offline_flag;
  bool right_lidar_offline_flag;
  CanAboutDevStatusT()
      : wire_can_offline_flag(false),
        tx2_can_offline_flag(false),
        cgu_can_offline_flag(false),
        front_lidar_offline_flag(false),
        front_left_radar_offline_flag(false),
        front_middle_radar_offline_flag(false),
        front_right_radar_offline_flag(false),
        rear_lidar_offline_flag(false),
        rear_radar_offline_flag(false),
        left_lidar_offline_flag(false),
        right_lidar_offline_flag(false) {
  }
};

inline bool operator==(const CanAboutDevStatusT &lhs, const CanAboutDevStatusT &rhs) {
  return
      (lhs.wire_can_offline_flag == rhs.wire_can_offline_flag) &&
      (lhs.tx2_can_offline_flag == rhs.tx2_can_offline_flag) &&
      (lhs.cgu_can_offline_flag == rhs.cgu_can_offline_flag) &&
      (lhs.front_lidar_offline_flag == rhs.front_lidar_offline_flag) &&
      (lhs.front_left_radar_offline_flag == rhs.front_left_radar_offline_flag) &&
      (lhs.front_middle_radar_offline_flag == rhs.front_middle_radar_offline_flag) &&
      (lhs.front_right_radar_offline_flag == rhs.front_right_radar_offline_flag) &&
      (lhs.rear_lidar_offline_flag == rhs.rear_lidar_offline_flag) &&
      (lhs.rear_radar_offline_flag == rhs.rear_radar_offline_flag) &&
      (lhs.left_lidar_offline_flag == rhs.left_lidar_offline_flag) &&
      (lhs.right_lidar_offline_flag == rhs.right_lidar_offline_flag);
}

inline bool operator!=(const CanAboutDevStatusT &lhs, const CanAboutDevStatusT &rhs) {
    return !(lhs == rhs);
}


struct CanAboutDevStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CanAboutDevStatusT NativeTableType;
  typedef CanAboutDevStatusBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CanAboutDevStatusTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIRE_CAN_OFFLINE_FLAG = 4,
    VT_TX2_CAN_OFFLINE_FLAG = 6,
    VT_CGU_CAN_OFFLINE_FLAG = 8,
    VT_FRONT_LIDAR_OFFLINE_FLAG = 10,
    VT_FRONT_LEFT_RADAR_OFFLINE_FLAG = 12,
    VT_FRONT_MIDDLE_RADAR_OFFLINE_FLAG = 14,
    VT_FRONT_RIGHT_RADAR_OFFLINE_FLAG = 16,
    VT_REAR_LIDAR_OFFLINE_FLAG = 18,
    VT_REAR_RADAR_OFFLINE_FLAG = 20,
    VT_LEFT_LIDAR_OFFLINE_FLAG = 22,
    VT_RIGHT_LIDAR_OFFLINE_FLAG = 24
  };
  bool wire_can_offline_flag() const {
    return GetField<uint8_t>(VT_WIRE_CAN_OFFLINE_FLAG, 0) != 0;
  }
  bool mutate_wire_can_offline_flag(bool _wire_can_offline_flag) {
    return SetField<uint8_t>(VT_WIRE_CAN_OFFLINE_FLAG, static_cast<uint8_t>(_wire_can_offline_flag), 0);
  }
  bool tx2_can_offline_flag() const {
    return GetField<uint8_t>(VT_TX2_CAN_OFFLINE_FLAG, 0) != 0;
  }
  bool mutate_tx2_can_offline_flag(bool _tx2_can_offline_flag) {
    return SetField<uint8_t>(VT_TX2_CAN_OFFLINE_FLAG, static_cast<uint8_t>(_tx2_can_offline_flag), 0);
  }
  bool cgu_can_offline_flag() const {
    return GetField<uint8_t>(VT_CGU_CAN_OFFLINE_FLAG, 0) != 0;
  }
  bool mutate_cgu_can_offline_flag(bool _cgu_can_offline_flag) {
    return SetField<uint8_t>(VT_CGU_CAN_OFFLINE_FLAG, static_cast<uint8_t>(_cgu_can_offline_flag), 0);
  }
  bool front_lidar_offline_flag() const {
    return GetField<uint8_t>(VT_FRONT_LIDAR_OFFLINE_FLAG, 0) != 0;
  }
  bool mutate_front_lidar_offline_flag(bool _front_lidar_offline_flag) {
    return SetField<uint8_t>(VT_FRONT_LIDAR_OFFLINE_FLAG, static_cast<uint8_t>(_front_lidar_offline_flag), 0);
  }
  bool front_left_radar_offline_flag() const {
    return GetField<uint8_t>(VT_FRONT_LEFT_RADAR_OFFLINE_FLAG, 0) != 0;
  }
  bool mutate_front_left_radar_offline_flag(bool _front_left_radar_offline_flag) {
    return SetField<uint8_t>(VT_FRONT_LEFT_RADAR_OFFLINE_FLAG, static_cast<uint8_t>(_front_left_radar_offline_flag), 0);
  }
  bool front_middle_radar_offline_flag() const {
    return GetField<uint8_t>(VT_FRONT_MIDDLE_RADAR_OFFLINE_FLAG, 0) != 0;
  }
  bool mutate_front_middle_radar_offline_flag(bool _front_middle_radar_offline_flag) {
    return SetField<uint8_t>(VT_FRONT_MIDDLE_RADAR_OFFLINE_FLAG, static_cast<uint8_t>(_front_middle_radar_offline_flag), 0);
  }
  bool front_right_radar_offline_flag() const {
    return GetField<uint8_t>(VT_FRONT_RIGHT_RADAR_OFFLINE_FLAG, 0) != 0;
  }
  bool mutate_front_right_radar_offline_flag(bool _front_right_radar_offline_flag) {
    return SetField<uint8_t>(VT_FRONT_RIGHT_RADAR_OFFLINE_FLAG, static_cast<uint8_t>(_front_right_radar_offline_flag), 0);
  }
  bool rear_lidar_offline_flag() const {
    return GetField<uint8_t>(VT_REAR_LIDAR_OFFLINE_FLAG, 0) != 0;
  }
  bool mutate_rear_lidar_offline_flag(bool _rear_lidar_offline_flag) {
    return SetField<uint8_t>(VT_REAR_LIDAR_OFFLINE_FLAG, static_cast<uint8_t>(_rear_lidar_offline_flag), 0);
  }
  bool rear_radar_offline_flag() const {
    return GetField<uint8_t>(VT_REAR_RADAR_OFFLINE_FLAG, 0) != 0;
  }
  bool mutate_rear_radar_offline_flag(bool _rear_radar_offline_flag) {
    return SetField<uint8_t>(VT_REAR_RADAR_OFFLINE_FLAG, static_cast<uint8_t>(_rear_radar_offline_flag), 0);
  }
  bool left_lidar_offline_flag() const {
    return GetField<uint8_t>(VT_LEFT_LIDAR_OFFLINE_FLAG, 0) != 0;
  }
  bool mutate_left_lidar_offline_flag(bool _left_lidar_offline_flag) {
    return SetField<uint8_t>(VT_LEFT_LIDAR_OFFLINE_FLAG, static_cast<uint8_t>(_left_lidar_offline_flag), 0);
  }
  bool right_lidar_offline_flag() const {
    return GetField<uint8_t>(VT_RIGHT_LIDAR_OFFLINE_FLAG, 0) != 0;
  }
  bool mutate_right_lidar_offline_flag(bool _right_lidar_offline_flag) {
    return SetField<uint8_t>(VT_RIGHT_LIDAR_OFFLINE_FLAG, static_cast<uint8_t>(_right_lidar_offline_flag), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_CAN_OFFLINE_FLAG) &&
           VerifyField<uint8_t>(verifier, VT_TX2_CAN_OFFLINE_FLAG) &&
           VerifyField<uint8_t>(verifier, VT_CGU_CAN_OFFLINE_FLAG) &&
           VerifyField<uint8_t>(verifier, VT_FRONT_LIDAR_OFFLINE_FLAG) &&
           VerifyField<uint8_t>(verifier, VT_FRONT_LEFT_RADAR_OFFLINE_FLAG) &&
           VerifyField<uint8_t>(verifier, VT_FRONT_MIDDLE_RADAR_OFFLINE_FLAG) &&
           VerifyField<uint8_t>(verifier, VT_FRONT_RIGHT_RADAR_OFFLINE_FLAG) &&
           VerifyField<uint8_t>(verifier, VT_REAR_LIDAR_OFFLINE_FLAG) &&
           VerifyField<uint8_t>(verifier, VT_REAR_RADAR_OFFLINE_FLAG) &&
           VerifyField<uint8_t>(verifier, VT_LEFT_LIDAR_OFFLINE_FLAG) &&
           VerifyField<uint8_t>(verifier, VT_RIGHT_LIDAR_OFFLINE_FLAG) &&
           verifier.EndTable();
  }
  CanAboutDevStatusT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CanAboutDevStatusT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CanAboutDevStatus> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CanAboutDevStatusT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CanAboutDevStatusBuilder {
  typedef CanAboutDevStatus Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_wire_can_offline_flag(bool wire_can_offline_flag) {
    fbb_.AddElement<uint8_t>(CanAboutDevStatus::VT_WIRE_CAN_OFFLINE_FLAG, static_cast<uint8_t>(wire_can_offline_flag), 0);
  }
  void add_tx2_can_offline_flag(bool tx2_can_offline_flag) {
    fbb_.AddElement<uint8_t>(CanAboutDevStatus::VT_TX2_CAN_OFFLINE_FLAG, static_cast<uint8_t>(tx2_can_offline_flag), 0);
  }
  void add_cgu_can_offline_flag(bool cgu_can_offline_flag) {
    fbb_.AddElement<uint8_t>(CanAboutDevStatus::VT_CGU_CAN_OFFLINE_FLAG, static_cast<uint8_t>(cgu_can_offline_flag), 0);
  }
  void add_front_lidar_offline_flag(bool front_lidar_offline_flag) {
    fbb_.AddElement<uint8_t>(CanAboutDevStatus::VT_FRONT_LIDAR_OFFLINE_FLAG, static_cast<uint8_t>(front_lidar_offline_flag), 0);
  }
  void add_front_left_radar_offline_flag(bool front_left_radar_offline_flag) {
    fbb_.AddElement<uint8_t>(CanAboutDevStatus::VT_FRONT_LEFT_RADAR_OFFLINE_FLAG, static_cast<uint8_t>(front_left_radar_offline_flag), 0);
  }
  void add_front_middle_radar_offline_flag(bool front_middle_radar_offline_flag) {
    fbb_.AddElement<uint8_t>(CanAboutDevStatus::VT_FRONT_MIDDLE_RADAR_OFFLINE_FLAG, static_cast<uint8_t>(front_middle_radar_offline_flag), 0);
  }
  void add_front_right_radar_offline_flag(bool front_right_radar_offline_flag) {
    fbb_.AddElement<uint8_t>(CanAboutDevStatus::VT_FRONT_RIGHT_RADAR_OFFLINE_FLAG, static_cast<uint8_t>(front_right_radar_offline_flag), 0);
  }
  void add_rear_lidar_offline_flag(bool rear_lidar_offline_flag) {
    fbb_.AddElement<uint8_t>(CanAboutDevStatus::VT_REAR_LIDAR_OFFLINE_FLAG, static_cast<uint8_t>(rear_lidar_offline_flag), 0);
  }
  void add_rear_radar_offline_flag(bool rear_radar_offline_flag) {
    fbb_.AddElement<uint8_t>(CanAboutDevStatus::VT_REAR_RADAR_OFFLINE_FLAG, static_cast<uint8_t>(rear_radar_offline_flag), 0);
  }
  void add_left_lidar_offline_flag(bool left_lidar_offline_flag) {
    fbb_.AddElement<uint8_t>(CanAboutDevStatus::VT_LEFT_LIDAR_OFFLINE_FLAG, static_cast<uint8_t>(left_lidar_offline_flag), 0);
  }
  void add_right_lidar_offline_flag(bool right_lidar_offline_flag) {
    fbb_.AddElement<uint8_t>(CanAboutDevStatus::VT_RIGHT_LIDAR_OFFLINE_FLAG, static_cast<uint8_t>(right_lidar_offline_flag), 0);
  }
  explicit CanAboutDevStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CanAboutDevStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CanAboutDevStatus>(end);
    return o;
  }
};

inline flatbuffers::Offset<CanAboutDevStatus> CreateCanAboutDevStatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool wire_can_offline_flag = false,
    bool tx2_can_offline_flag = false,
    bool cgu_can_offline_flag = false,
    bool front_lidar_offline_flag = false,
    bool front_left_radar_offline_flag = false,
    bool front_middle_radar_offline_flag = false,
    bool front_right_radar_offline_flag = false,
    bool rear_lidar_offline_flag = false,
    bool rear_radar_offline_flag = false,
    bool left_lidar_offline_flag = false,
    bool right_lidar_offline_flag = false) {
  CanAboutDevStatusBuilder builder_(_fbb);
  builder_.add_right_lidar_offline_flag(right_lidar_offline_flag);
  builder_.add_left_lidar_offline_flag(left_lidar_offline_flag);
  builder_.add_rear_radar_offline_flag(rear_radar_offline_flag);
  builder_.add_rear_lidar_offline_flag(rear_lidar_offline_flag);
  builder_.add_front_right_radar_offline_flag(front_right_radar_offline_flag);
  builder_.add_front_middle_radar_offline_flag(front_middle_radar_offline_flag);
  builder_.add_front_left_radar_offline_flag(front_left_radar_offline_flag);
  builder_.add_front_lidar_offline_flag(front_lidar_offline_flag);
  builder_.add_cgu_can_offline_flag(cgu_can_offline_flag);
  builder_.add_tx2_can_offline_flag(tx2_can_offline_flag);
  builder_.add_wire_can_offline_flag(wire_can_offline_flag);
  return builder_.Finish();
}

flatbuffers::Offset<CanAboutDevStatus> CreateCanAboutDevStatus(flatbuffers::FlatBufferBuilder &_fbb, const CanAboutDevStatusT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct WireControlVcuVersionT : public flatbuffers::NativeTable {
  typedef WireControlVcuVersion TableType;
  uint8_t wire_vcu_func_version;
  uint8_t wire_vcu_main_version;
  uint8_t wire_vcu_sub_version;
  WireControlVcuVersionT()
      : wire_vcu_func_version(0),
        wire_vcu_main_version(0),
        wire_vcu_sub_version(0) {
  }
};

inline bool operator==(const WireControlVcuVersionT &lhs, const WireControlVcuVersionT &rhs) {
  return
      (lhs.wire_vcu_func_version == rhs.wire_vcu_func_version) &&
      (lhs.wire_vcu_main_version == rhs.wire_vcu_main_version) &&
      (lhs.wire_vcu_sub_version == rhs.wire_vcu_sub_version);
}

inline bool operator!=(const WireControlVcuVersionT &lhs, const WireControlVcuVersionT &rhs) {
    return !(lhs == rhs);
}


struct WireControlVcuVersion FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WireControlVcuVersionT NativeTableType;
  typedef WireControlVcuVersionBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return WireControlVcuVersionTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIRE_VCU_FUNC_VERSION = 4,
    VT_WIRE_VCU_MAIN_VERSION = 6,
    VT_WIRE_VCU_SUB_VERSION = 8
  };
  uint8_t wire_vcu_func_version() const {
    return GetField<uint8_t>(VT_WIRE_VCU_FUNC_VERSION, 0);
  }
  bool mutate_wire_vcu_func_version(uint8_t _wire_vcu_func_version) {
    return SetField<uint8_t>(VT_WIRE_VCU_FUNC_VERSION, _wire_vcu_func_version, 0);
  }
  uint8_t wire_vcu_main_version() const {
    return GetField<uint8_t>(VT_WIRE_VCU_MAIN_VERSION, 0);
  }
  bool mutate_wire_vcu_main_version(uint8_t _wire_vcu_main_version) {
    return SetField<uint8_t>(VT_WIRE_VCU_MAIN_VERSION, _wire_vcu_main_version, 0);
  }
  uint8_t wire_vcu_sub_version() const {
    return GetField<uint8_t>(VT_WIRE_VCU_SUB_VERSION, 0);
  }
  bool mutate_wire_vcu_sub_version(uint8_t _wire_vcu_sub_version) {
    return SetField<uint8_t>(VT_WIRE_VCU_SUB_VERSION, _wire_vcu_sub_version, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_VCU_FUNC_VERSION) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_VCU_MAIN_VERSION) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_VCU_SUB_VERSION) &&
           verifier.EndTable();
  }
  WireControlVcuVersionT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(WireControlVcuVersionT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<WireControlVcuVersion> Pack(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVcuVersionT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct WireControlVcuVersionBuilder {
  typedef WireControlVcuVersion Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_wire_vcu_func_version(uint8_t wire_vcu_func_version) {
    fbb_.AddElement<uint8_t>(WireControlVcuVersion::VT_WIRE_VCU_FUNC_VERSION, wire_vcu_func_version, 0);
  }
  void add_wire_vcu_main_version(uint8_t wire_vcu_main_version) {
    fbb_.AddElement<uint8_t>(WireControlVcuVersion::VT_WIRE_VCU_MAIN_VERSION, wire_vcu_main_version, 0);
  }
  void add_wire_vcu_sub_version(uint8_t wire_vcu_sub_version) {
    fbb_.AddElement<uint8_t>(WireControlVcuVersion::VT_WIRE_VCU_SUB_VERSION, wire_vcu_sub_version, 0);
  }
  explicit WireControlVcuVersionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WireControlVcuVersion> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WireControlVcuVersion>(end);
    return o;
  }
};

inline flatbuffers::Offset<WireControlVcuVersion> CreateWireControlVcuVersion(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t wire_vcu_func_version = 0,
    uint8_t wire_vcu_main_version = 0,
    uint8_t wire_vcu_sub_version = 0) {
  WireControlVcuVersionBuilder builder_(_fbb);
  builder_.add_wire_vcu_sub_version(wire_vcu_sub_version);
  builder_.add_wire_vcu_main_version(wire_vcu_main_version);
  builder_.add_wire_vcu_func_version(wire_vcu_func_version);
  return builder_.Finish();
}

flatbuffers::Offset<WireControlVcuVersion> CreateWireControlVcuVersion(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVcuVersionT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct WireControlVehicleFaultT : public flatbuffers::NativeTable {
  typedef WireControlVehicleFault TableType;
  uint8_t wire_status_inclinator_status;
  uint8_t wire_status_ruler_status;
  uint8_t wire_status_robot_control_status;
  uint8_t wire_status_throttle_fault_status;
  uint8_t wire_status_electric_brake_fault_status;
  uint32_t wire_status_mechanicle_brake_motor_error_num;
  uint32_t wire_status_steer_motor_error_num;
  uint8_t wire_status_engine_falut;
  uint8_t wire_status_transmission_falut;
  uint8_t wire_status_ebs_falut;
  uint8_t wire_status_eps_falut;
  uint8_t wire_status_air_filter_alarm;
  uint8_t wire_status_steer_oil_filter_alarm;
  uint8_t wire_status_left_light;
  uint8_t wire_status_right_light;
  uint8_t wire_status_low_beam;
  uint8_t wire_status_high_beam;
  uint8_t wire_status_rotate_alarm_light;
  uint8_t wire_status_air_horns;
  uint8_t wire_status_front_fog_lamp;
  uint8_t wire_status_front_work_lamp;
  uint8_t wire_status_side_lamp;
  uint8_t wire_status_positoin_lamp;
  uint8_t wire_status_wiper_motor_power;
  uint8_t wire_status_ebs_power;
  uint8_t wire_status_pressure_sensor_power;
  uint8_t wire_status_rise_solenoid_savle_up;
  uint8_t wire_status_rise_solenoid_savle_down;
  uint8_t wire_status_manual_solenoid_savle;
  uint8_t wire_status_rear_left_light;
  uint8_t wire_status_rear_right_light;
  uint8_t wire_status_rear_pos_light;
  uint8_t wire_status_brake_light;
  uint8_t wire_status_reverse_light_horns;
  uint8_t wire_status_rear_work;
  uint8_t wire_status_heat_sink1;
  uint8_t wire_status_heat_sink2;
  uint8_t wire_status_diff_solenoid_savle;
  uint8_t wire_status_dryer_power;
  uint8_t wire_status_inclinator_power;
  uint8_t wire_status_cold_water_treasure_power;
  uint8_t wire_status_exhaust_brake;
  uint8_t wire_status_error_level;
  uint8_t wire_status_urgent_brake;
  uint8_t wire_status_engine_activation;
  uint8_t wire_status_hand_brake_activation;
  uint8_t wire_status_ebs_activation;
  uint8_t wire_status_retarder_activation;
  uint8_t wire_status_transmission_activation;
  uint8_t wire_status_eps_activation;
  uint8_t wire_status_lift_activation;
  uint8_t wire_status_pressure_sensor1;
  uint8_t wire_status_pressure_sensor2;
  uint8_t wire_status_oil_sensor;
  int32_t wire_status_zhongchuang_motor_speed;
  uint8_t wire_status_steerwheelmotor_status;
  float wire_status_truck_horizontal_angle;
  float wire_status_truck_longitudinal_angle;
  float wire_status_retarder_torque_percent;
  uint8_t wire_status_vehicle_ctrl_mode;
  uint64_t Wirectl_nTime;
  uint8_t wire_status_steer_outrange_status;
  uint8_t wire_status_steer_setzero_status;
  uint8_t wire_status_steer_sequence_number;
  uint8_t wire_status_steering_valve;
  uint8_t wire_status_gear_shift_lamp;
  uint8_t wire_status_hydraulic_oil_temp_high;
  uint8_t wire_status_engine_coolant_level_low;
  uint8_t wire_status_engine_coolant_temperature_high;
  uint8_t wire_status_eng_stop_fault_lamp;
  uint8_t wire_status_eng_warning_fault_lamp;
  uint8_t wire_status_drive_system_fault_lamp;
  uint8_t wire_status_brake_press_low;
  uint8_t wire_status_streer_press_low;
  uint8_t wire_status_eng_oil_pressure_low;
  uint8_t wire_status_steering_valve_fault;
  WireControlVehicleFaultT()
      : wire_status_inclinator_status(0),
        wire_status_ruler_status(0),
        wire_status_robot_control_status(0),
        wire_status_throttle_fault_status(0),
        wire_status_electric_brake_fault_status(0),
        wire_status_mechanicle_brake_motor_error_num(0),
        wire_status_steer_motor_error_num(0),
        wire_status_engine_falut(0),
        wire_status_transmission_falut(0),
        wire_status_ebs_falut(0),
        wire_status_eps_falut(0),
        wire_status_air_filter_alarm(0),
        wire_status_steer_oil_filter_alarm(0),
        wire_status_left_light(0),
        wire_status_right_light(0),
        wire_status_low_beam(0),
        wire_status_high_beam(0),
        wire_status_rotate_alarm_light(0),
        wire_status_air_horns(0),
        wire_status_front_fog_lamp(0),
        wire_status_front_work_lamp(0),
        wire_status_side_lamp(0),
        wire_status_positoin_lamp(0),
        wire_status_wiper_motor_power(0),
        wire_status_ebs_power(0),
        wire_status_pressure_sensor_power(0),
        wire_status_rise_solenoid_savle_up(0),
        wire_status_rise_solenoid_savle_down(0),
        wire_status_manual_solenoid_savle(0),
        wire_status_rear_left_light(0),
        wire_status_rear_right_light(0),
        wire_status_rear_pos_light(0),
        wire_status_brake_light(0),
        wire_status_reverse_light_horns(0),
        wire_status_rear_work(0),
        wire_status_heat_sink1(0),
        wire_status_heat_sink2(0),
        wire_status_diff_solenoid_savle(0),
        wire_status_dryer_power(0),
        wire_status_inclinator_power(0),
        wire_status_cold_water_treasure_power(0),
        wire_status_exhaust_brake(0),
        wire_status_error_level(0),
        wire_status_urgent_brake(0),
        wire_status_engine_activation(0),
        wire_status_hand_brake_activation(0),
        wire_status_ebs_activation(0),
        wire_status_retarder_activation(0),
        wire_status_transmission_activation(0),
        wire_status_eps_activation(0),
        wire_status_lift_activation(0),
        wire_status_pressure_sensor1(0),
        wire_status_pressure_sensor2(0),
        wire_status_oil_sensor(0),
        wire_status_zhongchuang_motor_speed(0),
        wire_status_steerwheelmotor_status(0),
        wire_status_truck_horizontal_angle(0.0f),
        wire_status_truck_longitudinal_angle(0.0f),
        wire_status_retarder_torque_percent(0.0f),
        wire_status_vehicle_ctrl_mode(0),
        Wirectl_nTime(0),
        wire_status_steer_outrange_status(0),
        wire_status_steer_setzero_status(0),
        wire_status_steer_sequence_number(0),
        wire_status_steering_valve(0),
        wire_status_gear_shift_lamp(0),
        wire_status_hydraulic_oil_temp_high(0),
        wire_status_engine_coolant_level_low(0),
        wire_status_engine_coolant_temperature_high(0),
        wire_status_eng_stop_fault_lamp(0),
        wire_status_eng_warning_fault_lamp(0),
        wire_status_drive_system_fault_lamp(0),
        wire_status_brake_press_low(0),
        wire_status_streer_press_low(0),
        wire_status_eng_oil_pressure_low(0),
        wire_status_steering_valve_fault(0) {
  }
};

inline bool operator==(const WireControlVehicleFaultT &lhs, const WireControlVehicleFaultT &rhs) {
  return
      (lhs.wire_status_inclinator_status == rhs.wire_status_inclinator_status) &&
      (lhs.wire_status_ruler_status == rhs.wire_status_ruler_status) &&
      (lhs.wire_status_robot_control_status == rhs.wire_status_robot_control_status) &&
      (lhs.wire_status_throttle_fault_status == rhs.wire_status_throttle_fault_status) &&
      (lhs.wire_status_electric_brake_fault_status == rhs.wire_status_electric_brake_fault_status) &&
      (lhs.wire_status_mechanicle_brake_motor_error_num == rhs.wire_status_mechanicle_brake_motor_error_num) &&
      (lhs.wire_status_steer_motor_error_num == rhs.wire_status_steer_motor_error_num) &&
      (lhs.wire_status_engine_falut == rhs.wire_status_engine_falut) &&
      (lhs.wire_status_transmission_falut == rhs.wire_status_transmission_falut) &&
      (lhs.wire_status_ebs_falut == rhs.wire_status_ebs_falut) &&
      (lhs.wire_status_eps_falut == rhs.wire_status_eps_falut) &&
      (lhs.wire_status_air_filter_alarm == rhs.wire_status_air_filter_alarm) &&
      (lhs.wire_status_steer_oil_filter_alarm == rhs.wire_status_steer_oil_filter_alarm) &&
      (lhs.wire_status_left_light == rhs.wire_status_left_light) &&
      (lhs.wire_status_right_light == rhs.wire_status_right_light) &&
      (lhs.wire_status_low_beam == rhs.wire_status_low_beam) &&
      (lhs.wire_status_high_beam == rhs.wire_status_high_beam) &&
      (lhs.wire_status_rotate_alarm_light == rhs.wire_status_rotate_alarm_light) &&
      (lhs.wire_status_air_horns == rhs.wire_status_air_horns) &&
      (lhs.wire_status_front_fog_lamp == rhs.wire_status_front_fog_lamp) &&
      (lhs.wire_status_front_work_lamp == rhs.wire_status_front_work_lamp) &&
      (lhs.wire_status_side_lamp == rhs.wire_status_side_lamp) &&
      (lhs.wire_status_positoin_lamp == rhs.wire_status_positoin_lamp) &&
      (lhs.wire_status_wiper_motor_power == rhs.wire_status_wiper_motor_power) &&
      (lhs.wire_status_ebs_power == rhs.wire_status_ebs_power) &&
      (lhs.wire_status_pressure_sensor_power == rhs.wire_status_pressure_sensor_power) &&
      (lhs.wire_status_rise_solenoid_savle_up == rhs.wire_status_rise_solenoid_savle_up) &&
      (lhs.wire_status_rise_solenoid_savle_down == rhs.wire_status_rise_solenoid_savle_down) &&
      (lhs.wire_status_manual_solenoid_savle == rhs.wire_status_manual_solenoid_savle) &&
      (lhs.wire_status_rear_left_light == rhs.wire_status_rear_left_light) &&
      (lhs.wire_status_rear_right_light == rhs.wire_status_rear_right_light) &&
      (lhs.wire_status_rear_pos_light == rhs.wire_status_rear_pos_light) &&
      (lhs.wire_status_brake_light == rhs.wire_status_brake_light) &&
      (lhs.wire_status_reverse_light_horns == rhs.wire_status_reverse_light_horns) &&
      (lhs.wire_status_rear_work == rhs.wire_status_rear_work) &&
      (lhs.wire_status_heat_sink1 == rhs.wire_status_heat_sink1) &&
      (lhs.wire_status_heat_sink2 == rhs.wire_status_heat_sink2) &&
      (lhs.wire_status_diff_solenoid_savle == rhs.wire_status_diff_solenoid_savle) &&
      (lhs.wire_status_dryer_power == rhs.wire_status_dryer_power) &&
      (lhs.wire_status_inclinator_power == rhs.wire_status_inclinator_power) &&
      (lhs.wire_status_cold_water_treasure_power == rhs.wire_status_cold_water_treasure_power) &&
      (lhs.wire_status_exhaust_brake == rhs.wire_status_exhaust_brake) &&
      (lhs.wire_status_error_level == rhs.wire_status_error_level) &&
      (lhs.wire_status_urgent_brake == rhs.wire_status_urgent_brake) &&
      (lhs.wire_status_engine_activation == rhs.wire_status_engine_activation) &&
      (lhs.wire_status_hand_brake_activation == rhs.wire_status_hand_brake_activation) &&
      (lhs.wire_status_ebs_activation == rhs.wire_status_ebs_activation) &&
      (lhs.wire_status_retarder_activation == rhs.wire_status_retarder_activation) &&
      (lhs.wire_status_transmission_activation == rhs.wire_status_transmission_activation) &&
      (lhs.wire_status_eps_activation == rhs.wire_status_eps_activation) &&
      (lhs.wire_status_lift_activation == rhs.wire_status_lift_activation) &&
      (lhs.wire_status_pressure_sensor1 == rhs.wire_status_pressure_sensor1) &&
      (lhs.wire_status_pressure_sensor2 == rhs.wire_status_pressure_sensor2) &&
      (lhs.wire_status_oil_sensor == rhs.wire_status_oil_sensor) &&
      (lhs.wire_status_zhongchuang_motor_speed == rhs.wire_status_zhongchuang_motor_speed) &&
      (lhs.wire_status_steerwheelmotor_status == rhs.wire_status_steerwheelmotor_status) &&
      (lhs.wire_status_truck_horizontal_angle == rhs.wire_status_truck_horizontal_angle) &&
      (lhs.wire_status_truck_longitudinal_angle == rhs.wire_status_truck_longitudinal_angle) &&
      (lhs.wire_status_retarder_torque_percent == rhs.wire_status_retarder_torque_percent) &&
      (lhs.wire_status_vehicle_ctrl_mode == rhs.wire_status_vehicle_ctrl_mode) &&
      (lhs.Wirectl_nTime == rhs.Wirectl_nTime) &&
      (lhs.wire_status_steer_outrange_status == rhs.wire_status_steer_outrange_status) &&
      (lhs.wire_status_steer_setzero_status == rhs.wire_status_steer_setzero_status) &&
      (lhs.wire_status_steer_sequence_number == rhs.wire_status_steer_sequence_number) &&
      (lhs.wire_status_steering_valve == rhs.wire_status_steering_valve) &&
      (lhs.wire_status_gear_shift_lamp == rhs.wire_status_gear_shift_lamp) &&
      (lhs.wire_status_hydraulic_oil_temp_high == rhs.wire_status_hydraulic_oil_temp_high) &&
      (lhs.wire_status_engine_coolant_level_low == rhs.wire_status_engine_coolant_level_low) &&
      (lhs.wire_status_engine_coolant_temperature_high == rhs.wire_status_engine_coolant_temperature_high) &&
      (lhs.wire_status_eng_stop_fault_lamp == rhs.wire_status_eng_stop_fault_lamp) &&
      (lhs.wire_status_eng_warning_fault_lamp == rhs.wire_status_eng_warning_fault_lamp) &&
      (lhs.wire_status_drive_system_fault_lamp == rhs.wire_status_drive_system_fault_lamp) &&
      (lhs.wire_status_brake_press_low == rhs.wire_status_brake_press_low) &&
      (lhs.wire_status_streer_press_low == rhs.wire_status_streer_press_low) &&
      (lhs.wire_status_eng_oil_pressure_low == rhs.wire_status_eng_oil_pressure_low) &&
      (lhs.wire_status_steering_valve_fault == rhs.wire_status_steering_valve_fault);
}

inline bool operator!=(const WireControlVehicleFaultT &lhs, const WireControlVehicleFaultT &rhs) {
    return !(lhs == rhs);
}


struct WireControlVehicleFault FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WireControlVehicleFaultT NativeTableType;
  typedef WireControlVehicleFaultBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return WireControlVehicleFaultTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIRE_STATUS_INCLINATOR_STATUS = 4,
    VT_WIRE_STATUS_RULER_STATUS = 6,
    VT_WIRE_STATUS_ROBOT_CONTROL_STATUS = 8,
    VT_WIRE_STATUS_THROTTLE_FAULT_STATUS = 10,
    VT_WIRE_STATUS_ELECTRIC_BRAKE_FAULT_STATUS = 12,
    VT_WIRE_STATUS_MECHANICLE_BRAKE_MOTOR_ERROR_NUM = 14,
    VT_WIRE_STATUS_STEER_MOTOR_ERROR_NUM = 16,
    VT_WIRE_STATUS_ENGINE_FALUT = 18,
    VT_WIRE_STATUS_TRANSMISSION_FALUT = 20,
    VT_WIRE_STATUS_EBS_FALUT = 22,
    VT_WIRE_STATUS_EPS_FALUT = 24,
    VT_WIRE_STATUS_AIR_FILTER_ALARM = 26,
    VT_WIRE_STATUS_STEER_OIL_FILTER_ALARM = 28,
    VT_WIRE_STATUS_LEFT_LIGHT = 30,
    VT_WIRE_STATUS_RIGHT_LIGHT = 32,
    VT_WIRE_STATUS_LOW_BEAM = 34,
    VT_WIRE_STATUS_HIGH_BEAM = 36,
    VT_WIRE_STATUS_ROTATE_ALARM_LIGHT = 38,
    VT_WIRE_STATUS_AIR_HORNS = 40,
    VT_WIRE_STATUS_FRONT_FOG_LAMP = 42,
    VT_WIRE_STATUS_FRONT_WORK_LAMP = 44,
    VT_WIRE_STATUS_SIDE_LAMP = 46,
    VT_WIRE_STATUS_POSITOIN_LAMP = 48,
    VT_WIRE_STATUS_WIPER_MOTOR_POWER = 50,
    VT_WIRE_STATUS_EBS_POWER = 52,
    VT_WIRE_STATUS_PRESSURE_SENSOR_POWER = 54,
    VT_WIRE_STATUS_RISE_SOLENOID_SAVLE_UP = 56,
    VT_WIRE_STATUS_RISE_SOLENOID_SAVLE_DOWN = 58,
    VT_WIRE_STATUS_MANUAL_SOLENOID_SAVLE = 60,
    VT_WIRE_STATUS_REAR_LEFT_LIGHT = 62,
    VT_WIRE_STATUS_REAR_RIGHT_LIGHT = 64,
    VT_WIRE_STATUS_REAR_POS_LIGHT = 66,
    VT_WIRE_STATUS_BRAKE_LIGHT = 68,
    VT_WIRE_STATUS_REVERSE_LIGHT_HORNS = 70,
    VT_WIRE_STATUS_REAR_WORK = 72,
    VT_WIRE_STATUS_HEAT_SINK1 = 74,
    VT_WIRE_STATUS_HEAT_SINK2 = 76,
    VT_WIRE_STATUS_DIFF_SOLENOID_SAVLE = 78,
    VT_WIRE_STATUS_DRYER_POWER = 80,
    VT_WIRE_STATUS_INCLINATOR_POWER = 82,
    VT_WIRE_STATUS_COLD_WATER_TREASURE_POWER = 84,
    VT_WIRE_STATUS_EXHAUST_BRAKE = 86,
    VT_WIRE_STATUS_ERROR_LEVEL = 88,
    VT_WIRE_STATUS_URGENT_BRAKE = 90,
    VT_WIRE_STATUS_ENGINE_ACTIVATION = 92,
    VT_WIRE_STATUS_HAND_BRAKE_ACTIVATION = 94,
    VT_WIRE_STATUS_EBS_ACTIVATION = 96,
    VT_WIRE_STATUS_RETARDER_ACTIVATION = 98,
    VT_WIRE_STATUS_TRANSMISSION_ACTIVATION = 100,
    VT_WIRE_STATUS_EPS_ACTIVATION = 102,
    VT_WIRE_STATUS_LIFT_ACTIVATION = 104,
    VT_WIRE_STATUS_PRESSURE_SENSOR1 = 106,
    VT_WIRE_STATUS_PRESSURE_SENSOR2 = 108,
    VT_WIRE_STATUS_OIL_SENSOR = 110,
    VT_WIRE_STATUS_ZHONGCHUANG_MOTOR_SPEED = 112,
    VT_WIRE_STATUS_STEERWHEELMOTOR_STATUS = 114,
    VT_WIRE_STATUS_TRUCK_HORIZONTAL_ANGLE = 116,
    VT_WIRE_STATUS_TRUCK_LONGITUDINAL_ANGLE = 118,
    VT_WIRE_STATUS_RETARDER_TORQUE_PERCENT = 120,
    VT_WIRE_STATUS_VEHICLE_CTRL_MODE = 122,
    VT_WIRECTL_NTIME = 124,
    VT_WIRE_STATUS_STEER_OUTRANGE_STATUS = 126,
    VT_WIRE_STATUS_STEER_SETZERO_STATUS = 128,
    VT_WIRE_STATUS_STEER_SEQUENCE_NUMBER = 130,
    VT_WIRE_STATUS_STEERING_VALVE = 132,
    VT_WIRE_STATUS_GEAR_SHIFT_LAMP = 134,
    VT_WIRE_STATUS_HYDRAULIC_OIL_TEMP_HIGH = 136,
    VT_WIRE_STATUS_ENGINE_COOLANT_LEVEL_LOW = 138,
    VT_WIRE_STATUS_ENGINE_COOLANT_TEMPERATURE_HIGH = 140,
    VT_WIRE_STATUS_ENG_STOP_FAULT_LAMP = 142,
    VT_WIRE_STATUS_ENG_WARNING_FAULT_LAMP = 144,
    VT_WIRE_STATUS_DRIVE_SYSTEM_FAULT_LAMP = 146,
    VT_WIRE_STATUS_BRAKE_PRESS_LOW = 148,
    VT_WIRE_STATUS_STREER_PRESS_LOW = 150,
    VT_WIRE_STATUS_ENG_OIL_PRESSURE_LOW = 152,
    VT_WIRE_STATUS_STEERING_VALVE_FAULT = 154
  };
  uint8_t wire_status_inclinator_status() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_INCLINATOR_STATUS, 0);
  }
  bool mutate_wire_status_inclinator_status(uint8_t _wire_status_inclinator_status) {
    return SetField<uint8_t>(VT_WIRE_STATUS_INCLINATOR_STATUS, _wire_status_inclinator_status, 0);
  }
  uint8_t wire_status_ruler_status() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_RULER_STATUS, 0);
  }
  bool mutate_wire_status_ruler_status(uint8_t _wire_status_ruler_status) {
    return SetField<uint8_t>(VT_WIRE_STATUS_RULER_STATUS, _wire_status_ruler_status, 0);
  }
  uint8_t wire_status_robot_control_status() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_ROBOT_CONTROL_STATUS, 0);
  }
  bool mutate_wire_status_robot_control_status(uint8_t _wire_status_robot_control_status) {
    return SetField<uint8_t>(VT_WIRE_STATUS_ROBOT_CONTROL_STATUS, _wire_status_robot_control_status, 0);
  }
  uint8_t wire_status_throttle_fault_status() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_THROTTLE_FAULT_STATUS, 0);
  }
  bool mutate_wire_status_throttle_fault_status(uint8_t _wire_status_throttle_fault_status) {
    return SetField<uint8_t>(VT_WIRE_STATUS_THROTTLE_FAULT_STATUS, _wire_status_throttle_fault_status, 0);
  }
  uint8_t wire_status_electric_brake_fault_status() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_ELECTRIC_BRAKE_FAULT_STATUS, 0);
  }
  bool mutate_wire_status_electric_brake_fault_status(uint8_t _wire_status_electric_brake_fault_status) {
    return SetField<uint8_t>(VT_WIRE_STATUS_ELECTRIC_BRAKE_FAULT_STATUS, _wire_status_electric_brake_fault_status, 0);
  }
  uint32_t wire_status_mechanicle_brake_motor_error_num() const {
    return GetField<uint32_t>(VT_WIRE_STATUS_MECHANICLE_BRAKE_MOTOR_ERROR_NUM, 0);
  }
  bool mutate_wire_status_mechanicle_brake_motor_error_num(uint32_t _wire_status_mechanicle_brake_motor_error_num) {
    return SetField<uint32_t>(VT_WIRE_STATUS_MECHANICLE_BRAKE_MOTOR_ERROR_NUM, _wire_status_mechanicle_brake_motor_error_num, 0);
  }
  uint32_t wire_status_steer_motor_error_num() const {
    return GetField<uint32_t>(VT_WIRE_STATUS_STEER_MOTOR_ERROR_NUM, 0);
  }
  bool mutate_wire_status_steer_motor_error_num(uint32_t _wire_status_steer_motor_error_num) {
    return SetField<uint32_t>(VT_WIRE_STATUS_STEER_MOTOR_ERROR_NUM, _wire_status_steer_motor_error_num, 0);
  }
  uint8_t wire_status_engine_falut() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_ENGINE_FALUT, 0);
  }
  bool mutate_wire_status_engine_falut(uint8_t _wire_status_engine_falut) {
    return SetField<uint8_t>(VT_WIRE_STATUS_ENGINE_FALUT, _wire_status_engine_falut, 0);
  }
  uint8_t wire_status_transmission_falut() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_TRANSMISSION_FALUT, 0);
  }
  bool mutate_wire_status_transmission_falut(uint8_t _wire_status_transmission_falut) {
    return SetField<uint8_t>(VT_WIRE_STATUS_TRANSMISSION_FALUT, _wire_status_transmission_falut, 0);
  }
  uint8_t wire_status_ebs_falut() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_EBS_FALUT, 0);
  }
  bool mutate_wire_status_ebs_falut(uint8_t _wire_status_ebs_falut) {
    return SetField<uint8_t>(VT_WIRE_STATUS_EBS_FALUT, _wire_status_ebs_falut, 0);
  }
  uint8_t wire_status_eps_falut() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_EPS_FALUT, 0);
  }
  bool mutate_wire_status_eps_falut(uint8_t _wire_status_eps_falut) {
    return SetField<uint8_t>(VT_WIRE_STATUS_EPS_FALUT, _wire_status_eps_falut, 0);
  }
  uint8_t wire_status_air_filter_alarm() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_AIR_FILTER_ALARM, 0);
  }
  bool mutate_wire_status_air_filter_alarm(uint8_t _wire_status_air_filter_alarm) {
    return SetField<uint8_t>(VT_WIRE_STATUS_AIR_FILTER_ALARM, _wire_status_air_filter_alarm, 0);
  }
  uint8_t wire_status_steer_oil_filter_alarm() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_STEER_OIL_FILTER_ALARM, 0);
  }
  bool mutate_wire_status_steer_oil_filter_alarm(uint8_t _wire_status_steer_oil_filter_alarm) {
    return SetField<uint8_t>(VT_WIRE_STATUS_STEER_OIL_FILTER_ALARM, _wire_status_steer_oil_filter_alarm, 0);
  }
  uint8_t wire_status_left_light() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_LEFT_LIGHT, 0);
  }
  bool mutate_wire_status_left_light(uint8_t _wire_status_left_light) {
    return SetField<uint8_t>(VT_WIRE_STATUS_LEFT_LIGHT, _wire_status_left_light, 0);
  }
  uint8_t wire_status_right_light() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_RIGHT_LIGHT, 0);
  }
  bool mutate_wire_status_right_light(uint8_t _wire_status_right_light) {
    return SetField<uint8_t>(VT_WIRE_STATUS_RIGHT_LIGHT, _wire_status_right_light, 0);
  }
  uint8_t wire_status_low_beam() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_LOW_BEAM, 0);
  }
  bool mutate_wire_status_low_beam(uint8_t _wire_status_low_beam) {
    return SetField<uint8_t>(VT_WIRE_STATUS_LOW_BEAM, _wire_status_low_beam, 0);
  }
  uint8_t wire_status_high_beam() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_HIGH_BEAM, 0);
  }
  bool mutate_wire_status_high_beam(uint8_t _wire_status_high_beam) {
    return SetField<uint8_t>(VT_WIRE_STATUS_HIGH_BEAM, _wire_status_high_beam, 0);
  }
  uint8_t wire_status_rotate_alarm_light() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_ROTATE_ALARM_LIGHT, 0);
  }
  bool mutate_wire_status_rotate_alarm_light(uint8_t _wire_status_rotate_alarm_light) {
    return SetField<uint8_t>(VT_WIRE_STATUS_ROTATE_ALARM_LIGHT, _wire_status_rotate_alarm_light, 0);
  }
  uint8_t wire_status_air_horns() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_AIR_HORNS, 0);
  }
  bool mutate_wire_status_air_horns(uint8_t _wire_status_air_horns) {
    return SetField<uint8_t>(VT_WIRE_STATUS_AIR_HORNS, _wire_status_air_horns, 0);
  }
  uint8_t wire_status_front_fog_lamp() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_FRONT_FOG_LAMP, 0);
  }
  bool mutate_wire_status_front_fog_lamp(uint8_t _wire_status_front_fog_lamp) {
    return SetField<uint8_t>(VT_WIRE_STATUS_FRONT_FOG_LAMP, _wire_status_front_fog_lamp, 0);
  }
  uint8_t wire_status_front_work_lamp() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_FRONT_WORK_LAMP, 0);
  }
  bool mutate_wire_status_front_work_lamp(uint8_t _wire_status_front_work_lamp) {
    return SetField<uint8_t>(VT_WIRE_STATUS_FRONT_WORK_LAMP, _wire_status_front_work_lamp, 0);
  }
  uint8_t wire_status_side_lamp() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_SIDE_LAMP, 0);
  }
  bool mutate_wire_status_side_lamp(uint8_t _wire_status_side_lamp) {
    return SetField<uint8_t>(VT_WIRE_STATUS_SIDE_LAMP, _wire_status_side_lamp, 0);
  }
  uint8_t wire_status_positoin_lamp() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_POSITOIN_LAMP, 0);
  }
  bool mutate_wire_status_positoin_lamp(uint8_t _wire_status_positoin_lamp) {
    return SetField<uint8_t>(VT_WIRE_STATUS_POSITOIN_LAMP, _wire_status_positoin_lamp, 0);
  }
  uint8_t wire_status_wiper_motor_power() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_WIPER_MOTOR_POWER, 0);
  }
  bool mutate_wire_status_wiper_motor_power(uint8_t _wire_status_wiper_motor_power) {
    return SetField<uint8_t>(VT_WIRE_STATUS_WIPER_MOTOR_POWER, _wire_status_wiper_motor_power, 0);
  }
  uint8_t wire_status_ebs_power() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_EBS_POWER, 0);
  }
  bool mutate_wire_status_ebs_power(uint8_t _wire_status_ebs_power) {
    return SetField<uint8_t>(VT_WIRE_STATUS_EBS_POWER, _wire_status_ebs_power, 0);
  }
  uint8_t wire_status_pressure_sensor_power() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_PRESSURE_SENSOR_POWER, 0);
  }
  bool mutate_wire_status_pressure_sensor_power(uint8_t _wire_status_pressure_sensor_power) {
    return SetField<uint8_t>(VT_WIRE_STATUS_PRESSURE_SENSOR_POWER, _wire_status_pressure_sensor_power, 0);
  }
  uint8_t wire_status_rise_solenoid_savle_up() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_RISE_SOLENOID_SAVLE_UP, 0);
  }
  bool mutate_wire_status_rise_solenoid_savle_up(uint8_t _wire_status_rise_solenoid_savle_up) {
    return SetField<uint8_t>(VT_WIRE_STATUS_RISE_SOLENOID_SAVLE_UP, _wire_status_rise_solenoid_savle_up, 0);
  }
  uint8_t wire_status_rise_solenoid_savle_down() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_RISE_SOLENOID_SAVLE_DOWN, 0);
  }
  bool mutate_wire_status_rise_solenoid_savle_down(uint8_t _wire_status_rise_solenoid_savle_down) {
    return SetField<uint8_t>(VT_WIRE_STATUS_RISE_SOLENOID_SAVLE_DOWN, _wire_status_rise_solenoid_savle_down, 0);
  }
  uint8_t wire_status_manual_solenoid_savle() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_MANUAL_SOLENOID_SAVLE, 0);
  }
  bool mutate_wire_status_manual_solenoid_savle(uint8_t _wire_status_manual_solenoid_savle) {
    return SetField<uint8_t>(VT_WIRE_STATUS_MANUAL_SOLENOID_SAVLE, _wire_status_manual_solenoid_savle, 0);
  }
  uint8_t wire_status_rear_left_light() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_REAR_LEFT_LIGHT, 0);
  }
  bool mutate_wire_status_rear_left_light(uint8_t _wire_status_rear_left_light) {
    return SetField<uint8_t>(VT_WIRE_STATUS_REAR_LEFT_LIGHT, _wire_status_rear_left_light, 0);
  }
  uint8_t wire_status_rear_right_light() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_REAR_RIGHT_LIGHT, 0);
  }
  bool mutate_wire_status_rear_right_light(uint8_t _wire_status_rear_right_light) {
    return SetField<uint8_t>(VT_WIRE_STATUS_REAR_RIGHT_LIGHT, _wire_status_rear_right_light, 0);
  }
  uint8_t wire_status_rear_pos_light() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_REAR_POS_LIGHT, 0);
  }
  bool mutate_wire_status_rear_pos_light(uint8_t _wire_status_rear_pos_light) {
    return SetField<uint8_t>(VT_WIRE_STATUS_REAR_POS_LIGHT, _wire_status_rear_pos_light, 0);
  }
  uint8_t wire_status_brake_light() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_BRAKE_LIGHT, 0);
  }
  bool mutate_wire_status_brake_light(uint8_t _wire_status_brake_light) {
    return SetField<uint8_t>(VT_WIRE_STATUS_BRAKE_LIGHT, _wire_status_brake_light, 0);
  }
  uint8_t wire_status_reverse_light_horns() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_REVERSE_LIGHT_HORNS, 0);
  }
  bool mutate_wire_status_reverse_light_horns(uint8_t _wire_status_reverse_light_horns) {
    return SetField<uint8_t>(VT_WIRE_STATUS_REVERSE_LIGHT_HORNS, _wire_status_reverse_light_horns, 0);
  }
  uint8_t wire_status_rear_work() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_REAR_WORK, 0);
  }
  bool mutate_wire_status_rear_work(uint8_t _wire_status_rear_work) {
    return SetField<uint8_t>(VT_WIRE_STATUS_REAR_WORK, _wire_status_rear_work, 0);
  }
  uint8_t wire_status_heat_sink1() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_HEAT_SINK1, 0);
  }
  bool mutate_wire_status_heat_sink1(uint8_t _wire_status_heat_sink1) {
    return SetField<uint8_t>(VT_WIRE_STATUS_HEAT_SINK1, _wire_status_heat_sink1, 0);
  }
  uint8_t wire_status_heat_sink2() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_HEAT_SINK2, 0);
  }
  bool mutate_wire_status_heat_sink2(uint8_t _wire_status_heat_sink2) {
    return SetField<uint8_t>(VT_WIRE_STATUS_HEAT_SINK2, _wire_status_heat_sink2, 0);
  }
  uint8_t wire_status_diff_solenoid_savle() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_DIFF_SOLENOID_SAVLE, 0);
  }
  bool mutate_wire_status_diff_solenoid_savle(uint8_t _wire_status_diff_solenoid_savle) {
    return SetField<uint8_t>(VT_WIRE_STATUS_DIFF_SOLENOID_SAVLE, _wire_status_diff_solenoid_savle, 0);
  }
  uint8_t wire_status_dryer_power() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_DRYER_POWER, 0);
  }
  bool mutate_wire_status_dryer_power(uint8_t _wire_status_dryer_power) {
    return SetField<uint8_t>(VT_WIRE_STATUS_DRYER_POWER, _wire_status_dryer_power, 0);
  }
  uint8_t wire_status_inclinator_power() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_INCLINATOR_POWER, 0);
  }
  bool mutate_wire_status_inclinator_power(uint8_t _wire_status_inclinator_power) {
    return SetField<uint8_t>(VT_WIRE_STATUS_INCLINATOR_POWER, _wire_status_inclinator_power, 0);
  }
  uint8_t wire_status_cold_water_treasure_power() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_COLD_WATER_TREASURE_POWER, 0);
  }
  bool mutate_wire_status_cold_water_treasure_power(uint8_t _wire_status_cold_water_treasure_power) {
    return SetField<uint8_t>(VT_WIRE_STATUS_COLD_WATER_TREASURE_POWER, _wire_status_cold_water_treasure_power, 0);
  }
  uint8_t wire_status_exhaust_brake() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_EXHAUST_BRAKE, 0);
  }
  bool mutate_wire_status_exhaust_brake(uint8_t _wire_status_exhaust_brake) {
    return SetField<uint8_t>(VT_WIRE_STATUS_EXHAUST_BRAKE, _wire_status_exhaust_brake, 0);
  }
  uint8_t wire_status_error_level() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_ERROR_LEVEL, 0);
  }
  bool mutate_wire_status_error_level(uint8_t _wire_status_error_level) {
    return SetField<uint8_t>(VT_WIRE_STATUS_ERROR_LEVEL, _wire_status_error_level, 0);
  }
  uint8_t wire_status_urgent_brake() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_URGENT_BRAKE, 0);
  }
  bool mutate_wire_status_urgent_brake(uint8_t _wire_status_urgent_brake) {
    return SetField<uint8_t>(VT_WIRE_STATUS_URGENT_BRAKE, _wire_status_urgent_brake, 0);
  }
  uint8_t wire_status_engine_activation() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_ENGINE_ACTIVATION, 0);
  }
  bool mutate_wire_status_engine_activation(uint8_t _wire_status_engine_activation) {
    return SetField<uint8_t>(VT_WIRE_STATUS_ENGINE_ACTIVATION, _wire_status_engine_activation, 0);
  }
  uint8_t wire_status_hand_brake_activation() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_HAND_BRAKE_ACTIVATION, 0);
  }
  bool mutate_wire_status_hand_brake_activation(uint8_t _wire_status_hand_brake_activation) {
    return SetField<uint8_t>(VT_WIRE_STATUS_HAND_BRAKE_ACTIVATION, _wire_status_hand_brake_activation, 0);
  }
  uint8_t wire_status_ebs_activation() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_EBS_ACTIVATION, 0);
  }
  bool mutate_wire_status_ebs_activation(uint8_t _wire_status_ebs_activation) {
    return SetField<uint8_t>(VT_WIRE_STATUS_EBS_ACTIVATION, _wire_status_ebs_activation, 0);
  }
  uint8_t wire_status_retarder_activation() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_RETARDER_ACTIVATION, 0);
  }
  bool mutate_wire_status_retarder_activation(uint8_t _wire_status_retarder_activation) {
    return SetField<uint8_t>(VT_WIRE_STATUS_RETARDER_ACTIVATION, _wire_status_retarder_activation, 0);
  }
  uint8_t wire_status_transmission_activation() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_TRANSMISSION_ACTIVATION, 0);
  }
  bool mutate_wire_status_transmission_activation(uint8_t _wire_status_transmission_activation) {
    return SetField<uint8_t>(VT_WIRE_STATUS_TRANSMISSION_ACTIVATION, _wire_status_transmission_activation, 0);
  }
  uint8_t wire_status_eps_activation() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_EPS_ACTIVATION, 0);
  }
  bool mutate_wire_status_eps_activation(uint8_t _wire_status_eps_activation) {
    return SetField<uint8_t>(VT_WIRE_STATUS_EPS_ACTIVATION, _wire_status_eps_activation, 0);
  }
  uint8_t wire_status_lift_activation() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_LIFT_ACTIVATION, 0);
  }
  bool mutate_wire_status_lift_activation(uint8_t _wire_status_lift_activation) {
    return SetField<uint8_t>(VT_WIRE_STATUS_LIFT_ACTIVATION, _wire_status_lift_activation, 0);
  }
  uint8_t wire_status_pressure_sensor1() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_PRESSURE_SENSOR1, 0);
  }
  bool mutate_wire_status_pressure_sensor1(uint8_t _wire_status_pressure_sensor1) {
    return SetField<uint8_t>(VT_WIRE_STATUS_PRESSURE_SENSOR1, _wire_status_pressure_sensor1, 0);
  }
  uint8_t wire_status_pressure_sensor2() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_PRESSURE_SENSOR2, 0);
  }
  bool mutate_wire_status_pressure_sensor2(uint8_t _wire_status_pressure_sensor2) {
    return SetField<uint8_t>(VT_WIRE_STATUS_PRESSURE_SENSOR2, _wire_status_pressure_sensor2, 0);
  }
  uint8_t wire_status_oil_sensor() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_OIL_SENSOR, 0);
  }
  bool mutate_wire_status_oil_sensor(uint8_t _wire_status_oil_sensor) {
    return SetField<uint8_t>(VT_WIRE_STATUS_OIL_SENSOR, _wire_status_oil_sensor, 0);
  }
  int32_t wire_status_zhongchuang_motor_speed() const {
    return GetField<int32_t>(VT_WIRE_STATUS_ZHONGCHUANG_MOTOR_SPEED, 0);
  }
  bool mutate_wire_status_zhongchuang_motor_speed(int32_t _wire_status_zhongchuang_motor_speed) {
    return SetField<int32_t>(VT_WIRE_STATUS_ZHONGCHUANG_MOTOR_SPEED, _wire_status_zhongchuang_motor_speed, 0);
  }
  uint8_t wire_status_steerwheelmotor_status() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_STEERWHEELMOTOR_STATUS, 0);
  }
  bool mutate_wire_status_steerwheelmotor_status(uint8_t _wire_status_steerwheelmotor_status) {
    return SetField<uint8_t>(VT_WIRE_STATUS_STEERWHEELMOTOR_STATUS, _wire_status_steerwheelmotor_status, 0);
  }
  float wire_status_truck_horizontal_angle() const {
    return GetField<float>(VT_WIRE_STATUS_TRUCK_HORIZONTAL_ANGLE, 0.0f);
  }
  bool mutate_wire_status_truck_horizontal_angle(float _wire_status_truck_horizontal_angle) {
    return SetField<float>(VT_WIRE_STATUS_TRUCK_HORIZONTAL_ANGLE, _wire_status_truck_horizontal_angle, 0.0f);
  }
  float wire_status_truck_longitudinal_angle() const {
    return GetField<float>(VT_WIRE_STATUS_TRUCK_LONGITUDINAL_ANGLE, 0.0f);
  }
  bool mutate_wire_status_truck_longitudinal_angle(float _wire_status_truck_longitudinal_angle) {
    return SetField<float>(VT_WIRE_STATUS_TRUCK_LONGITUDINAL_ANGLE, _wire_status_truck_longitudinal_angle, 0.0f);
  }
  float wire_status_retarder_torque_percent() const {
    return GetField<float>(VT_WIRE_STATUS_RETARDER_TORQUE_PERCENT, 0.0f);
  }
  bool mutate_wire_status_retarder_torque_percent(float _wire_status_retarder_torque_percent) {
    return SetField<float>(VT_WIRE_STATUS_RETARDER_TORQUE_PERCENT, _wire_status_retarder_torque_percent, 0.0f);
  }
  uint8_t wire_status_vehicle_ctrl_mode() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_VEHICLE_CTRL_MODE, 0);
  }
  bool mutate_wire_status_vehicle_ctrl_mode(uint8_t _wire_status_vehicle_ctrl_mode) {
    return SetField<uint8_t>(VT_WIRE_STATUS_VEHICLE_CTRL_MODE, _wire_status_vehicle_ctrl_mode, 0);
  }
  uint64_t Wirectl_nTime() const {
    return GetField<uint64_t>(VT_WIRECTL_NTIME, 0);
  }
  bool mutate_Wirectl_nTime(uint64_t _Wirectl_nTime) {
    return SetField<uint64_t>(VT_WIRECTL_NTIME, _Wirectl_nTime, 0);
  }
  uint8_t wire_status_steer_outrange_status() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_STEER_OUTRANGE_STATUS, 0);
  }
  bool mutate_wire_status_steer_outrange_status(uint8_t _wire_status_steer_outrange_status) {
    return SetField<uint8_t>(VT_WIRE_STATUS_STEER_OUTRANGE_STATUS, _wire_status_steer_outrange_status, 0);
  }
  uint8_t wire_status_steer_setzero_status() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_STEER_SETZERO_STATUS, 0);
  }
  bool mutate_wire_status_steer_setzero_status(uint8_t _wire_status_steer_setzero_status) {
    return SetField<uint8_t>(VT_WIRE_STATUS_STEER_SETZERO_STATUS, _wire_status_steer_setzero_status, 0);
  }
  uint8_t wire_status_steer_sequence_number() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_STEER_SEQUENCE_NUMBER, 0);
  }
  bool mutate_wire_status_steer_sequence_number(uint8_t _wire_status_steer_sequence_number) {
    return SetField<uint8_t>(VT_WIRE_STATUS_STEER_SEQUENCE_NUMBER, _wire_status_steer_sequence_number, 0);
  }
  uint8_t wire_status_steering_valve() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_STEERING_VALVE, 0);
  }
  bool mutate_wire_status_steering_valve(uint8_t _wire_status_steering_valve) {
    return SetField<uint8_t>(VT_WIRE_STATUS_STEERING_VALVE, _wire_status_steering_valve, 0);
  }
  uint8_t wire_status_gear_shift_lamp() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_GEAR_SHIFT_LAMP, 0);
  }
  bool mutate_wire_status_gear_shift_lamp(uint8_t _wire_status_gear_shift_lamp) {
    return SetField<uint8_t>(VT_WIRE_STATUS_GEAR_SHIFT_LAMP, _wire_status_gear_shift_lamp, 0);
  }
  uint8_t wire_status_hydraulic_oil_temp_high() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_HYDRAULIC_OIL_TEMP_HIGH, 0);
  }
  bool mutate_wire_status_hydraulic_oil_temp_high(uint8_t _wire_status_hydraulic_oil_temp_high) {
    return SetField<uint8_t>(VT_WIRE_STATUS_HYDRAULIC_OIL_TEMP_HIGH, _wire_status_hydraulic_oil_temp_high, 0);
  }
  uint8_t wire_status_engine_coolant_level_low() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_ENGINE_COOLANT_LEVEL_LOW, 0);
  }
  bool mutate_wire_status_engine_coolant_level_low(uint8_t _wire_status_engine_coolant_level_low) {
    return SetField<uint8_t>(VT_WIRE_STATUS_ENGINE_COOLANT_LEVEL_LOW, _wire_status_engine_coolant_level_low, 0);
  }
  uint8_t wire_status_engine_coolant_temperature_high() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_ENGINE_COOLANT_TEMPERATURE_HIGH, 0);
  }
  bool mutate_wire_status_engine_coolant_temperature_high(uint8_t _wire_status_engine_coolant_temperature_high) {
    return SetField<uint8_t>(VT_WIRE_STATUS_ENGINE_COOLANT_TEMPERATURE_HIGH, _wire_status_engine_coolant_temperature_high, 0);
  }
  uint8_t wire_status_eng_stop_fault_lamp() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_ENG_STOP_FAULT_LAMP, 0);
  }
  bool mutate_wire_status_eng_stop_fault_lamp(uint8_t _wire_status_eng_stop_fault_lamp) {
    return SetField<uint8_t>(VT_WIRE_STATUS_ENG_STOP_FAULT_LAMP, _wire_status_eng_stop_fault_lamp, 0);
  }
  uint8_t wire_status_eng_warning_fault_lamp() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_ENG_WARNING_FAULT_LAMP, 0);
  }
  bool mutate_wire_status_eng_warning_fault_lamp(uint8_t _wire_status_eng_warning_fault_lamp) {
    return SetField<uint8_t>(VT_WIRE_STATUS_ENG_WARNING_FAULT_LAMP, _wire_status_eng_warning_fault_lamp, 0);
  }
  uint8_t wire_status_drive_system_fault_lamp() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_DRIVE_SYSTEM_FAULT_LAMP, 0);
  }
  bool mutate_wire_status_drive_system_fault_lamp(uint8_t _wire_status_drive_system_fault_lamp) {
    return SetField<uint8_t>(VT_WIRE_STATUS_DRIVE_SYSTEM_FAULT_LAMP, _wire_status_drive_system_fault_lamp, 0);
  }
  uint8_t wire_status_brake_press_low() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_BRAKE_PRESS_LOW, 0);
  }
  bool mutate_wire_status_brake_press_low(uint8_t _wire_status_brake_press_low) {
    return SetField<uint8_t>(VT_WIRE_STATUS_BRAKE_PRESS_LOW, _wire_status_brake_press_low, 0);
  }
  uint8_t wire_status_streer_press_low() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_STREER_PRESS_LOW, 0);
  }
  bool mutate_wire_status_streer_press_low(uint8_t _wire_status_streer_press_low) {
    return SetField<uint8_t>(VT_WIRE_STATUS_STREER_PRESS_LOW, _wire_status_streer_press_low, 0);
  }
  uint8_t wire_status_eng_oil_pressure_low() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_ENG_OIL_PRESSURE_LOW, 0);
  }
  bool mutate_wire_status_eng_oil_pressure_low(uint8_t _wire_status_eng_oil_pressure_low) {
    return SetField<uint8_t>(VT_WIRE_STATUS_ENG_OIL_PRESSURE_LOW, _wire_status_eng_oil_pressure_low, 0);
  }
  uint8_t wire_status_steering_valve_fault() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_STEERING_VALVE_FAULT, 0);
  }
  bool mutate_wire_status_steering_valve_fault(uint8_t _wire_status_steering_valve_fault) {
    return SetField<uint8_t>(VT_WIRE_STATUS_STEERING_VALVE_FAULT, _wire_status_steering_valve_fault, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_INCLINATOR_STATUS) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_RULER_STATUS) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_ROBOT_CONTROL_STATUS) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_THROTTLE_FAULT_STATUS) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_ELECTRIC_BRAKE_FAULT_STATUS) &&
           VerifyField<uint32_t>(verifier, VT_WIRE_STATUS_MECHANICLE_BRAKE_MOTOR_ERROR_NUM) &&
           VerifyField<uint32_t>(verifier, VT_WIRE_STATUS_STEER_MOTOR_ERROR_NUM) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_ENGINE_FALUT) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_TRANSMISSION_FALUT) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_EBS_FALUT) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_EPS_FALUT) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_AIR_FILTER_ALARM) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_STEER_OIL_FILTER_ALARM) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_LEFT_LIGHT) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_RIGHT_LIGHT) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_LOW_BEAM) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_HIGH_BEAM) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_ROTATE_ALARM_LIGHT) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_AIR_HORNS) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_FRONT_FOG_LAMP) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_FRONT_WORK_LAMP) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_SIDE_LAMP) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_POSITOIN_LAMP) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_WIPER_MOTOR_POWER) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_EBS_POWER) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_PRESSURE_SENSOR_POWER) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_RISE_SOLENOID_SAVLE_UP) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_RISE_SOLENOID_SAVLE_DOWN) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_MANUAL_SOLENOID_SAVLE) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_REAR_LEFT_LIGHT) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_REAR_RIGHT_LIGHT) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_REAR_POS_LIGHT) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_BRAKE_LIGHT) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_REVERSE_LIGHT_HORNS) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_REAR_WORK) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_HEAT_SINK1) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_HEAT_SINK2) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_DIFF_SOLENOID_SAVLE) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_DRYER_POWER) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_INCLINATOR_POWER) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_COLD_WATER_TREASURE_POWER) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_EXHAUST_BRAKE) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_ERROR_LEVEL) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_URGENT_BRAKE) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_ENGINE_ACTIVATION) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_HAND_BRAKE_ACTIVATION) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_EBS_ACTIVATION) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_RETARDER_ACTIVATION) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_TRANSMISSION_ACTIVATION) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_EPS_ACTIVATION) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_LIFT_ACTIVATION) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_PRESSURE_SENSOR1) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_PRESSURE_SENSOR2) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_OIL_SENSOR) &&
           VerifyField<int32_t>(verifier, VT_WIRE_STATUS_ZHONGCHUANG_MOTOR_SPEED) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_STEERWHEELMOTOR_STATUS) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_TRUCK_HORIZONTAL_ANGLE) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_TRUCK_LONGITUDINAL_ANGLE) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_RETARDER_TORQUE_PERCENT) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_VEHICLE_CTRL_MODE) &&
           VerifyField<uint64_t>(verifier, VT_WIRECTL_NTIME) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_STEER_OUTRANGE_STATUS) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_STEER_SETZERO_STATUS) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_STEER_SEQUENCE_NUMBER) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_STEERING_VALVE) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_GEAR_SHIFT_LAMP) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_HYDRAULIC_OIL_TEMP_HIGH) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_ENGINE_COOLANT_LEVEL_LOW) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_ENGINE_COOLANT_TEMPERATURE_HIGH) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_ENG_STOP_FAULT_LAMP) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_ENG_WARNING_FAULT_LAMP) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_DRIVE_SYSTEM_FAULT_LAMP) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_BRAKE_PRESS_LOW) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_STREER_PRESS_LOW) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_ENG_OIL_PRESSURE_LOW) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_STEERING_VALVE_FAULT) &&
           verifier.EndTable();
  }
  WireControlVehicleFaultT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(WireControlVehicleFaultT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<WireControlVehicleFault> Pack(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVehicleFaultT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct WireControlVehicleFaultBuilder {
  typedef WireControlVehicleFault Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_wire_status_inclinator_status(uint8_t wire_status_inclinator_status) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_INCLINATOR_STATUS, wire_status_inclinator_status, 0);
  }
  void add_wire_status_ruler_status(uint8_t wire_status_ruler_status) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_RULER_STATUS, wire_status_ruler_status, 0);
  }
  void add_wire_status_robot_control_status(uint8_t wire_status_robot_control_status) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_ROBOT_CONTROL_STATUS, wire_status_robot_control_status, 0);
  }
  void add_wire_status_throttle_fault_status(uint8_t wire_status_throttle_fault_status) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_THROTTLE_FAULT_STATUS, wire_status_throttle_fault_status, 0);
  }
  void add_wire_status_electric_brake_fault_status(uint8_t wire_status_electric_brake_fault_status) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_ELECTRIC_BRAKE_FAULT_STATUS, wire_status_electric_brake_fault_status, 0);
  }
  void add_wire_status_mechanicle_brake_motor_error_num(uint32_t wire_status_mechanicle_brake_motor_error_num) {
    fbb_.AddElement<uint32_t>(WireControlVehicleFault::VT_WIRE_STATUS_MECHANICLE_BRAKE_MOTOR_ERROR_NUM, wire_status_mechanicle_brake_motor_error_num, 0);
  }
  void add_wire_status_steer_motor_error_num(uint32_t wire_status_steer_motor_error_num) {
    fbb_.AddElement<uint32_t>(WireControlVehicleFault::VT_WIRE_STATUS_STEER_MOTOR_ERROR_NUM, wire_status_steer_motor_error_num, 0);
  }
  void add_wire_status_engine_falut(uint8_t wire_status_engine_falut) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_ENGINE_FALUT, wire_status_engine_falut, 0);
  }
  void add_wire_status_transmission_falut(uint8_t wire_status_transmission_falut) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_TRANSMISSION_FALUT, wire_status_transmission_falut, 0);
  }
  void add_wire_status_ebs_falut(uint8_t wire_status_ebs_falut) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_EBS_FALUT, wire_status_ebs_falut, 0);
  }
  void add_wire_status_eps_falut(uint8_t wire_status_eps_falut) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_EPS_FALUT, wire_status_eps_falut, 0);
  }
  void add_wire_status_air_filter_alarm(uint8_t wire_status_air_filter_alarm) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_AIR_FILTER_ALARM, wire_status_air_filter_alarm, 0);
  }
  void add_wire_status_steer_oil_filter_alarm(uint8_t wire_status_steer_oil_filter_alarm) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_STEER_OIL_FILTER_ALARM, wire_status_steer_oil_filter_alarm, 0);
  }
  void add_wire_status_left_light(uint8_t wire_status_left_light) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_LEFT_LIGHT, wire_status_left_light, 0);
  }
  void add_wire_status_right_light(uint8_t wire_status_right_light) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_RIGHT_LIGHT, wire_status_right_light, 0);
  }
  void add_wire_status_low_beam(uint8_t wire_status_low_beam) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_LOW_BEAM, wire_status_low_beam, 0);
  }
  void add_wire_status_high_beam(uint8_t wire_status_high_beam) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_HIGH_BEAM, wire_status_high_beam, 0);
  }
  void add_wire_status_rotate_alarm_light(uint8_t wire_status_rotate_alarm_light) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_ROTATE_ALARM_LIGHT, wire_status_rotate_alarm_light, 0);
  }
  void add_wire_status_air_horns(uint8_t wire_status_air_horns) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_AIR_HORNS, wire_status_air_horns, 0);
  }
  void add_wire_status_front_fog_lamp(uint8_t wire_status_front_fog_lamp) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_FRONT_FOG_LAMP, wire_status_front_fog_lamp, 0);
  }
  void add_wire_status_front_work_lamp(uint8_t wire_status_front_work_lamp) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_FRONT_WORK_LAMP, wire_status_front_work_lamp, 0);
  }
  void add_wire_status_side_lamp(uint8_t wire_status_side_lamp) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_SIDE_LAMP, wire_status_side_lamp, 0);
  }
  void add_wire_status_positoin_lamp(uint8_t wire_status_positoin_lamp) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_POSITOIN_LAMP, wire_status_positoin_lamp, 0);
  }
  void add_wire_status_wiper_motor_power(uint8_t wire_status_wiper_motor_power) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_WIPER_MOTOR_POWER, wire_status_wiper_motor_power, 0);
  }
  void add_wire_status_ebs_power(uint8_t wire_status_ebs_power) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_EBS_POWER, wire_status_ebs_power, 0);
  }
  void add_wire_status_pressure_sensor_power(uint8_t wire_status_pressure_sensor_power) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_PRESSURE_SENSOR_POWER, wire_status_pressure_sensor_power, 0);
  }
  void add_wire_status_rise_solenoid_savle_up(uint8_t wire_status_rise_solenoid_savle_up) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_RISE_SOLENOID_SAVLE_UP, wire_status_rise_solenoid_savle_up, 0);
  }
  void add_wire_status_rise_solenoid_savle_down(uint8_t wire_status_rise_solenoid_savle_down) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_RISE_SOLENOID_SAVLE_DOWN, wire_status_rise_solenoid_savle_down, 0);
  }
  void add_wire_status_manual_solenoid_savle(uint8_t wire_status_manual_solenoid_savle) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_MANUAL_SOLENOID_SAVLE, wire_status_manual_solenoid_savle, 0);
  }
  void add_wire_status_rear_left_light(uint8_t wire_status_rear_left_light) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_REAR_LEFT_LIGHT, wire_status_rear_left_light, 0);
  }
  void add_wire_status_rear_right_light(uint8_t wire_status_rear_right_light) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_REAR_RIGHT_LIGHT, wire_status_rear_right_light, 0);
  }
  void add_wire_status_rear_pos_light(uint8_t wire_status_rear_pos_light) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_REAR_POS_LIGHT, wire_status_rear_pos_light, 0);
  }
  void add_wire_status_brake_light(uint8_t wire_status_brake_light) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_BRAKE_LIGHT, wire_status_brake_light, 0);
  }
  void add_wire_status_reverse_light_horns(uint8_t wire_status_reverse_light_horns) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_REVERSE_LIGHT_HORNS, wire_status_reverse_light_horns, 0);
  }
  void add_wire_status_rear_work(uint8_t wire_status_rear_work) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_REAR_WORK, wire_status_rear_work, 0);
  }
  void add_wire_status_heat_sink1(uint8_t wire_status_heat_sink1) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_HEAT_SINK1, wire_status_heat_sink1, 0);
  }
  void add_wire_status_heat_sink2(uint8_t wire_status_heat_sink2) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_HEAT_SINK2, wire_status_heat_sink2, 0);
  }
  void add_wire_status_diff_solenoid_savle(uint8_t wire_status_diff_solenoid_savle) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_DIFF_SOLENOID_SAVLE, wire_status_diff_solenoid_savle, 0);
  }
  void add_wire_status_dryer_power(uint8_t wire_status_dryer_power) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_DRYER_POWER, wire_status_dryer_power, 0);
  }
  void add_wire_status_inclinator_power(uint8_t wire_status_inclinator_power) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_INCLINATOR_POWER, wire_status_inclinator_power, 0);
  }
  void add_wire_status_cold_water_treasure_power(uint8_t wire_status_cold_water_treasure_power) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_COLD_WATER_TREASURE_POWER, wire_status_cold_water_treasure_power, 0);
  }
  void add_wire_status_exhaust_brake(uint8_t wire_status_exhaust_brake) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_EXHAUST_BRAKE, wire_status_exhaust_brake, 0);
  }
  void add_wire_status_error_level(uint8_t wire_status_error_level) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_ERROR_LEVEL, wire_status_error_level, 0);
  }
  void add_wire_status_urgent_brake(uint8_t wire_status_urgent_brake) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_URGENT_BRAKE, wire_status_urgent_brake, 0);
  }
  void add_wire_status_engine_activation(uint8_t wire_status_engine_activation) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_ENGINE_ACTIVATION, wire_status_engine_activation, 0);
  }
  void add_wire_status_hand_brake_activation(uint8_t wire_status_hand_brake_activation) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_HAND_BRAKE_ACTIVATION, wire_status_hand_brake_activation, 0);
  }
  void add_wire_status_ebs_activation(uint8_t wire_status_ebs_activation) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_EBS_ACTIVATION, wire_status_ebs_activation, 0);
  }
  void add_wire_status_retarder_activation(uint8_t wire_status_retarder_activation) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_RETARDER_ACTIVATION, wire_status_retarder_activation, 0);
  }
  void add_wire_status_transmission_activation(uint8_t wire_status_transmission_activation) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_TRANSMISSION_ACTIVATION, wire_status_transmission_activation, 0);
  }
  void add_wire_status_eps_activation(uint8_t wire_status_eps_activation) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_EPS_ACTIVATION, wire_status_eps_activation, 0);
  }
  void add_wire_status_lift_activation(uint8_t wire_status_lift_activation) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_LIFT_ACTIVATION, wire_status_lift_activation, 0);
  }
  void add_wire_status_pressure_sensor1(uint8_t wire_status_pressure_sensor1) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_PRESSURE_SENSOR1, wire_status_pressure_sensor1, 0);
  }
  void add_wire_status_pressure_sensor2(uint8_t wire_status_pressure_sensor2) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_PRESSURE_SENSOR2, wire_status_pressure_sensor2, 0);
  }
  void add_wire_status_oil_sensor(uint8_t wire_status_oil_sensor) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_OIL_SENSOR, wire_status_oil_sensor, 0);
  }
  void add_wire_status_zhongchuang_motor_speed(int32_t wire_status_zhongchuang_motor_speed) {
    fbb_.AddElement<int32_t>(WireControlVehicleFault::VT_WIRE_STATUS_ZHONGCHUANG_MOTOR_SPEED, wire_status_zhongchuang_motor_speed, 0);
  }
  void add_wire_status_steerwheelmotor_status(uint8_t wire_status_steerwheelmotor_status) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_STEERWHEELMOTOR_STATUS, wire_status_steerwheelmotor_status, 0);
  }
  void add_wire_status_truck_horizontal_angle(float wire_status_truck_horizontal_angle) {
    fbb_.AddElement<float>(WireControlVehicleFault::VT_WIRE_STATUS_TRUCK_HORIZONTAL_ANGLE, wire_status_truck_horizontal_angle, 0.0f);
  }
  void add_wire_status_truck_longitudinal_angle(float wire_status_truck_longitudinal_angle) {
    fbb_.AddElement<float>(WireControlVehicleFault::VT_WIRE_STATUS_TRUCK_LONGITUDINAL_ANGLE, wire_status_truck_longitudinal_angle, 0.0f);
  }
  void add_wire_status_retarder_torque_percent(float wire_status_retarder_torque_percent) {
    fbb_.AddElement<float>(WireControlVehicleFault::VT_WIRE_STATUS_RETARDER_TORQUE_PERCENT, wire_status_retarder_torque_percent, 0.0f);
  }
  void add_wire_status_vehicle_ctrl_mode(uint8_t wire_status_vehicle_ctrl_mode) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_VEHICLE_CTRL_MODE, wire_status_vehicle_ctrl_mode, 0);
  }
  void add_Wirectl_nTime(uint64_t Wirectl_nTime) {
    fbb_.AddElement<uint64_t>(WireControlVehicleFault::VT_WIRECTL_NTIME, Wirectl_nTime, 0);
  }
  void add_wire_status_steer_outrange_status(uint8_t wire_status_steer_outrange_status) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_STEER_OUTRANGE_STATUS, wire_status_steer_outrange_status, 0);
  }
  void add_wire_status_steer_setzero_status(uint8_t wire_status_steer_setzero_status) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_STEER_SETZERO_STATUS, wire_status_steer_setzero_status, 0);
  }
  void add_wire_status_steer_sequence_number(uint8_t wire_status_steer_sequence_number) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_STEER_SEQUENCE_NUMBER, wire_status_steer_sequence_number, 0);
  }
  void add_wire_status_steering_valve(uint8_t wire_status_steering_valve) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_STEERING_VALVE, wire_status_steering_valve, 0);
  }
  void add_wire_status_gear_shift_lamp(uint8_t wire_status_gear_shift_lamp) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_GEAR_SHIFT_LAMP, wire_status_gear_shift_lamp, 0);
  }
  void add_wire_status_hydraulic_oil_temp_high(uint8_t wire_status_hydraulic_oil_temp_high) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_HYDRAULIC_OIL_TEMP_HIGH, wire_status_hydraulic_oil_temp_high, 0);
  }
  void add_wire_status_engine_coolant_level_low(uint8_t wire_status_engine_coolant_level_low) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_ENGINE_COOLANT_LEVEL_LOW, wire_status_engine_coolant_level_low, 0);
  }
  void add_wire_status_engine_coolant_temperature_high(uint8_t wire_status_engine_coolant_temperature_high) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_ENGINE_COOLANT_TEMPERATURE_HIGH, wire_status_engine_coolant_temperature_high, 0);
  }
  void add_wire_status_eng_stop_fault_lamp(uint8_t wire_status_eng_stop_fault_lamp) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_ENG_STOP_FAULT_LAMP, wire_status_eng_stop_fault_lamp, 0);
  }
  void add_wire_status_eng_warning_fault_lamp(uint8_t wire_status_eng_warning_fault_lamp) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_ENG_WARNING_FAULT_LAMP, wire_status_eng_warning_fault_lamp, 0);
  }
  void add_wire_status_drive_system_fault_lamp(uint8_t wire_status_drive_system_fault_lamp) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_DRIVE_SYSTEM_FAULT_LAMP, wire_status_drive_system_fault_lamp, 0);
  }
  void add_wire_status_brake_press_low(uint8_t wire_status_brake_press_low) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_BRAKE_PRESS_LOW, wire_status_brake_press_low, 0);
  }
  void add_wire_status_streer_press_low(uint8_t wire_status_streer_press_low) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_STREER_PRESS_LOW, wire_status_streer_press_low, 0);
  }
  void add_wire_status_eng_oil_pressure_low(uint8_t wire_status_eng_oil_pressure_low) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_ENG_OIL_PRESSURE_LOW, wire_status_eng_oil_pressure_low, 0);
  }
  void add_wire_status_steering_valve_fault(uint8_t wire_status_steering_valve_fault) {
    fbb_.AddElement<uint8_t>(WireControlVehicleFault::VT_WIRE_STATUS_STEERING_VALVE_FAULT, wire_status_steering_valve_fault, 0);
  }
  explicit WireControlVehicleFaultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WireControlVehicleFault> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WireControlVehicleFault>(end);
    return o;
  }
};

inline flatbuffers::Offset<WireControlVehicleFault> CreateWireControlVehicleFault(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t wire_status_inclinator_status = 0,
    uint8_t wire_status_ruler_status = 0,
    uint8_t wire_status_robot_control_status = 0,
    uint8_t wire_status_throttle_fault_status = 0,
    uint8_t wire_status_electric_brake_fault_status = 0,
    uint32_t wire_status_mechanicle_brake_motor_error_num = 0,
    uint32_t wire_status_steer_motor_error_num = 0,
    uint8_t wire_status_engine_falut = 0,
    uint8_t wire_status_transmission_falut = 0,
    uint8_t wire_status_ebs_falut = 0,
    uint8_t wire_status_eps_falut = 0,
    uint8_t wire_status_air_filter_alarm = 0,
    uint8_t wire_status_steer_oil_filter_alarm = 0,
    uint8_t wire_status_left_light = 0,
    uint8_t wire_status_right_light = 0,
    uint8_t wire_status_low_beam = 0,
    uint8_t wire_status_high_beam = 0,
    uint8_t wire_status_rotate_alarm_light = 0,
    uint8_t wire_status_air_horns = 0,
    uint8_t wire_status_front_fog_lamp = 0,
    uint8_t wire_status_front_work_lamp = 0,
    uint8_t wire_status_side_lamp = 0,
    uint8_t wire_status_positoin_lamp = 0,
    uint8_t wire_status_wiper_motor_power = 0,
    uint8_t wire_status_ebs_power = 0,
    uint8_t wire_status_pressure_sensor_power = 0,
    uint8_t wire_status_rise_solenoid_savle_up = 0,
    uint8_t wire_status_rise_solenoid_savle_down = 0,
    uint8_t wire_status_manual_solenoid_savle = 0,
    uint8_t wire_status_rear_left_light = 0,
    uint8_t wire_status_rear_right_light = 0,
    uint8_t wire_status_rear_pos_light = 0,
    uint8_t wire_status_brake_light = 0,
    uint8_t wire_status_reverse_light_horns = 0,
    uint8_t wire_status_rear_work = 0,
    uint8_t wire_status_heat_sink1 = 0,
    uint8_t wire_status_heat_sink2 = 0,
    uint8_t wire_status_diff_solenoid_savle = 0,
    uint8_t wire_status_dryer_power = 0,
    uint8_t wire_status_inclinator_power = 0,
    uint8_t wire_status_cold_water_treasure_power = 0,
    uint8_t wire_status_exhaust_brake = 0,
    uint8_t wire_status_error_level = 0,
    uint8_t wire_status_urgent_brake = 0,
    uint8_t wire_status_engine_activation = 0,
    uint8_t wire_status_hand_brake_activation = 0,
    uint8_t wire_status_ebs_activation = 0,
    uint8_t wire_status_retarder_activation = 0,
    uint8_t wire_status_transmission_activation = 0,
    uint8_t wire_status_eps_activation = 0,
    uint8_t wire_status_lift_activation = 0,
    uint8_t wire_status_pressure_sensor1 = 0,
    uint8_t wire_status_pressure_sensor2 = 0,
    uint8_t wire_status_oil_sensor = 0,
    int32_t wire_status_zhongchuang_motor_speed = 0,
    uint8_t wire_status_steerwheelmotor_status = 0,
    float wire_status_truck_horizontal_angle = 0.0f,
    float wire_status_truck_longitudinal_angle = 0.0f,
    float wire_status_retarder_torque_percent = 0.0f,
    uint8_t wire_status_vehicle_ctrl_mode = 0,
    uint64_t Wirectl_nTime = 0,
    uint8_t wire_status_steer_outrange_status = 0,
    uint8_t wire_status_steer_setzero_status = 0,
    uint8_t wire_status_steer_sequence_number = 0,
    uint8_t wire_status_steering_valve = 0,
    uint8_t wire_status_gear_shift_lamp = 0,
    uint8_t wire_status_hydraulic_oil_temp_high = 0,
    uint8_t wire_status_engine_coolant_level_low = 0,
    uint8_t wire_status_engine_coolant_temperature_high = 0,
    uint8_t wire_status_eng_stop_fault_lamp = 0,
    uint8_t wire_status_eng_warning_fault_lamp = 0,
    uint8_t wire_status_drive_system_fault_lamp = 0,
    uint8_t wire_status_brake_press_low = 0,
    uint8_t wire_status_streer_press_low = 0,
    uint8_t wire_status_eng_oil_pressure_low = 0,
    uint8_t wire_status_steering_valve_fault = 0) {
  WireControlVehicleFaultBuilder builder_(_fbb);
  builder_.add_Wirectl_nTime(Wirectl_nTime);
  builder_.add_wire_status_retarder_torque_percent(wire_status_retarder_torque_percent);
  builder_.add_wire_status_truck_longitudinal_angle(wire_status_truck_longitudinal_angle);
  builder_.add_wire_status_truck_horizontal_angle(wire_status_truck_horizontal_angle);
  builder_.add_wire_status_zhongchuang_motor_speed(wire_status_zhongchuang_motor_speed);
  builder_.add_wire_status_steer_motor_error_num(wire_status_steer_motor_error_num);
  builder_.add_wire_status_mechanicle_brake_motor_error_num(wire_status_mechanicle_brake_motor_error_num);
  builder_.add_wire_status_steering_valve_fault(wire_status_steering_valve_fault);
  builder_.add_wire_status_eng_oil_pressure_low(wire_status_eng_oil_pressure_low);
  builder_.add_wire_status_streer_press_low(wire_status_streer_press_low);
  builder_.add_wire_status_brake_press_low(wire_status_brake_press_low);
  builder_.add_wire_status_drive_system_fault_lamp(wire_status_drive_system_fault_lamp);
  builder_.add_wire_status_eng_warning_fault_lamp(wire_status_eng_warning_fault_lamp);
  builder_.add_wire_status_eng_stop_fault_lamp(wire_status_eng_stop_fault_lamp);
  builder_.add_wire_status_engine_coolant_temperature_high(wire_status_engine_coolant_temperature_high);
  builder_.add_wire_status_engine_coolant_level_low(wire_status_engine_coolant_level_low);
  builder_.add_wire_status_hydraulic_oil_temp_high(wire_status_hydraulic_oil_temp_high);
  builder_.add_wire_status_gear_shift_lamp(wire_status_gear_shift_lamp);
  builder_.add_wire_status_steering_valve(wire_status_steering_valve);
  builder_.add_wire_status_steer_sequence_number(wire_status_steer_sequence_number);
  builder_.add_wire_status_steer_setzero_status(wire_status_steer_setzero_status);
  builder_.add_wire_status_steer_outrange_status(wire_status_steer_outrange_status);
  builder_.add_wire_status_vehicle_ctrl_mode(wire_status_vehicle_ctrl_mode);
  builder_.add_wire_status_steerwheelmotor_status(wire_status_steerwheelmotor_status);
  builder_.add_wire_status_oil_sensor(wire_status_oil_sensor);
  builder_.add_wire_status_pressure_sensor2(wire_status_pressure_sensor2);
  builder_.add_wire_status_pressure_sensor1(wire_status_pressure_sensor1);
  builder_.add_wire_status_lift_activation(wire_status_lift_activation);
  builder_.add_wire_status_eps_activation(wire_status_eps_activation);
  builder_.add_wire_status_transmission_activation(wire_status_transmission_activation);
  builder_.add_wire_status_retarder_activation(wire_status_retarder_activation);
  builder_.add_wire_status_ebs_activation(wire_status_ebs_activation);
  builder_.add_wire_status_hand_brake_activation(wire_status_hand_brake_activation);
  builder_.add_wire_status_engine_activation(wire_status_engine_activation);
  builder_.add_wire_status_urgent_brake(wire_status_urgent_brake);
  builder_.add_wire_status_error_level(wire_status_error_level);
  builder_.add_wire_status_exhaust_brake(wire_status_exhaust_brake);
  builder_.add_wire_status_cold_water_treasure_power(wire_status_cold_water_treasure_power);
  builder_.add_wire_status_inclinator_power(wire_status_inclinator_power);
  builder_.add_wire_status_dryer_power(wire_status_dryer_power);
  builder_.add_wire_status_diff_solenoid_savle(wire_status_diff_solenoid_savle);
  builder_.add_wire_status_heat_sink2(wire_status_heat_sink2);
  builder_.add_wire_status_heat_sink1(wire_status_heat_sink1);
  builder_.add_wire_status_rear_work(wire_status_rear_work);
  builder_.add_wire_status_reverse_light_horns(wire_status_reverse_light_horns);
  builder_.add_wire_status_brake_light(wire_status_brake_light);
  builder_.add_wire_status_rear_pos_light(wire_status_rear_pos_light);
  builder_.add_wire_status_rear_right_light(wire_status_rear_right_light);
  builder_.add_wire_status_rear_left_light(wire_status_rear_left_light);
  builder_.add_wire_status_manual_solenoid_savle(wire_status_manual_solenoid_savle);
  builder_.add_wire_status_rise_solenoid_savle_down(wire_status_rise_solenoid_savle_down);
  builder_.add_wire_status_rise_solenoid_savle_up(wire_status_rise_solenoid_savle_up);
  builder_.add_wire_status_pressure_sensor_power(wire_status_pressure_sensor_power);
  builder_.add_wire_status_ebs_power(wire_status_ebs_power);
  builder_.add_wire_status_wiper_motor_power(wire_status_wiper_motor_power);
  builder_.add_wire_status_positoin_lamp(wire_status_positoin_lamp);
  builder_.add_wire_status_side_lamp(wire_status_side_lamp);
  builder_.add_wire_status_front_work_lamp(wire_status_front_work_lamp);
  builder_.add_wire_status_front_fog_lamp(wire_status_front_fog_lamp);
  builder_.add_wire_status_air_horns(wire_status_air_horns);
  builder_.add_wire_status_rotate_alarm_light(wire_status_rotate_alarm_light);
  builder_.add_wire_status_high_beam(wire_status_high_beam);
  builder_.add_wire_status_low_beam(wire_status_low_beam);
  builder_.add_wire_status_right_light(wire_status_right_light);
  builder_.add_wire_status_left_light(wire_status_left_light);
  builder_.add_wire_status_steer_oil_filter_alarm(wire_status_steer_oil_filter_alarm);
  builder_.add_wire_status_air_filter_alarm(wire_status_air_filter_alarm);
  builder_.add_wire_status_eps_falut(wire_status_eps_falut);
  builder_.add_wire_status_ebs_falut(wire_status_ebs_falut);
  builder_.add_wire_status_transmission_falut(wire_status_transmission_falut);
  builder_.add_wire_status_engine_falut(wire_status_engine_falut);
  builder_.add_wire_status_electric_brake_fault_status(wire_status_electric_brake_fault_status);
  builder_.add_wire_status_throttle_fault_status(wire_status_throttle_fault_status);
  builder_.add_wire_status_robot_control_status(wire_status_robot_control_status);
  builder_.add_wire_status_ruler_status(wire_status_ruler_status);
  builder_.add_wire_status_inclinator_status(wire_status_inclinator_status);
  return builder_.Finish();
}

flatbuffers::Offset<WireControlVehicleFault> CreateWireControlVehicleFault(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVehicleFaultT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct WireControlVehicleMovationT : public flatbuffers::NativeTable {
  typedef WireControlVehicleMovation TableType;
  float wire_status_acc_actuate_percent;
  float wire_status_acc_manual_pedal;
  float wire_status_electric_brake_actuate_percent;
  float wire_status_electric_brake_manual_pedal;
  float wire_status_mechanical_brake_actuate_percent;
  float wire_status_mechanical_brake_manual_pedal;
  float wire_status_engine_torque_percent;
  float wire_status_engine_speed;
  float wire_status_steering_wheel_angle;
  float wire_status_front_wheel_angle;
  float wire_status_vehicle_speed;
  int32_t wire_status_max_gear_shift;
  float wire_status_front_axle_aver_velocity_raw;
  float wire_status_front_axle_left_wheel_relatively_velocity_raw;
  float wire_status_front_axle_right_wheel_relatively_velocity_raw;
  float wire_status_rear_axle_left_wheel_relatively_velocity_raw;
  float wire_status_rear_axle_right_wheel_relatively_velocity_raw;
  float wire_status_front_brake_percent;
  float wire_status_rear_brake_percent;
  float wire_status_acc_cmd_feedback;
  float wire_status_brake_cmd_feedback;
  WireControlVehicleMovationT()
      : wire_status_acc_actuate_percent(0.0f),
        wire_status_acc_manual_pedal(0.0f),
        wire_status_electric_brake_actuate_percent(0.0f),
        wire_status_electric_brake_manual_pedal(0.0f),
        wire_status_mechanical_brake_actuate_percent(0.0f),
        wire_status_mechanical_brake_manual_pedal(0.0f),
        wire_status_engine_torque_percent(0.0f),
        wire_status_engine_speed(0.0f),
        wire_status_steering_wheel_angle(0.0f),
        wire_status_front_wheel_angle(0.0f),
        wire_status_vehicle_speed(0.0f),
        wire_status_max_gear_shift(0),
        wire_status_front_axle_aver_velocity_raw(0.0f),
        wire_status_front_axle_left_wheel_relatively_velocity_raw(0.0f),
        wire_status_front_axle_right_wheel_relatively_velocity_raw(0.0f),
        wire_status_rear_axle_left_wheel_relatively_velocity_raw(0.0f),
        wire_status_rear_axle_right_wheel_relatively_velocity_raw(0.0f),
        wire_status_front_brake_percent(0.0f),
        wire_status_rear_brake_percent(0.0f),
        wire_status_acc_cmd_feedback(0.0f),
        wire_status_brake_cmd_feedback(0.0f) {
  }
};

inline bool operator==(const WireControlVehicleMovationT &lhs, const WireControlVehicleMovationT &rhs) {
  return
      (lhs.wire_status_acc_actuate_percent == rhs.wire_status_acc_actuate_percent) &&
      (lhs.wire_status_acc_manual_pedal == rhs.wire_status_acc_manual_pedal) &&
      (lhs.wire_status_electric_brake_actuate_percent == rhs.wire_status_electric_brake_actuate_percent) &&
      (lhs.wire_status_electric_brake_manual_pedal == rhs.wire_status_electric_brake_manual_pedal) &&
      (lhs.wire_status_mechanical_brake_actuate_percent == rhs.wire_status_mechanical_brake_actuate_percent) &&
      (lhs.wire_status_mechanical_brake_manual_pedal == rhs.wire_status_mechanical_brake_manual_pedal) &&
      (lhs.wire_status_engine_torque_percent == rhs.wire_status_engine_torque_percent) &&
      (lhs.wire_status_engine_speed == rhs.wire_status_engine_speed) &&
      (lhs.wire_status_steering_wheel_angle == rhs.wire_status_steering_wheel_angle) &&
      (lhs.wire_status_front_wheel_angle == rhs.wire_status_front_wheel_angle) &&
      (lhs.wire_status_vehicle_speed == rhs.wire_status_vehicle_speed) &&
      (lhs.wire_status_max_gear_shift == rhs.wire_status_max_gear_shift) &&
      (lhs.wire_status_front_axle_aver_velocity_raw == rhs.wire_status_front_axle_aver_velocity_raw) &&
      (lhs.wire_status_front_axle_left_wheel_relatively_velocity_raw == rhs.wire_status_front_axle_left_wheel_relatively_velocity_raw) &&
      (lhs.wire_status_front_axle_right_wheel_relatively_velocity_raw == rhs.wire_status_front_axle_right_wheel_relatively_velocity_raw) &&
      (lhs.wire_status_rear_axle_left_wheel_relatively_velocity_raw == rhs.wire_status_rear_axle_left_wheel_relatively_velocity_raw) &&
      (lhs.wire_status_rear_axle_right_wheel_relatively_velocity_raw == rhs.wire_status_rear_axle_right_wheel_relatively_velocity_raw) &&
      (lhs.wire_status_front_brake_percent == rhs.wire_status_front_brake_percent) &&
      (lhs.wire_status_rear_brake_percent == rhs.wire_status_rear_brake_percent) &&
      (lhs.wire_status_acc_cmd_feedback == rhs.wire_status_acc_cmd_feedback) &&
      (lhs.wire_status_brake_cmd_feedback == rhs.wire_status_brake_cmd_feedback);
}

inline bool operator!=(const WireControlVehicleMovationT &lhs, const WireControlVehicleMovationT &rhs) {
    return !(lhs == rhs);
}


struct WireControlVehicleMovation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WireControlVehicleMovationT NativeTableType;
  typedef WireControlVehicleMovationBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return WireControlVehicleMovationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIRE_STATUS_ACC_ACTUATE_PERCENT = 4,
    VT_WIRE_STATUS_ACC_MANUAL_PEDAL = 6,
    VT_WIRE_STATUS_ELECTRIC_BRAKE_ACTUATE_PERCENT = 8,
    VT_WIRE_STATUS_ELECTRIC_BRAKE_MANUAL_PEDAL = 10,
    VT_WIRE_STATUS_MECHANICAL_BRAKE_ACTUATE_PERCENT = 12,
    VT_WIRE_STATUS_MECHANICAL_BRAKE_MANUAL_PEDAL = 14,
    VT_WIRE_STATUS_ENGINE_TORQUE_PERCENT = 16,
    VT_WIRE_STATUS_ENGINE_SPEED = 18,
    VT_WIRE_STATUS_STEERING_WHEEL_ANGLE = 20,
    VT_WIRE_STATUS_FRONT_WHEEL_ANGLE = 22,
    VT_WIRE_STATUS_VEHICLE_SPEED = 24,
    VT_WIRE_STATUS_MAX_GEAR_SHIFT = 26,
    VT_WIRE_STATUS_FRONT_AXLE_AVER_VELOCITY_RAW = 28,
    VT_WIRE_STATUS_FRONT_AXLE_LEFT_WHEEL_RELATIVELY_VELOCITY_RAW = 30,
    VT_WIRE_STATUS_FRONT_AXLE_RIGHT_WHEEL_RELATIVELY_VELOCITY_RAW = 32,
    VT_WIRE_STATUS_REAR_AXLE_LEFT_WHEEL_RELATIVELY_VELOCITY_RAW = 34,
    VT_WIRE_STATUS_REAR_AXLE_RIGHT_WHEEL_RELATIVELY_VELOCITY_RAW = 36,
    VT_WIRE_STATUS_FRONT_BRAKE_PERCENT = 38,
    VT_WIRE_STATUS_REAR_BRAKE_PERCENT = 40,
    VT_WIRE_STATUS_ACC_CMD_FEEDBACK = 42,
    VT_WIRE_STATUS_BRAKE_CMD_FEEDBACK = 44
  };
  float wire_status_acc_actuate_percent() const {
    return GetField<float>(VT_WIRE_STATUS_ACC_ACTUATE_PERCENT, 0.0f);
  }
  bool mutate_wire_status_acc_actuate_percent(float _wire_status_acc_actuate_percent) {
    return SetField<float>(VT_WIRE_STATUS_ACC_ACTUATE_PERCENT, _wire_status_acc_actuate_percent, 0.0f);
  }
  float wire_status_acc_manual_pedal() const {
    return GetField<float>(VT_WIRE_STATUS_ACC_MANUAL_PEDAL, 0.0f);
  }
  bool mutate_wire_status_acc_manual_pedal(float _wire_status_acc_manual_pedal) {
    return SetField<float>(VT_WIRE_STATUS_ACC_MANUAL_PEDAL, _wire_status_acc_manual_pedal, 0.0f);
  }
  float wire_status_electric_brake_actuate_percent() const {
    return GetField<float>(VT_WIRE_STATUS_ELECTRIC_BRAKE_ACTUATE_PERCENT, 0.0f);
  }
  bool mutate_wire_status_electric_brake_actuate_percent(float _wire_status_electric_brake_actuate_percent) {
    return SetField<float>(VT_WIRE_STATUS_ELECTRIC_BRAKE_ACTUATE_PERCENT, _wire_status_electric_brake_actuate_percent, 0.0f);
  }
  float wire_status_electric_brake_manual_pedal() const {
    return GetField<float>(VT_WIRE_STATUS_ELECTRIC_BRAKE_MANUAL_PEDAL, 0.0f);
  }
  bool mutate_wire_status_electric_brake_manual_pedal(float _wire_status_electric_brake_manual_pedal) {
    return SetField<float>(VT_WIRE_STATUS_ELECTRIC_BRAKE_MANUAL_PEDAL, _wire_status_electric_brake_manual_pedal, 0.0f);
  }
  float wire_status_mechanical_brake_actuate_percent() const {
    return GetField<float>(VT_WIRE_STATUS_MECHANICAL_BRAKE_ACTUATE_PERCENT, 0.0f);
  }
  bool mutate_wire_status_mechanical_brake_actuate_percent(float _wire_status_mechanical_brake_actuate_percent) {
    return SetField<float>(VT_WIRE_STATUS_MECHANICAL_BRAKE_ACTUATE_PERCENT, _wire_status_mechanical_brake_actuate_percent, 0.0f);
  }
  float wire_status_mechanical_brake_manual_pedal() const {
    return GetField<float>(VT_WIRE_STATUS_MECHANICAL_BRAKE_MANUAL_PEDAL, 0.0f);
  }
  bool mutate_wire_status_mechanical_brake_manual_pedal(float _wire_status_mechanical_brake_manual_pedal) {
    return SetField<float>(VT_WIRE_STATUS_MECHANICAL_BRAKE_MANUAL_PEDAL, _wire_status_mechanical_brake_manual_pedal, 0.0f);
  }
  float wire_status_engine_torque_percent() const {
    return GetField<float>(VT_WIRE_STATUS_ENGINE_TORQUE_PERCENT, 0.0f);
  }
  bool mutate_wire_status_engine_torque_percent(float _wire_status_engine_torque_percent) {
    return SetField<float>(VT_WIRE_STATUS_ENGINE_TORQUE_PERCENT, _wire_status_engine_torque_percent, 0.0f);
  }
  float wire_status_engine_speed() const {
    return GetField<float>(VT_WIRE_STATUS_ENGINE_SPEED, 0.0f);
  }
  bool mutate_wire_status_engine_speed(float _wire_status_engine_speed) {
    return SetField<float>(VT_WIRE_STATUS_ENGINE_SPEED, _wire_status_engine_speed, 0.0f);
  }
  float wire_status_steering_wheel_angle() const {
    return GetField<float>(VT_WIRE_STATUS_STEERING_WHEEL_ANGLE, 0.0f);
  }
  bool mutate_wire_status_steering_wheel_angle(float _wire_status_steering_wheel_angle) {
    return SetField<float>(VT_WIRE_STATUS_STEERING_WHEEL_ANGLE, _wire_status_steering_wheel_angle, 0.0f);
  }
  float wire_status_front_wheel_angle() const {
    return GetField<float>(VT_WIRE_STATUS_FRONT_WHEEL_ANGLE, 0.0f);
  }
  bool mutate_wire_status_front_wheel_angle(float _wire_status_front_wheel_angle) {
    return SetField<float>(VT_WIRE_STATUS_FRONT_WHEEL_ANGLE, _wire_status_front_wheel_angle, 0.0f);
  }
  float wire_status_vehicle_speed() const {
    return GetField<float>(VT_WIRE_STATUS_VEHICLE_SPEED, 0.0f);
  }
  bool mutate_wire_status_vehicle_speed(float _wire_status_vehicle_speed) {
    return SetField<float>(VT_WIRE_STATUS_VEHICLE_SPEED, _wire_status_vehicle_speed, 0.0f);
  }
  int32_t wire_status_max_gear_shift() const {
    return GetField<int32_t>(VT_WIRE_STATUS_MAX_GEAR_SHIFT, 0);
  }
  bool mutate_wire_status_max_gear_shift(int32_t _wire_status_max_gear_shift) {
    return SetField<int32_t>(VT_WIRE_STATUS_MAX_GEAR_SHIFT, _wire_status_max_gear_shift, 0);
  }
  float wire_status_front_axle_aver_velocity_raw() const {
    return GetField<float>(VT_WIRE_STATUS_FRONT_AXLE_AVER_VELOCITY_RAW, 0.0f);
  }
  bool mutate_wire_status_front_axle_aver_velocity_raw(float _wire_status_front_axle_aver_velocity_raw) {
    return SetField<float>(VT_WIRE_STATUS_FRONT_AXLE_AVER_VELOCITY_RAW, _wire_status_front_axle_aver_velocity_raw, 0.0f);
  }
  float wire_status_front_axle_left_wheel_relatively_velocity_raw() const {
    return GetField<float>(VT_WIRE_STATUS_FRONT_AXLE_LEFT_WHEEL_RELATIVELY_VELOCITY_RAW, 0.0f);
  }
  bool mutate_wire_status_front_axle_left_wheel_relatively_velocity_raw(float _wire_status_front_axle_left_wheel_relatively_velocity_raw) {
    return SetField<float>(VT_WIRE_STATUS_FRONT_AXLE_LEFT_WHEEL_RELATIVELY_VELOCITY_RAW, _wire_status_front_axle_left_wheel_relatively_velocity_raw, 0.0f);
  }
  float wire_status_front_axle_right_wheel_relatively_velocity_raw() const {
    return GetField<float>(VT_WIRE_STATUS_FRONT_AXLE_RIGHT_WHEEL_RELATIVELY_VELOCITY_RAW, 0.0f);
  }
  bool mutate_wire_status_front_axle_right_wheel_relatively_velocity_raw(float _wire_status_front_axle_right_wheel_relatively_velocity_raw) {
    return SetField<float>(VT_WIRE_STATUS_FRONT_AXLE_RIGHT_WHEEL_RELATIVELY_VELOCITY_RAW, _wire_status_front_axle_right_wheel_relatively_velocity_raw, 0.0f);
  }
  float wire_status_rear_axle_left_wheel_relatively_velocity_raw() const {
    return GetField<float>(VT_WIRE_STATUS_REAR_AXLE_LEFT_WHEEL_RELATIVELY_VELOCITY_RAW, 0.0f);
  }
  bool mutate_wire_status_rear_axle_left_wheel_relatively_velocity_raw(float _wire_status_rear_axle_left_wheel_relatively_velocity_raw) {
    return SetField<float>(VT_WIRE_STATUS_REAR_AXLE_LEFT_WHEEL_RELATIVELY_VELOCITY_RAW, _wire_status_rear_axle_left_wheel_relatively_velocity_raw, 0.0f);
  }
  float wire_status_rear_axle_right_wheel_relatively_velocity_raw() const {
    return GetField<float>(VT_WIRE_STATUS_REAR_AXLE_RIGHT_WHEEL_RELATIVELY_VELOCITY_RAW, 0.0f);
  }
  bool mutate_wire_status_rear_axle_right_wheel_relatively_velocity_raw(float _wire_status_rear_axle_right_wheel_relatively_velocity_raw) {
    return SetField<float>(VT_WIRE_STATUS_REAR_AXLE_RIGHT_WHEEL_RELATIVELY_VELOCITY_RAW, _wire_status_rear_axle_right_wheel_relatively_velocity_raw, 0.0f);
  }
  float wire_status_front_brake_percent() const {
    return GetField<float>(VT_WIRE_STATUS_FRONT_BRAKE_PERCENT, 0.0f);
  }
  bool mutate_wire_status_front_brake_percent(float _wire_status_front_brake_percent) {
    return SetField<float>(VT_WIRE_STATUS_FRONT_BRAKE_PERCENT, _wire_status_front_brake_percent, 0.0f);
  }
  float wire_status_rear_brake_percent() const {
    return GetField<float>(VT_WIRE_STATUS_REAR_BRAKE_PERCENT, 0.0f);
  }
  bool mutate_wire_status_rear_brake_percent(float _wire_status_rear_brake_percent) {
    return SetField<float>(VT_WIRE_STATUS_REAR_BRAKE_PERCENT, _wire_status_rear_brake_percent, 0.0f);
  }
  float wire_status_acc_cmd_feedback() const {
    return GetField<float>(VT_WIRE_STATUS_ACC_CMD_FEEDBACK, 0.0f);
  }
  bool mutate_wire_status_acc_cmd_feedback(float _wire_status_acc_cmd_feedback) {
    return SetField<float>(VT_WIRE_STATUS_ACC_CMD_FEEDBACK, _wire_status_acc_cmd_feedback, 0.0f);
  }
  float wire_status_brake_cmd_feedback() const {
    return GetField<float>(VT_WIRE_STATUS_BRAKE_CMD_FEEDBACK, 0.0f);
  }
  bool mutate_wire_status_brake_cmd_feedback(float _wire_status_brake_cmd_feedback) {
    return SetField<float>(VT_WIRE_STATUS_BRAKE_CMD_FEEDBACK, _wire_status_brake_cmd_feedback, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_ACC_ACTUATE_PERCENT) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_ACC_MANUAL_PEDAL) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_ELECTRIC_BRAKE_ACTUATE_PERCENT) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_ELECTRIC_BRAKE_MANUAL_PEDAL) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_MECHANICAL_BRAKE_ACTUATE_PERCENT) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_MECHANICAL_BRAKE_MANUAL_PEDAL) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_ENGINE_TORQUE_PERCENT) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_ENGINE_SPEED) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_STEERING_WHEEL_ANGLE) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_FRONT_WHEEL_ANGLE) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_VEHICLE_SPEED) &&
           VerifyField<int32_t>(verifier, VT_WIRE_STATUS_MAX_GEAR_SHIFT) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_FRONT_AXLE_AVER_VELOCITY_RAW) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_FRONT_AXLE_LEFT_WHEEL_RELATIVELY_VELOCITY_RAW) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_FRONT_AXLE_RIGHT_WHEEL_RELATIVELY_VELOCITY_RAW) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_REAR_AXLE_LEFT_WHEEL_RELATIVELY_VELOCITY_RAW) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_REAR_AXLE_RIGHT_WHEEL_RELATIVELY_VELOCITY_RAW) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_FRONT_BRAKE_PERCENT) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_REAR_BRAKE_PERCENT) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_ACC_CMD_FEEDBACK) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_BRAKE_CMD_FEEDBACK) &&
           verifier.EndTable();
  }
  WireControlVehicleMovationT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(WireControlVehicleMovationT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<WireControlVehicleMovation> Pack(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVehicleMovationT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct WireControlVehicleMovationBuilder {
  typedef WireControlVehicleMovation Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_wire_status_acc_actuate_percent(float wire_status_acc_actuate_percent) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_ACC_ACTUATE_PERCENT, wire_status_acc_actuate_percent, 0.0f);
  }
  void add_wire_status_acc_manual_pedal(float wire_status_acc_manual_pedal) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_ACC_MANUAL_PEDAL, wire_status_acc_manual_pedal, 0.0f);
  }
  void add_wire_status_electric_brake_actuate_percent(float wire_status_electric_brake_actuate_percent) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_ELECTRIC_BRAKE_ACTUATE_PERCENT, wire_status_electric_brake_actuate_percent, 0.0f);
  }
  void add_wire_status_electric_brake_manual_pedal(float wire_status_electric_brake_manual_pedal) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_ELECTRIC_BRAKE_MANUAL_PEDAL, wire_status_electric_brake_manual_pedal, 0.0f);
  }
  void add_wire_status_mechanical_brake_actuate_percent(float wire_status_mechanical_brake_actuate_percent) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_MECHANICAL_BRAKE_ACTUATE_PERCENT, wire_status_mechanical_brake_actuate_percent, 0.0f);
  }
  void add_wire_status_mechanical_brake_manual_pedal(float wire_status_mechanical_brake_manual_pedal) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_MECHANICAL_BRAKE_MANUAL_PEDAL, wire_status_mechanical_brake_manual_pedal, 0.0f);
  }
  void add_wire_status_engine_torque_percent(float wire_status_engine_torque_percent) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_ENGINE_TORQUE_PERCENT, wire_status_engine_torque_percent, 0.0f);
  }
  void add_wire_status_engine_speed(float wire_status_engine_speed) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_ENGINE_SPEED, wire_status_engine_speed, 0.0f);
  }
  void add_wire_status_steering_wheel_angle(float wire_status_steering_wheel_angle) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_STEERING_WHEEL_ANGLE, wire_status_steering_wheel_angle, 0.0f);
  }
  void add_wire_status_front_wheel_angle(float wire_status_front_wheel_angle) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_FRONT_WHEEL_ANGLE, wire_status_front_wheel_angle, 0.0f);
  }
  void add_wire_status_vehicle_speed(float wire_status_vehicle_speed) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_VEHICLE_SPEED, wire_status_vehicle_speed, 0.0f);
  }
  void add_wire_status_max_gear_shift(int32_t wire_status_max_gear_shift) {
    fbb_.AddElement<int32_t>(WireControlVehicleMovation::VT_WIRE_STATUS_MAX_GEAR_SHIFT, wire_status_max_gear_shift, 0);
  }
  void add_wire_status_front_axle_aver_velocity_raw(float wire_status_front_axle_aver_velocity_raw) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_FRONT_AXLE_AVER_VELOCITY_RAW, wire_status_front_axle_aver_velocity_raw, 0.0f);
  }
  void add_wire_status_front_axle_left_wheel_relatively_velocity_raw(float wire_status_front_axle_left_wheel_relatively_velocity_raw) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_FRONT_AXLE_LEFT_WHEEL_RELATIVELY_VELOCITY_RAW, wire_status_front_axle_left_wheel_relatively_velocity_raw, 0.0f);
  }
  void add_wire_status_front_axle_right_wheel_relatively_velocity_raw(float wire_status_front_axle_right_wheel_relatively_velocity_raw) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_FRONT_AXLE_RIGHT_WHEEL_RELATIVELY_VELOCITY_RAW, wire_status_front_axle_right_wheel_relatively_velocity_raw, 0.0f);
  }
  void add_wire_status_rear_axle_left_wheel_relatively_velocity_raw(float wire_status_rear_axle_left_wheel_relatively_velocity_raw) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_REAR_AXLE_LEFT_WHEEL_RELATIVELY_VELOCITY_RAW, wire_status_rear_axle_left_wheel_relatively_velocity_raw, 0.0f);
  }
  void add_wire_status_rear_axle_right_wheel_relatively_velocity_raw(float wire_status_rear_axle_right_wheel_relatively_velocity_raw) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_REAR_AXLE_RIGHT_WHEEL_RELATIVELY_VELOCITY_RAW, wire_status_rear_axle_right_wheel_relatively_velocity_raw, 0.0f);
  }
  void add_wire_status_front_brake_percent(float wire_status_front_brake_percent) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_FRONT_BRAKE_PERCENT, wire_status_front_brake_percent, 0.0f);
  }
  void add_wire_status_rear_brake_percent(float wire_status_rear_brake_percent) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_REAR_BRAKE_PERCENT, wire_status_rear_brake_percent, 0.0f);
  }
  void add_wire_status_acc_cmd_feedback(float wire_status_acc_cmd_feedback) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_ACC_CMD_FEEDBACK, wire_status_acc_cmd_feedback, 0.0f);
  }
  void add_wire_status_brake_cmd_feedback(float wire_status_brake_cmd_feedback) {
    fbb_.AddElement<float>(WireControlVehicleMovation::VT_WIRE_STATUS_BRAKE_CMD_FEEDBACK, wire_status_brake_cmd_feedback, 0.0f);
  }
  explicit WireControlVehicleMovationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WireControlVehicleMovation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WireControlVehicleMovation>(end);
    return o;
  }
};

inline flatbuffers::Offset<WireControlVehicleMovation> CreateWireControlVehicleMovation(
    flatbuffers::FlatBufferBuilder &_fbb,
    float wire_status_acc_actuate_percent = 0.0f,
    float wire_status_acc_manual_pedal = 0.0f,
    float wire_status_electric_brake_actuate_percent = 0.0f,
    float wire_status_electric_brake_manual_pedal = 0.0f,
    float wire_status_mechanical_brake_actuate_percent = 0.0f,
    float wire_status_mechanical_brake_manual_pedal = 0.0f,
    float wire_status_engine_torque_percent = 0.0f,
    float wire_status_engine_speed = 0.0f,
    float wire_status_steering_wheel_angle = 0.0f,
    float wire_status_front_wheel_angle = 0.0f,
    float wire_status_vehicle_speed = 0.0f,
    int32_t wire_status_max_gear_shift = 0,
    float wire_status_front_axle_aver_velocity_raw = 0.0f,
    float wire_status_front_axle_left_wheel_relatively_velocity_raw = 0.0f,
    float wire_status_front_axle_right_wheel_relatively_velocity_raw = 0.0f,
    float wire_status_rear_axle_left_wheel_relatively_velocity_raw = 0.0f,
    float wire_status_rear_axle_right_wheel_relatively_velocity_raw = 0.0f,
    float wire_status_front_brake_percent = 0.0f,
    float wire_status_rear_brake_percent = 0.0f,
    float wire_status_acc_cmd_feedback = 0.0f,
    float wire_status_brake_cmd_feedback = 0.0f) {
  WireControlVehicleMovationBuilder builder_(_fbb);
  builder_.add_wire_status_brake_cmd_feedback(wire_status_brake_cmd_feedback);
  builder_.add_wire_status_acc_cmd_feedback(wire_status_acc_cmd_feedback);
  builder_.add_wire_status_rear_brake_percent(wire_status_rear_brake_percent);
  builder_.add_wire_status_front_brake_percent(wire_status_front_brake_percent);
  builder_.add_wire_status_rear_axle_right_wheel_relatively_velocity_raw(wire_status_rear_axle_right_wheel_relatively_velocity_raw);
  builder_.add_wire_status_rear_axle_left_wheel_relatively_velocity_raw(wire_status_rear_axle_left_wheel_relatively_velocity_raw);
  builder_.add_wire_status_front_axle_right_wheel_relatively_velocity_raw(wire_status_front_axle_right_wheel_relatively_velocity_raw);
  builder_.add_wire_status_front_axle_left_wheel_relatively_velocity_raw(wire_status_front_axle_left_wheel_relatively_velocity_raw);
  builder_.add_wire_status_front_axle_aver_velocity_raw(wire_status_front_axle_aver_velocity_raw);
  builder_.add_wire_status_max_gear_shift(wire_status_max_gear_shift);
  builder_.add_wire_status_vehicle_speed(wire_status_vehicle_speed);
  builder_.add_wire_status_front_wheel_angle(wire_status_front_wheel_angle);
  builder_.add_wire_status_steering_wheel_angle(wire_status_steering_wheel_angle);
  builder_.add_wire_status_engine_speed(wire_status_engine_speed);
  builder_.add_wire_status_engine_torque_percent(wire_status_engine_torque_percent);
  builder_.add_wire_status_mechanical_brake_manual_pedal(wire_status_mechanical_brake_manual_pedal);
  builder_.add_wire_status_mechanical_brake_actuate_percent(wire_status_mechanical_brake_actuate_percent);
  builder_.add_wire_status_electric_brake_manual_pedal(wire_status_electric_brake_manual_pedal);
  builder_.add_wire_status_electric_brake_actuate_percent(wire_status_electric_brake_actuate_percent);
  builder_.add_wire_status_acc_manual_pedal(wire_status_acc_manual_pedal);
  builder_.add_wire_status_acc_actuate_percent(wire_status_acc_actuate_percent);
  return builder_.Finish();
}

flatbuffers::Offset<WireControlVehicleMovation> CreateWireControlVehicleMovation(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVehicleMovationT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct WireControlVehicleStatusT : public flatbuffers::NativeTable {
  typedef WireControlVehicleStatus TableType;
  uint8_t wire_status_parking_status;
  uint8_t wire_status_drive_mode_status;
  uint8_t wire_status_lift_status;
  uint8_t wire_status_vehicle_load;
  uint8_t wire_status_parking_long_status;
  int32_t wire_status_gear_shift;
  float wire_status_truck_lift_anle;
  float wire_status_battery_voltage;
  float wire_status_fuel_level;
  uint8_t wire_status_emergency_brake;
  uint8_t wire_status_steering_valve_current_operation_state;
  float wire_status_engine_coolant_temperature;
  float wire_status_engine_oil_pressure;
  uint8_t wire_status_truck_type;
  uint8_t wire_status_truck_id;
  uint8_t wire_status_device_number;
  float wire_status_real_pay_load;
  WireControlVehicleStatusT()
      : wire_status_parking_status(0),
        wire_status_drive_mode_status(0),
        wire_status_lift_status(0),
        wire_status_vehicle_load(0),
        wire_status_parking_long_status(0),
        wire_status_gear_shift(0),
        wire_status_truck_lift_anle(0.0f),
        wire_status_battery_voltage(0.0f),
        wire_status_fuel_level(0.0f),
        wire_status_emergency_brake(0),
        wire_status_steering_valve_current_operation_state(0),
        wire_status_engine_coolant_temperature(0.0f),
        wire_status_engine_oil_pressure(0.0f),
        wire_status_truck_type(0),
        wire_status_truck_id(0),
        wire_status_device_number(0),
        wire_status_real_pay_load(0.0f) {
  }
};

inline bool operator==(const WireControlVehicleStatusT &lhs, const WireControlVehicleStatusT &rhs) {
  return
      (lhs.wire_status_parking_status == rhs.wire_status_parking_status) &&
      (lhs.wire_status_drive_mode_status == rhs.wire_status_drive_mode_status) &&
      (lhs.wire_status_lift_status == rhs.wire_status_lift_status) &&
      (lhs.wire_status_vehicle_load == rhs.wire_status_vehicle_load) &&
      (lhs.wire_status_parking_long_status == rhs.wire_status_parking_long_status) &&
      (lhs.wire_status_gear_shift == rhs.wire_status_gear_shift) &&
      (lhs.wire_status_truck_lift_anle == rhs.wire_status_truck_lift_anle) &&
      (lhs.wire_status_battery_voltage == rhs.wire_status_battery_voltage) &&
      (lhs.wire_status_fuel_level == rhs.wire_status_fuel_level) &&
      (lhs.wire_status_emergency_brake == rhs.wire_status_emergency_brake) &&
      (lhs.wire_status_steering_valve_current_operation_state == rhs.wire_status_steering_valve_current_operation_state) &&
      (lhs.wire_status_engine_coolant_temperature == rhs.wire_status_engine_coolant_temperature) &&
      (lhs.wire_status_engine_oil_pressure == rhs.wire_status_engine_oil_pressure) &&
      (lhs.wire_status_truck_type == rhs.wire_status_truck_type) &&
      (lhs.wire_status_truck_id == rhs.wire_status_truck_id) &&
      (lhs.wire_status_device_number == rhs.wire_status_device_number) &&
      (lhs.wire_status_real_pay_load == rhs.wire_status_real_pay_load);
}

inline bool operator!=(const WireControlVehicleStatusT &lhs, const WireControlVehicleStatusT &rhs) {
    return !(lhs == rhs);
}


struct WireControlVehicleStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WireControlVehicleStatusT NativeTableType;
  typedef WireControlVehicleStatusBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return WireControlVehicleStatusTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIRE_STATUS_PARKING_STATUS = 4,
    VT_WIRE_STATUS_DRIVE_MODE_STATUS = 6,
    VT_WIRE_STATUS_LIFT_STATUS = 8,
    VT_WIRE_STATUS_VEHICLE_LOAD = 10,
    VT_WIRE_STATUS_PARKING_LONG_STATUS = 12,
    VT_WIRE_STATUS_GEAR_SHIFT = 14,
    VT_WIRE_STATUS_TRUCK_LIFT_ANLE = 16,
    VT_WIRE_STATUS_BATTERY_VOLTAGE = 18,
    VT_WIRE_STATUS_FUEL_LEVEL = 20,
    VT_WIRE_STATUS_EMERGENCY_BRAKE = 22,
    VT_WIRE_STATUS_STEERING_VALVE_CURRENT_OPERATION_STATE = 24,
    VT_WIRE_STATUS_ENGINE_COOLANT_TEMPERATURE = 26,
    VT_WIRE_STATUS_ENGINE_OIL_PRESSURE = 28,
    VT_WIRE_STATUS_TRUCK_TYPE = 30,
    VT_WIRE_STATUS_TRUCK_ID = 32,
    VT_WIRE_STATUS_DEVICE_NUMBER = 34,
    VT_WIRE_STATUS_REAL_PAY_LOAD = 36
  };
  uint8_t wire_status_parking_status() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_PARKING_STATUS, 0);
  }
  bool mutate_wire_status_parking_status(uint8_t _wire_status_parking_status) {
    return SetField<uint8_t>(VT_WIRE_STATUS_PARKING_STATUS, _wire_status_parking_status, 0);
  }
  uint8_t wire_status_drive_mode_status() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_DRIVE_MODE_STATUS, 0);
  }
  bool mutate_wire_status_drive_mode_status(uint8_t _wire_status_drive_mode_status) {
    return SetField<uint8_t>(VT_WIRE_STATUS_DRIVE_MODE_STATUS, _wire_status_drive_mode_status, 0);
  }
  uint8_t wire_status_lift_status() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_LIFT_STATUS, 0);
  }
  bool mutate_wire_status_lift_status(uint8_t _wire_status_lift_status) {
    return SetField<uint8_t>(VT_WIRE_STATUS_LIFT_STATUS, _wire_status_lift_status, 0);
  }
  uint8_t wire_status_vehicle_load() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_VEHICLE_LOAD, 0);
  }
  bool mutate_wire_status_vehicle_load(uint8_t _wire_status_vehicle_load) {
    return SetField<uint8_t>(VT_WIRE_STATUS_VEHICLE_LOAD, _wire_status_vehicle_load, 0);
  }
  uint8_t wire_status_parking_long_status() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_PARKING_LONG_STATUS, 0);
  }
  bool mutate_wire_status_parking_long_status(uint8_t _wire_status_parking_long_status) {
    return SetField<uint8_t>(VT_WIRE_STATUS_PARKING_LONG_STATUS, _wire_status_parking_long_status, 0);
  }
  int32_t wire_status_gear_shift() const {
    return GetField<int32_t>(VT_WIRE_STATUS_GEAR_SHIFT, 0);
  }
  bool mutate_wire_status_gear_shift(int32_t _wire_status_gear_shift) {
    return SetField<int32_t>(VT_WIRE_STATUS_GEAR_SHIFT, _wire_status_gear_shift, 0);
  }
  float wire_status_truck_lift_anle() const {
    return GetField<float>(VT_WIRE_STATUS_TRUCK_LIFT_ANLE, 0.0f);
  }
  bool mutate_wire_status_truck_lift_anle(float _wire_status_truck_lift_anle) {
    return SetField<float>(VT_WIRE_STATUS_TRUCK_LIFT_ANLE, _wire_status_truck_lift_anle, 0.0f);
  }
  float wire_status_battery_voltage() const {
    return GetField<float>(VT_WIRE_STATUS_BATTERY_VOLTAGE, 0.0f);
  }
  bool mutate_wire_status_battery_voltage(float _wire_status_battery_voltage) {
    return SetField<float>(VT_WIRE_STATUS_BATTERY_VOLTAGE, _wire_status_battery_voltage, 0.0f);
  }
  float wire_status_fuel_level() const {
    return GetField<float>(VT_WIRE_STATUS_FUEL_LEVEL, 0.0f);
  }
  bool mutate_wire_status_fuel_level(float _wire_status_fuel_level) {
    return SetField<float>(VT_WIRE_STATUS_FUEL_LEVEL, _wire_status_fuel_level, 0.0f);
  }
  uint8_t wire_status_emergency_brake() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_EMERGENCY_BRAKE, 0);
  }
  bool mutate_wire_status_emergency_brake(uint8_t _wire_status_emergency_brake) {
    return SetField<uint8_t>(VT_WIRE_STATUS_EMERGENCY_BRAKE, _wire_status_emergency_brake, 0);
  }
  uint8_t wire_status_steering_valve_current_operation_state() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_STEERING_VALVE_CURRENT_OPERATION_STATE, 0);
  }
  bool mutate_wire_status_steering_valve_current_operation_state(uint8_t _wire_status_steering_valve_current_operation_state) {
    return SetField<uint8_t>(VT_WIRE_STATUS_STEERING_VALVE_CURRENT_OPERATION_STATE, _wire_status_steering_valve_current_operation_state, 0);
  }
  float wire_status_engine_coolant_temperature() const {
    return GetField<float>(VT_WIRE_STATUS_ENGINE_COOLANT_TEMPERATURE, 0.0f);
  }
  bool mutate_wire_status_engine_coolant_temperature(float _wire_status_engine_coolant_temperature) {
    return SetField<float>(VT_WIRE_STATUS_ENGINE_COOLANT_TEMPERATURE, _wire_status_engine_coolant_temperature, 0.0f);
  }
  float wire_status_engine_oil_pressure() const {
    return GetField<float>(VT_WIRE_STATUS_ENGINE_OIL_PRESSURE, 0.0f);
  }
  bool mutate_wire_status_engine_oil_pressure(float _wire_status_engine_oil_pressure) {
    return SetField<float>(VT_WIRE_STATUS_ENGINE_OIL_PRESSURE, _wire_status_engine_oil_pressure, 0.0f);
  }
  uint8_t wire_status_truck_type() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_TRUCK_TYPE, 0);
  }
  bool mutate_wire_status_truck_type(uint8_t _wire_status_truck_type) {
    return SetField<uint8_t>(VT_WIRE_STATUS_TRUCK_TYPE, _wire_status_truck_type, 0);
  }
  uint8_t wire_status_truck_id() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_TRUCK_ID, 0);
  }
  bool mutate_wire_status_truck_id(uint8_t _wire_status_truck_id) {
    return SetField<uint8_t>(VT_WIRE_STATUS_TRUCK_ID, _wire_status_truck_id, 0);
  }
  uint8_t wire_status_device_number() const {
    return GetField<uint8_t>(VT_WIRE_STATUS_DEVICE_NUMBER, 0);
  }
  bool mutate_wire_status_device_number(uint8_t _wire_status_device_number) {
    return SetField<uint8_t>(VT_WIRE_STATUS_DEVICE_NUMBER, _wire_status_device_number, 0);
  }
  float wire_status_real_pay_load() const {
    return GetField<float>(VT_WIRE_STATUS_REAL_PAY_LOAD, 0.0f);
  }
  bool mutate_wire_status_real_pay_load(float _wire_status_real_pay_load) {
    return SetField<float>(VT_WIRE_STATUS_REAL_PAY_LOAD, _wire_status_real_pay_load, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_PARKING_STATUS) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_DRIVE_MODE_STATUS) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_LIFT_STATUS) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_VEHICLE_LOAD) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_PARKING_LONG_STATUS) &&
           VerifyField<int32_t>(verifier, VT_WIRE_STATUS_GEAR_SHIFT) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_TRUCK_LIFT_ANLE) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_BATTERY_VOLTAGE) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_FUEL_LEVEL) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_EMERGENCY_BRAKE) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_STEERING_VALVE_CURRENT_OPERATION_STATE) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_ENGINE_COOLANT_TEMPERATURE) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_ENGINE_OIL_PRESSURE) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_TRUCK_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_TRUCK_ID) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_STATUS_DEVICE_NUMBER) &&
           VerifyField<float>(verifier, VT_WIRE_STATUS_REAL_PAY_LOAD) &&
           verifier.EndTable();
  }
  WireControlVehicleStatusT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(WireControlVehicleStatusT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<WireControlVehicleStatus> Pack(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVehicleStatusT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct WireControlVehicleStatusBuilder {
  typedef WireControlVehicleStatus Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_wire_status_parking_status(uint8_t wire_status_parking_status) {
    fbb_.AddElement<uint8_t>(WireControlVehicleStatus::VT_WIRE_STATUS_PARKING_STATUS, wire_status_parking_status, 0);
  }
  void add_wire_status_drive_mode_status(uint8_t wire_status_drive_mode_status) {
    fbb_.AddElement<uint8_t>(WireControlVehicleStatus::VT_WIRE_STATUS_DRIVE_MODE_STATUS, wire_status_drive_mode_status, 0);
  }
  void add_wire_status_lift_status(uint8_t wire_status_lift_status) {
    fbb_.AddElement<uint8_t>(WireControlVehicleStatus::VT_WIRE_STATUS_LIFT_STATUS, wire_status_lift_status, 0);
  }
  void add_wire_status_vehicle_load(uint8_t wire_status_vehicle_load) {
    fbb_.AddElement<uint8_t>(WireControlVehicleStatus::VT_WIRE_STATUS_VEHICLE_LOAD, wire_status_vehicle_load, 0);
  }
  void add_wire_status_parking_long_status(uint8_t wire_status_parking_long_status) {
    fbb_.AddElement<uint8_t>(WireControlVehicleStatus::VT_WIRE_STATUS_PARKING_LONG_STATUS, wire_status_parking_long_status, 0);
  }
  void add_wire_status_gear_shift(int32_t wire_status_gear_shift) {
    fbb_.AddElement<int32_t>(WireControlVehicleStatus::VT_WIRE_STATUS_GEAR_SHIFT, wire_status_gear_shift, 0);
  }
  void add_wire_status_truck_lift_anle(float wire_status_truck_lift_anle) {
    fbb_.AddElement<float>(WireControlVehicleStatus::VT_WIRE_STATUS_TRUCK_LIFT_ANLE, wire_status_truck_lift_anle, 0.0f);
  }
  void add_wire_status_battery_voltage(float wire_status_battery_voltage) {
    fbb_.AddElement<float>(WireControlVehicleStatus::VT_WIRE_STATUS_BATTERY_VOLTAGE, wire_status_battery_voltage, 0.0f);
  }
  void add_wire_status_fuel_level(float wire_status_fuel_level) {
    fbb_.AddElement<float>(WireControlVehicleStatus::VT_WIRE_STATUS_FUEL_LEVEL, wire_status_fuel_level, 0.0f);
  }
  void add_wire_status_emergency_brake(uint8_t wire_status_emergency_brake) {
    fbb_.AddElement<uint8_t>(WireControlVehicleStatus::VT_WIRE_STATUS_EMERGENCY_BRAKE, wire_status_emergency_brake, 0);
  }
  void add_wire_status_steering_valve_current_operation_state(uint8_t wire_status_steering_valve_current_operation_state) {
    fbb_.AddElement<uint8_t>(WireControlVehicleStatus::VT_WIRE_STATUS_STEERING_VALVE_CURRENT_OPERATION_STATE, wire_status_steering_valve_current_operation_state, 0);
  }
  void add_wire_status_engine_coolant_temperature(float wire_status_engine_coolant_temperature) {
    fbb_.AddElement<float>(WireControlVehicleStatus::VT_WIRE_STATUS_ENGINE_COOLANT_TEMPERATURE, wire_status_engine_coolant_temperature, 0.0f);
  }
  void add_wire_status_engine_oil_pressure(float wire_status_engine_oil_pressure) {
    fbb_.AddElement<float>(WireControlVehicleStatus::VT_WIRE_STATUS_ENGINE_OIL_PRESSURE, wire_status_engine_oil_pressure, 0.0f);
  }
  void add_wire_status_truck_type(uint8_t wire_status_truck_type) {
    fbb_.AddElement<uint8_t>(WireControlVehicleStatus::VT_WIRE_STATUS_TRUCK_TYPE, wire_status_truck_type, 0);
  }
  void add_wire_status_truck_id(uint8_t wire_status_truck_id) {
    fbb_.AddElement<uint8_t>(WireControlVehicleStatus::VT_WIRE_STATUS_TRUCK_ID, wire_status_truck_id, 0);
  }
  void add_wire_status_device_number(uint8_t wire_status_device_number) {
    fbb_.AddElement<uint8_t>(WireControlVehicleStatus::VT_WIRE_STATUS_DEVICE_NUMBER, wire_status_device_number, 0);
  }
  void add_wire_status_real_pay_load(float wire_status_real_pay_load) {
    fbb_.AddElement<float>(WireControlVehicleStatus::VT_WIRE_STATUS_REAL_PAY_LOAD, wire_status_real_pay_load, 0.0f);
  }
  explicit WireControlVehicleStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WireControlVehicleStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WireControlVehicleStatus>(end);
    return o;
  }
};

inline flatbuffers::Offset<WireControlVehicleStatus> CreateWireControlVehicleStatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t wire_status_parking_status = 0,
    uint8_t wire_status_drive_mode_status = 0,
    uint8_t wire_status_lift_status = 0,
    uint8_t wire_status_vehicle_load = 0,
    uint8_t wire_status_parking_long_status = 0,
    int32_t wire_status_gear_shift = 0,
    float wire_status_truck_lift_anle = 0.0f,
    float wire_status_battery_voltage = 0.0f,
    float wire_status_fuel_level = 0.0f,
    uint8_t wire_status_emergency_brake = 0,
    uint8_t wire_status_steering_valve_current_operation_state = 0,
    float wire_status_engine_coolant_temperature = 0.0f,
    float wire_status_engine_oil_pressure = 0.0f,
    uint8_t wire_status_truck_type = 0,
    uint8_t wire_status_truck_id = 0,
    uint8_t wire_status_device_number = 0,
    float wire_status_real_pay_load = 0.0f) {
  WireControlVehicleStatusBuilder builder_(_fbb);
  builder_.add_wire_status_real_pay_load(wire_status_real_pay_load);
  builder_.add_wire_status_engine_oil_pressure(wire_status_engine_oil_pressure);
  builder_.add_wire_status_engine_coolant_temperature(wire_status_engine_coolant_temperature);
  builder_.add_wire_status_fuel_level(wire_status_fuel_level);
  builder_.add_wire_status_battery_voltage(wire_status_battery_voltage);
  builder_.add_wire_status_truck_lift_anle(wire_status_truck_lift_anle);
  builder_.add_wire_status_gear_shift(wire_status_gear_shift);
  builder_.add_wire_status_device_number(wire_status_device_number);
  builder_.add_wire_status_truck_id(wire_status_truck_id);
  builder_.add_wire_status_truck_type(wire_status_truck_type);
  builder_.add_wire_status_steering_valve_current_operation_state(wire_status_steering_valve_current_operation_state);
  builder_.add_wire_status_emergency_brake(wire_status_emergency_brake);
  builder_.add_wire_status_parking_long_status(wire_status_parking_long_status);
  builder_.add_wire_status_vehicle_load(wire_status_vehicle_load);
  builder_.add_wire_status_lift_status(wire_status_lift_status);
  builder_.add_wire_status_drive_mode_status(wire_status_drive_mode_status);
  builder_.add_wire_status_parking_status(wire_status_parking_status);
  return builder_.Finish();
}

flatbuffers::Offset<WireControlVehicleStatus> CreateWireControlVehicleStatus(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVehicleStatusT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct MsgVcuVersionT : public flatbuffers::NativeTable {
  typedef MsgVcuVersion TableType;
  uint8_t wire_vcu_func_version;
  uint8_t wire_vcu_main_version;
  uint8_t wire_vcu_sub_version;
  MsgVcuVersionT()
      : wire_vcu_func_version(0),
        wire_vcu_main_version(0),
        wire_vcu_sub_version(0) {
  }
};

inline bool operator==(const MsgVcuVersionT &lhs, const MsgVcuVersionT &rhs) {
  return
      (lhs.wire_vcu_func_version == rhs.wire_vcu_func_version) &&
      (lhs.wire_vcu_main_version == rhs.wire_vcu_main_version) &&
      (lhs.wire_vcu_sub_version == rhs.wire_vcu_sub_version);
}

inline bool operator!=(const MsgVcuVersionT &lhs, const MsgVcuVersionT &rhs) {
    return !(lhs == rhs);
}


struct MsgVcuVersion FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MsgVcuVersionT NativeTableType;
  typedef MsgVcuVersionBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return MsgVcuVersionTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIRE_VCU_FUNC_VERSION = 4,
    VT_WIRE_VCU_MAIN_VERSION = 6,
    VT_WIRE_VCU_SUB_VERSION = 8
  };
  uint8_t wire_vcu_func_version() const {
    return GetField<uint8_t>(VT_WIRE_VCU_FUNC_VERSION, 0);
  }
  bool mutate_wire_vcu_func_version(uint8_t _wire_vcu_func_version) {
    return SetField<uint8_t>(VT_WIRE_VCU_FUNC_VERSION, _wire_vcu_func_version, 0);
  }
  uint8_t wire_vcu_main_version() const {
    return GetField<uint8_t>(VT_WIRE_VCU_MAIN_VERSION, 0);
  }
  bool mutate_wire_vcu_main_version(uint8_t _wire_vcu_main_version) {
    return SetField<uint8_t>(VT_WIRE_VCU_MAIN_VERSION, _wire_vcu_main_version, 0);
  }
  uint8_t wire_vcu_sub_version() const {
    return GetField<uint8_t>(VT_WIRE_VCU_SUB_VERSION, 0);
  }
  bool mutate_wire_vcu_sub_version(uint8_t _wire_vcu_sub_version) {
    return SetField<uint8_t>(VT_WIRE_VCU_SUB_VERSION, _wire_vcu_sub_version, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_VCU_FUNC_VERSION) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_VCU_MAIN_VERSION) &&
           VerifyField<uint8_t>(verifier, VT_WIRE_VCU_SUB_VERSION) &&
           verifier.EndTable();
  }
  MsgVcuVersionT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MsgVcuVersionT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MsgVcuVersion> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MsgVcuVersionT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MsgVcuVersionBuilder {
  typedef MsgVcuVersion Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_wire_vcu_func_version(uint8_t wire_vcu_func_version) {
    fbb_.AddElement<uint8_t>(MsgVcuVersion::VT_WIRE_VCU_FUNC_VERSION, wire_vcu_func_version, 0);
  }
  void add_wire_vcu_main_version(uint8_t wire_vcu_main_version) {
    fbb_.AddElement<uint8_t>(MsgVcuVersion::VT_WIRE_VCU_MAIN_VERSION, wire_vcu_main_version, 0);
  }
  void add_wire_vcu_sub_version(uint8_t wire_vcu_sub_version) {
    fbb_.AddElement<uint8_t>(MsgVcuVersion::VT_WIRE_VCU_SUB_VERSION, wire_vcu_sub_version, 0);
  }
  explicit MsgVcuVersionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MsgVcuVersion> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MsgVcuVersion>(end);
    return o;
  }
};

inline flatbuffers::Offset<MsgVcuVersion> CreateMsgVcuVersion(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t wire_vcu_func_version = 0,
    uint8_t wire_vcu_main_version = 0,
    uint8_t wire_vcu_sub_version = 0) {
  MsgVcuVersionBuilder builder_(_fbb);
  builder_.add_wire_vcu_sub_version(wire_vcu_sub_version);
  builder_.add_wire_vcu_main_version(wire_vcu_main_version);
  builder_.add_wire_vcu_func_version(wire_vcu_func_version);
  return builder_.Finish();
}

flatbuffers::Offset<MsgVcuVersion> CreateMsgVcuVersion(flatbuffers::FlatBufferBuilder &_fbb, const MsgVcuVersionT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CanAboutDevStatusT *CanAboutDevStatus::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<can::CanAboutDevStatusT> _o = std::unique_ptr<can::CanAboutDevStatusT>(new CanAboutDevStatusT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CanAboutDevStatus::UnPackTo(CanAboutDevStatusT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = wire_can_offline_flag(); _o->wire_can_offline_flag = _e; }
  { auto _e = tx2_can_offline_flag(); _o->tx2_can_offline_flag = _e; }
  { auto _e = cgu_can_offline_flag(); _o->cgu_can_offline_flag = _e; }
  { auto _e = front_lidar_offline_flag(); _o->front_lidar_offline_flag = _e; }
  { auto _e = front_left_radar_offline_flag(); _o->front_left_radar_offline_flag = _e; }
  { auto _e = front_middle_radar_offline_flag(); _o->front_middle_radar_offline_flag = _e; }
  { auto _e = front_right_radar_offline_flag(); _o->front_right_radar_offline_flag = _e; }
  { auto _e = rear_lidar_offline_flag(); _o->rear_lidar_offline_flag = _e; }
  { auto _e = rear_radar_offline_flag(); _o->rear_radar_offline_flag = _e; }
  { auto _e = left_lidar_offline_flag(); _o->left_lidar_offline_flag = _e; }
  { auto _e = right_lidar_offline_flag(); _o->right_lidar_offline_flag = _e; }
}

inline flatbuffers::Offset<CanAboutDevStatus> CanAboutDevStatus::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CanAboutDevStatusT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCanAboutDevStatus(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CanAboutDevStatus> CreateCanAboutDevStatus(flatbuffers::FlatBufferBuilder &_fbb, const CanAboutDevStatusT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CanAboutDevStatusT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _wire_can_offline_flag = _o->wire_can_offline_flag;
  auto _tx2_can_offline_flag = _o->tx2_can_offline_flag;
  auto _cgu_can_offline_flag = _o->cgu_can_offline_flag;
  auto _front_lidar_offline_flag = _o->front_lidar_offline_flag;
  auto _front_left_radar_offline_flag = _o->front_left_radar_offline_flag;
  auto _front_middle_radar_offline_flag = _o->front_middle_radar_offline_flag;
  auto _front_right_radar_offline_flag = _o->front_right_radar_offline_flag;
  auto _rear_lidar_offline_flag = _o->rear_lidar_offline_flag;
  auto _rear_radar_offline_flag = _o->rear_radar_offline_flag;
  auto _left_lidar_offline_flag = _o->left_lidar_offline_flag;
  auto _right_lidar_offline_flag = _o->right_lidar_offline_flag;
  return can::CreateCanAboutDevStatus(
      _fbb,
      _wire_can_offline_flag,
      _tx2_can_offline_flag,
      _cgu_can_offline_flag,
      _front_lidar_offline_flag,
      _front_left_radar_offline_flag,
      _front_middle_radar_offline_flag,
      _front_right_radar_offline_flag,
      _rear_lidar_offline_flag,
      _rear_radar_offline_flag,
      _left_lidar_offline_flag,
      _right_lidar_offline_flag);
}

inline WireControlVcuVersionT *WireControlVcuVersion::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<can::WireControlVcuVersionT> _o = std::unique_ptr<can::WireControlVcuVersionT>(new WireControlVcuVersionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void WireControlVcuVersion::UnPackTo(WireControlVcuVersionT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = wire_vcu_func_version(); _o->wire_vcu_func_version = _e; }
  { auto _e = wire_vcu_main_version(); _o->wire_vcu_main_version = _e; }
  { auto _e = wire_vcu_sub_version(); _o->wire_vcu_sub_version = _e; }
}

inline flatbuffers::Offset<WireControlVcuVersion> WireControlVcuVersion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVcuVersionT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateWireControlVcuVersion(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<WireControlVcuVersion> CreateWireControlVcuVersion(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVcuVersionT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const WireControlVcuVersionT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _wire_vcu_func_version = _o->wire_vcu_func_version;
  auto _wire_vcu_main_version = _o->wire_vcu_main_version;
  auto _wire_vcu_sub_version = _o->wire_vcu_sub_version;
  return can::CreateWireControlVcuVersion(
      _fbb,
      _wire_vcu_func_version,
      _wire_vcu_main_version,
      _wire_vcu_sub_version);
}

inline WireControlVehicleFaultT *WireControlVehicleFault::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<can::WireControlVehicleFaultT> _o = std::unique_ptr<can::WireControlVehicleFaultT>(new WireControlVehicleFaultT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void WireControlVehicleFault::UnPackTo(WireControlVehicleFaultT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = wire_status_inclinator_status(); _o->wire_status_inclinator_status = _e; }
  { auto _e = wire_status_ruler_status(); _o->wire_status_ruler_status = _e; }
  { auto _e = wire_status_robot_control_status(); _o->wire_status_robot_control_status = _e; }
  { auto _e = wire_status_throttle_fault_status(); _o->wire_status_throttle_fault_status = _e; }
  { auto _e = wire_status_electric_brake_fault_status(); _o->wire_status_electric_brake_fault_status = _e; }
  { auto _e = wire_status_mechanicle_brake_motor_error_num(); _o->wire_status_mechanicle_brake_motor_error_num = _e; }
  { auto _e = wire_status_steer_motor_error_num(); _o->wire_status_steer_motor_error_num = _e; }
  { auto _e = wire_status_engine_falut(); _o->wire_status_engine_falut = _e; }
  { auto _e = wire_status_transmission_falut(); _o->wire_status_transmission_falut = _e; }
  { auto _e = wire_status_ebs_falut(); _o->wire_status_ebs_falut = _e; }
  { auto _e = wire_status_eps_falut(); _o->wire_status_eps_falut = _e; }
  { auto _e = wire_status_air_filter_alarm(); _o->wire_status_air_filter_alarm = _e; }
  { auto _e = wire_status_steer_oil_filter_alarm(); _o->wire_status_steer_oil_filter_alarm = _e; }
  { auto _e = wire_status_left_light(); _o->wire_status_left_light = _e; }
  { auto _e = wire_status_right_light(); _o->wire_status_right_light = _e; }
  { auto _e = wire_status_low_beam(); _o->wire_status_low_beam = _e; }
  { auto _e = wire_status_high_beam(); _o->wire_status_high_beam = _e; }
  { auto _e = wire_status_rotate_alarm_light(); _o->wire_status_rotate_alarm_light = _e; }
  { auto _e = wire_status_air_horns(); _o->wire_status_air_horns = _e; }
  { auto _e = wire_status_front_fog_lamp(); _o->wire_status_front_fog_lamp = _e; }
  { auto _e = wire_status_front_work_lamp(); _o->wire_status_front_work_lamp = _e; }
  { auto _e = wire_status_side_lamp(); _o->wire_status_side_lamp = _e; }
  { auto _e = wire_status_positoin_lamp(); _o->wire_status_positoin_lamp = _e; }
  { auto _e = wire_status_wiper_motor_power(); _o->wire_status_wiper_motor_power = _e; }
  { auto _e = wire_status_ebs_power(); _o->wire_status_ebs_power = _e; }
  { auto _e = wire_status_pressure_sensor_power(); _o->wire_status_pressure_sensor_power = _e; }
  { auto _e = wire_status_rise_solenoid_savle_up(); _o->wire_status_rise_solenoid_savle_up = _e; }
  { auto _e = wire_status_rise_solenoid_savle_down(); _o->wire_status_rise_solenoid_savle_down = _e; }
  { auto _e = wire_status_manual_solenoid_savle(); _o->wire_status_manual_solenoid_savle = _e; }
  { auto _e = wire_status_rear_left_light(); _o->wire_status_rear_left_light = _e; }
  { auto _e = wire_status_rear_right_light(); _o->wire_status_rear_right_light = _e; }
  { auto _e = wire_status_rear_pos_light(); _o->wire_status_rear_pos_light = _e; }
  { auto _e = wire_status_brake_light(); _o->wire_status_brake_light = _e; }
  { auto _e = wire_status_reverse_light_horns(); _o->wire_status_reverse_light_horns = _e; }
  { auto _e = wire_status_rear_work(); _o->wire_status_rear_work = _e; }
  { auto _e = wire_status_heat_sink1(); _o->wire_status_heat_sink1 = _e; }
  { auto _e = wire_status_heat_sink2(); _o->wire_status_heat_sink2 = _e; }
  { auto _e = wire_status_diff_solenoid_savle(); _o->wire_status_diff_solenoid_savle = _e; }
  { auto _e = wire_status_dryer_power(); _o->wire_status_dryer_power = _e; }
  { auto _e = wire_status_inclinator_power(); _o->wire_status_inclinator_power = _e; }
  { auto _e = wire_status_cold_water_treasure_power(); _o->wire_status_cold_water_treasure_power = _e; }
  { auto _e = wire_status_exhaust_brake(); _o->wire_status_exhaust_brake = _e; }
  { auto _e = wire_status_error_level(); _o->wire_status_error_level = _e; }
  { auto _e = wire_status_urgent_brake(); _o->wire_status_urgent_brake = _e; }
  { auto _e = wire_status_engine_activation(); _o->wire_status_engine_activation = _e; }
  { auto _e = wire_status_hand_brake_activation(); _o->wire_status_hand_brake_activation = _e; }
  { auto _e = wire_status_ebs_activation(); _o->wire_status_ebs_activation = _e; }
  { auto _e = wire_status_retarder_activation(); _o->wire_status_retarder_activation = _e; }
  { auto _e = wire_status_transmission_activation(); _o->wire_status_transmission_activation = _e; }
  { auto _e = wire_status_eps_activation(); _o->wire_status_eps_activation = _e; }
  { auto _e = wire_status_lift_activation(); _o->wire_status_lift_activation = _e; }
  { auto _e = wire_status_pressure_sensor1(); _o->wire_status_pressure_sensor1 = _e; }
  { auto _e = wire_status_pressure_sensor2(); _o->wire_status_pressure_sensor2 = _e; }
  { auto _e = wire_status_oil_sensor(); _o->wire_status_oil_sensor = _e; }
  { auto _e = wire_status_zhongchuang_motor_speed(); _o->wire_status_zhongchuang_motor_speed = _e; }
  { auto _e = wire_status_steerwheelmotor_status(); _o->wire_status_steerwheelmotor_status = _e; }
  { auto _e = wire_status_truck_horizontal_angle(); _o->wire_status_truck_horizontal_angle = _e; }
  { auto _e = wire_status_truck_longitudinal_angle(); _o->wire_status_truck_longitudinal_angle = _e; }
  { auto _e = wire_status_retarder_torque_percent(); _o->wire_status_retarder_torque_percent = _e; }
  { auto _e = wire_status_vehicle_ctrl_mode(); _o->wire_status_vehicle_ctrl_mode = _e; }
  { auto _e = Wirectl_nTime(); _o->Wirectl_nTime = _e; }
  { auto _e = wire_status_steer_outrange_status(); _o->wire_status_steer_outrange_status = _e; }
  { auto _e = wire_status_steer_setzero_status(); _o->wire_status_steer_setzero_status = _e; }
  { auto _e = wire_status_steer_sequence_number(); _o->wire_status_steer_sequence_number = _e; }
  { auto _e = wire_status_steering_valve(); _o->wire_status_steering_valve = _e; }
  { auto _e = wire_status_gear_shift_lamp(); _o->wire_status_gear_shift_lamp = _e; }
  { auto _e = wire_status_hydraulic_oil_temp_high(); _o->wire_status_hydraulic_oil_temp_high = _e; }
  { auto _e = wire_status_engine_coolant_level_low(); _o->wire_status_engine_coolant_level_low = _e; }
  { auto _e = wire_status_engine_coolant_temperature_high(); _o->wire_status_engine_coolant_temperature_high = _e; }
  { auto _e = wire_status_eng_stop_fault_lamp(); _o->wire_status_eng_stop_fault_lamp = _e; }
  { auto _e = wire_status_eng_warning_fault_lamp(); _o->wire_status_eng_warning_fault_lamp = _e; }
  { auto _e = wire_status_drive_system_fault_lamp(); _o->wire_status_drive_system_fault_lamp = _e; }
  { auto _e = wire_status_brake_press_low(); _o->wire_status_brake_press_low = _e; }
  { auto _e = wire_status_streer_press_low(); _o->wire_status_streer_press_low = _e; }
  { auto _e = wire_status_eng_oil_pressure_low(); _o->wire_status_eng_oil_pressure_low = _e; }
  { auto _e = wire_status_steering_valve_fault(); _o->wire_status_steering_valve_fault = _e; }
}

inline flatbuffers::Offset<WireControlVehicleFault> WireControlVehicleFault::Pack(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVehicleFaultT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateWireControlVehicleFault(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<WireControlVehicleFault> CreateWireControlVehicleFault(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVehicleFaultT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const WireControlVehicleFaultT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _wire_status_inclinator_status = _o->wire_status_inclinator_status;
  auto _wire_status_ruler_status = _o->wire_status_ruler_status;
  auto _wire_status_robot_control_status = _o->wire_status_robot_control_status;
  auto _wire_status_throttle_fault_status = _o->wire_status_throttle_fault_status;
  auto _wire_status_electric_brake_fault_status = _o->wire_status_electric_brake_fault_status;
  auto _wire_status_mechanicle_brake_motor_error_num = _o->wire_status_mechanicle_brake_motor_error_num;
  auto _wire_status_steer_motor_error_num = _o->wire_status_steer_motor_error_num;
  auto _wire_status_engine_falut = _o->wire_status_engine_falut;
  auto _wire_status_transmission_falut = _o->wire_status_transmission_falut;
  auto _wire_status_ebs_falut = _o->wire_status_ebs_falut;
  auto _wire_status_eps_falut = _o->wire_status_eps_falut;
  auto _wire_status_air_filter_alarm = _o->wire_status_air_filter_alarm;
  auto _wire_status_steer_oil_filter_alarm = _o->wire_status_steer_oil_filter_alarm;
  auto _wire_status_left_light = _o->wire_status_left_light;
  auto _wire_status_right_light = _o->wire_status_right_light;
  auto _wire_status_low_beam = _o->wire_status_low_beam;
  auto _wire_status_high_beam = _o->wire_status_high_beam;
  auto _wire_status_rotate_alarm_light = _o->wire_status_rotate_alarm_light;
  auto _wire_status_air_horns = _o->wire_status_air_horns;
  auto _wire_status_front_fog_lamp = _o->wire_status_front_fog_lamp;
  auto _wire_status_front_work_lamp = _o->wire_status_front_work_lamp;
  auto _wire_status_side_lamp = _o->wire_status_side_lamp;
  auto _wire_status_positoin_lamp = _o->wire_status_positoin_lamp;
  auto _wire_status_wiper_motor_power = _o->wire_status_wiper_motor_power;
  auto _wire_status_ebs_power = _o->wire_status_ebs_power;
  auto _wire_status_pressure_sensor_power = _o->wire_status_pressure_sensor_power;
  auto _wire_status_rise_solenoid_savle_up = _o->wire_status_rise_solenoid_savle_up;
  auto _wire_status_rise_solenoid_savle_down = _o->wire_status_rise_solenoid_savle_down;
  auto _wire_status_manual_solenoid_savle = _o->wire_status_manual_solenoid_savle;
  auto _wire_status_rear_left_light = _o->wire_status_rear_left_light;
  auto _wire_status_rear_right_light = _o->wire_status_rear_right_light;
  auto _wire_status_rear_pos_light = _o->wire_status_rear_pos_light;
  auto _wire_status_brake_light = _o->wire_status_brake_light;
  auto _wire_status_reverse_light_horns = _o->wire_status_reverse_light_horns;
  auto _wire_status_rear_work = _o->wire_status_rear_work;
  auto _wire_status_heat_sink1 = _o->wire_status_heat_sink1;
  auto _wire_status_heat_sink2 = _o->wire_status_heat_sink2;
  auto _wire_status_diff_solenoid_savle = _o->wire_status_diff_solenoid_savle;
  auto _wire_status_dryer_power = _o->wire_status_dryer_power;
  auto _wire_status_inclinator_power = _o->wire_status_inclinator_power;
  auto _wire_status_cold_water_treasure_power = _o->wire_status_cold_water_treasure_power;
  auto _wire_status_exhaust_brake = _o->wire_status_exhaust_brake;
  auto _wire_status_error_level = _o->wire_status_error_level;
  auto _wire_status_urgent_brake = _o->wire_status_urgent_brake;
  auto _wire_status_engine_activation = _o->wire_status_engine_activation;
  auto _wire_status_hand_brake_activation = _o->wire_status_hand_brake_activation;
  auto _wire_status_ebs_activation = _o->wire_status_ebs_activation;
  auto _wire_status_retarder_activation = _o->wire_status_retarder_activation;
  auto _wire_status_transmission_activation = _o->wire_status_transmission_activation;
  auto _wire_status_eps_activation = _o->wire_status_eps_activation;
  auto _wire_status_lift_activation = _o->wire_status_lift_activation;
  auto _wire_status_pressure_sensor1 = _o->wire_status_pressure_sensor1;
  auto _wire_status_pressure_sensor2 = _o->wire_status_pressure_sensor2;
  auto _wire_status_oil_sensor = _o->wire_status_oil_sensor;
  auto _wire_status_zhongchuang_motor_speed = _o->wire_status_zhongchuang_motor_speed;
  auto _wire_status_steerwheelmotor_status = _o->wire_status_steerwheelmotor_status;
  auto _wire_status_truck_horizontal_angle = _o->wire_status_truck_horizontal_angle;
  auto _wire_status_truck_longitudinal_angle = _o->wire_status_truck_longitudinal_angle;
  auto _wire_status_retarder_torque_percent = _o->wire_status_retarder_torque_percent;
  auto _wire_status_vehicle_ctrl_mode = _o->wire_status_vehicle_ctrl_mode;
  auto _Wirectl_nTime = _o->Wirectl_nTime;
  auto _wire_status_steer_outrange_status = _o->wire_status_steer_outrange_status;
  auto _wire_status_steer_setzero_status = _o->wire_status_steer_setzero_status;
  auto _wire_status_steer_sequence_number = _o->wire_status_steer_sequence_number;
  auto _wire_status_steering_valve = _o->wire_status_steering_valve;
  auto _wire_status_gear_shift_lamp = _o->wire_status_gear_shift_lamp;
  auto _wire_status_hydraulic_oil_temp_high = _o->wire_status_hydraulic_oil_temp_high;
  auto _wire_status_engine_coolant_level_low = _o->wire_status_engine_coolant_level_low;
  auto _wire_status_engine_coolant_temperature_high = _o->wire_status_engine_coolant_temperature_high;
  auto _wire_status_eng_stop_fault_lamp = _o->wire_status_eng_stop_fault_lamp;
  auto _wire_status_eng_warning_fault_lamp = _o->wire_status_eng_warning_fault_lamp;
  auto _wire_status_drive_system_fault_lamp = _o->wire_status_drive_system_fault_lamp;
  auto _wire_status_brake_press_low = _o->wire_status_brake_press_low;
  auto _wire_status_streer_press_low = _o->wire_status_streer_press_low;
  auto _wire_status_eng_oil_pressure_low = _o->wire_status_eng_oil_pressure_low;
  auto _wire_status_steering_valve_fault = _o->wire_status_steering_valve_fault;
  return can::CreateWireControlVehicleFault(
      _fbb,
      _wire_status_inclinator_status,
      _wire_status_ruler_status,
      _wire_status_robot_control_status,
      _wire_status_throttle_fault_status,
      _wire_status_electric_brake_fault_status,
      _wire_status_mechanicle_brake_motor_error_num,
      _wire_status_steer_motor_error_num,
      _wire_status_engine_falut,
      _wire_status_transmission_falut,
      _wire_status_ebs_falut,
      _wire_status_eps_falut,
      _wire_status_air_filter_alarm,
      _wire_status_steer_oil_filter_alarm,
      _wire_status_left_light,
      _wire_status_right_light,
      _wire_status_low_beam,
      _wire_status_high_beam,
      _wire_status_rotate_alarm_light,
      _wire_status_air_horns,
      _wire_status_front_fog_lamp,
      _wire_status_front_work_lamp,
      _wire_status_side_lamp,
      _wire_status_positoin_lamp,
      _wire_status_wiper_motor_power,
      _wire_status_ebs_power,
      _wire_status_pressure_sensor_power,
      _wire_status_rise_solenoid_savle_up,
      _wire_status_rise_solenoid_savle_down,
      _wire_status_manual_solenoid_savle,
      _wire_status_rear_left_light,
      _wire_status_rear_right_light,
      _wire_status_rear_pos_light,
      _wire_status_brake_light,
      _wire_status_reverse_light_horns,
      _wire_status_rear_work,
      _wire_status_heat_sink1,
      _wire_status_heat_sink2,
      _wire_status_diff_solenoid_savle,
      _wire_status_dryer_power,
      _wire_status_inclinator_power,
      _wire_status_cold_water_treasure_power,
      _wire_status_exhaust_brake,
      _wire_status_error_level,
      _wire_status_urgent_brake,
      _wire_status_engine_activation,
      _wire_status_hand_brake_activation,
      _wire_status_ebs_activation,
      _wire_status_retarder_activation,
      _wire_status_transmission_activation,
      _wire_status_eps_activation,
      _wire_status_lift_activation,
      _wire_status_pressure_sensor1,
      _wire_status_pressure_sensor2,
      _wire_status_oil_sensor,
      _wire_status_zhongchuang_motor_speed,
      _wire_status_steerwheelmotor_status,
      _wire_status_truck_horizontal_angle,
      _wire_status_truck_longitudinal_angle,
      _wire_status_retarder_torque_percent,
      _wire_status_vehicle_ctrl_mode,
      _Wirectl_nTime,
      _wire_status_steer_outrange_status,
      _wire_status_steer_setzero_status,
      _wire_status_steer_sequence_number,
      _wire_status_steering_valve,
      _wire_status_gear_shift_lamp,
      _wire_status_hydraulic_oil_temp_high,
      _wire_status_engine_coolant_level_low,
      _wire_status_engine_coolant_temperature_high,
      _wire_status_eng_stop_fault_lamp,
      _wire_status_eng_warning_fault_lamp,
      _wire_status_drive_system_fault_lamp,
      _wire_status_brake_press_low,
      _wire_status_streer_press_low,
      _wire_status_eng_oil_pressure_low,
      _wire_status_steering_valve_fault);
}

inline WireControlVehicleMovationT *WireControlVehicleMovation::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<can::WireControlVehicleMovationT> _o = std::unique_ptr<can::WireControlVehicleMovationT>(new WireControlVehicleMovationT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void WireControlVehicleMovation::UnPackTo(WireControlVehicleMovationT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = wire_status_acc_actuate_percent(); _o->wire_status_acc_actuate_percent = _e; }
  { auto _e = wire_status_acc_manual_pedal(); _o->wire_status_acc_manual_pedal = _e; }
  { auto _e = wire_status_electric_brake_actuate_percent(); _o->wire_status_electric_brake_actuate_percent = _e; }
  { auto _e = wire_status_electric_brake_manual_pedal(); _o->wire_status_electric_brake_manual_pedal = _e; }
  { auto _e = wire_status_mechanical_brake_actuate_percent(); _o->wire_status_mechanical_brake_actuate_percent = _e; }
  { auto _e = wire_status_mechanical_brake_manual_pedal(); _o->wire_status_mechanical_brake_manual_pedal = _e; }
  { auto _e = wire_status_engine_torque_percent(); _o->wire_status_engine_torque_percent = _e; }
  { auto _e = wire_status_engine_speed(); _o->wire_status_engine_speed = _e; }
  { auto _e = wire_status_steering_wheel_angle(); _o->wire_status_steering_wheel_angle = _e; }
  { auto _e = wire_status_front_wheel_angle(); _o->wire_status_front_wheel_angle = _e; }
  { auto _e = wire_status_vehicle_speed(); _o->wire_status_vehicle_speed = _e; }
  { auto _e = wire_status_max_gear_shift(); _o->wire_status_max_gear_shift = _e; }
  { auto _e = wire_status_front_axle_aver_velocity_raw(); _o->wire_status_front_axle_aver_velocity_raw = _e; }
  { auto _e = wire_status_front_axle_left_wheel_relatively_velocity_raw(); _o->wire_status_front_axle_left_wheel_relatively_velocity_raw = _e; }
  { auto _e = wire_status_front_axle_right_wheel_relatively_velocity_raw(); _o->wire_status_front_axle_right_wheel_relatively_velocity_raw = _e; }
  { auto _e = wire_status_rear_axle_left_wheel_relatively_velocity_raw(); _o->wire_status_rear_axle_left_wheel_relatively_velocity_raw = _e; }
  { auto _e = wire_status_rear_axle_right_wheel_relatively_velocity_raw(); _o->wire_status_rear_axle_right_wheel_relatively_velocity_raw = _e; }
  { auto _e = wire_status_front_brake_percent(); _o->wire_status_front_brake_percent = _e; }
  { auto _e = wire_status_rear_brake_percent(); _o->wire_status_rear_brake_percent = _e; }
  { auto _e = wire_status_acc_cmd_feedback(); _o->wire_status_acc_cmd_feedback = _e; }
  { auto _e = wire_status_brake_cmd_feedback(); _o->wire_status_brake_cmd_feedback = _e; }
}

inline flatbuffers::Offset<WireControlVehicleMovation> WireControlVehicleMovation::Pack(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVehicleMovationT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateWireControlVehicleMovation(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<WireControlVehicleMovation> CreateWireControlVehicleMovation(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVehicleMovationT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const WireControlVehicleMovationT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _wire_status_acc_actuate_percent = _o->wire_status_acc_actuate_percent;
  auto _wire_status_acc_manual_pedal = _o->wire_status_acc_manual_pedal;
  auto _wire_status_electric_brake_actuate_percent = _o->wire_status_electric_brake_actuate_percent;
  auto _wire_status_electric_brake_manual_pedal = _o->wire_status_electric_brake_manual_pedal;
  auto _wire_status_mechanical_brake_actuate_percent = _o->wire_status_mechanical_brake_actuate_percent;
  auto _wire_status_mechanical_brake_manual_pedal = _o->wire_status_mechanical_brake_manual_pedal;
  auto _wire_status_engine_torque_percent = _o->wire_status_engine_torque_percent;
  auto _wire_status_engine_speed = _o->wire_status_engine_speed;
  auto _wire_status_steering_wheel_angle = _o->wire_status_steering_wheel_angle;
  auto _wire_status_front_wheel_angle = _o->wire_status_front_wheel_angle;
  auto _wire_status_vehicle_speed = _o->wire_status_vehicle_speed;
  auto _wire_status_max_gear_shift = _o->wire_status_max_gear_shift;
  auto _wire_status_front_axle_aver_velocity_raw = _o->wire_status_front_axle_aver_velocity_raw;
  auto _wire_status_front_axle_left_wheel_relatively_velocity_raw = _o->wire_status_front_axle_left_wheel_relatively_velocity_raw;
  auto _wire_status_front_axle_right_wheel_relatively_velocity_raw = _o->wire_status_front_axle_right_wheel_relatively_velocity_raw;
  auto _wire_status_rear_axle_left_wheel_relatively_velocity_raw = _o->wire_status_rear_axle_left_wheel_relatively_velocity_raw;
  auto _wire_status_rear_axle_right_wheel_relatively_velocity_raw = _o->wire_status_rear_axle_right_wheel_relatively_velocity_raw;
  auto _wire_status_front_brake_percent = _o->wire_status_front_brake_percent;
  auto _wire_status_rear_brake_percent = _o->wire_status_rear_brake_percent;
  auto _wire_status_acc_cmd_feedback = _o->wire_status_acc_cmd_feedback;
  auto _wire_status_brake_cmd_feedback = _o->wire_status_brake_cmd_feedback;
  return can::CreateWireControlVehicleMovation(
      _fbb,
      _wire_status_acc_actuate_percent,
      _wire_status_acc_manual_pedal,
      _wire_status_electric_brake_actuate_percent,
      _wire_status_electric_brake_manual_pedal,
      _wire_status_mechanical_brake_actuate_percent,
      _wire_status_mechanical_brake_manual_pedal,
      _wire_status_engine_torque_percent,
      _wire_status_engine_speed,
      _wire_status_steering_wheel_angle,
      _wire_status_front_wheel_angle,
      _wire_status_vehicle_speed,
      _wire_status_max_gear_shift,
      _wire_status_front_axle_aver_velocity_raw,
      _wire_status_front_axle_left_wheel_relatively_velocity_raw,
      _wire_status_front_axle_right_wheel_relatively_velocity_raw,
      _wire_status_rear_axle_left_wheel_relatively_velocity_raw,
      _wire_status_rear_axle_right_wheel_relatively_velocity_raw,
      _wire_status_front_brake_percent,
      _wire_status_rear_brake_percent,
      _wire_status_acc_cmd_feedback,
      _wire_status_brake_cmd_feedback);
}

inline WireControlVehicleStatusT *WireControlVehicleStatus::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<can::WireControlVehicleStatusT> _o = std::unique_ptr<can::WireControlVehicleStatusT>(new WireControlVehicleStatusT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void WireControlVehicleStatus::UnPackTo(WireControlVehicleStatusT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = wire_status_parking_status(); _o->wire_status_parking_status = _e; }
  { auto _e = wire_status_drive_mode_status(); _o->wire_status_drive_mode_status = _e; }
  { auto _e = wire_status_lift_status(); _o->wire_status_lift_status = _e; }
  { auto _e = wire_status_vehicle_load(); _o->wire_status_vehicle_load = _e; }
  { auto _e = wire_status_parking_long_status(); _o->wire_status_parking_long_status = _e; }
  { auto _e = wire_status_gear_shift(); _o->wire_status_gear_shift = _e; }
  { auto _e = wire_status_truck_lift_anle(); _o->wire_status_truck_lift_anle = _e; }
  { auto _e = wire_status_battery_voltage(); _o->wire_status_battery_voltage = _e; }
  { auto _e = wire_status_fuel_level(); _o->wire_status_fuel_level = _e; }
  { auto _e = wire_status_emergency_brake(); _o->wire_status_emergency_brake = _e; }
  { auto _e = wire_status_steering_valve_current_operation_state(); _o->wire_status_steering_valve_current_operation_state = _e; }
  { auto _e = wire_status_engine_coolant_temperature(); _o->wire_status_engine_coolant_temperature = _e; }
  { auto _e = wire_status_engine_oil_pressure(); _o->wire_status_engine_oil_pressure = _e; }
  { auto _e = wire_status_truck_type(); _o->wire_status_truck_type = _e; }
  { auto _e = wire_status_truck_id(); _o->wire_status_truck_id = _e; }
  { auto _e = wire_status_device_number(); _o->wire_status_device_number = _e; }
  { auto _e = wire_status_real_pay_load(); _o->wire_status_real_pay_load = _e; }
}

inline flatbuffers::Offset<WireControlVehicleStatus> WireControlVehicleStatus::Pack(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVehicleStatusT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateWireControlVehicleStatus(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<WireControlVehicleStatus> CreateWireControlVehicleStatus(flatbuffers::FlatBufferBuilder &_fbb, const WireControlVehicleStatusT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const WireControlVehicleStatusT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _wire_status_parking_status = _o->wire_status_parking_status;
  auto _wire_status_drive_mode_status = _o->wire_status_drive_mode_status;
  auto _wire_status_lift_status = _o->wire_status_lift_status;
  auto _wire_status_vehicle_load = _o->wire_status_vehicle_load;
  auto _wire_status_parking_long_status = _o->wire_status_parking_long_status;
  auto _wire_status_gear_shift = _o->wire_status_gear_shift;
  auto _wire_status_truck_lift_anle = _o->wire_status_truck_lift_anle;
  auto _wire_status_battery_voltage = _o->wire_status_battery_voltage;
  auto _wire_status_fuel_level = _o->wire_status_fuel_level;
  auto _wire_status_emergency_brake = _o->wire_status_emergency_brake;
  auto _wire_status_steering_valve_current_operation_state = _o->wire_status_steering_valve_current_operation_state;
  auto _wire_status_engine_coolant_temperature = _o->wire_status_engine_coolant_temperature;
  auto _wire_status_engine_oil_pressure = _o->wire_status_engine_oil_pressure;
  auto _wire_status_truck_type = _o->wire_status_truck_type;
  auto _wire_status_truck_id = _o->wire_status_truck_id;
  auto _wire_status_device_number = _o->wire_status_device_number;
  auto _wire_status_real_pay_load = _o->wire_status_real_pay_load;
  return can::CreateWireControlVehicleStatus(
      _fbb,
      _wire_status_parking_status,
      _wire_status_drive_mode_status,
      _wire_status_lift_status,
      _wire_status_vehicle_load,
      _wire_status_parking_long_status,
      _wire_status_gear_shift,
      _wire_status_truck_lift_anle,
      _wire_status_battery_voltage,
      _wire_status_fuel_level,
      _wire_status_emergency_brake,
      _wire_status_steering_valve_current_operation_state,
      _wire_status_engine_coolant_temperature,
      _wire_status_engine_oil_pressure,
      _wire_status_truck_type,
      _wire_status_truck_id,
      _wire_status_device_number,
      _wire_status_real_pay_load);
}

inline MsgVcuVersionT *MsgVcuVersion::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<can::MsgVcuVersionT> _o = std::unique_ptr<can::MsgVcuVersionT>(new MsgVcuVersionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MsgVcuVersion::UnPackTo(MsgVcuVersionT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = wire_vcu_func_version(); _o->wire_vcu_func_version = _e; }
  { auto _e = wire_vcu_main_version(); _o->wire_vcu_main_version = _e; }
  { auto _e = wire_vcu_sub_version(); _o->wire_vcu_sub_version = _e; }
}

inline flatbuffers::Offset<MsgVcuVersion> MsgVcuVersion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MsgVcuVersionT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMsgVcuVersion(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MsgVcuVersion> CreateMsgVcuVersion(flatbuffers::FlatBufferBuilder &_fbb, const MsgVcuVersionT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MsgVcuVersionT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _wire_vcu_func_version = _o->wire_vcu_func_version;
  auto _wire_vcu_main_version = _o->wire_vcu_main_version;
  auto _wire_vcu_sub_version = _o->wire_vcu_sub_version;
  return can::CreateMsgVcuVersion(
      _fbb,
      _wire_vcu_func_version,
      _wire_vcu_main_version,
      _wire_vcu_sub_version);
}

inline const flatbuffers::TypeTable *CanAboutDevStatusTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 }
  };
  static const char * const names[] = {
    "wire_can_offline_flag",
    "tx2_can_offline_flag",
    "cgu_can_offline_flag",
    "front_lidar_offline_flag",
    "front_left_radar_offline_flag",
    "front_middle_radar_offline_flag",
    "front_right_radar_offline_flag",
    "rear_lidar_offline_flag",
    "rear_radar_offline_flag",
    "left_lidar_offline_flag",
    "right_lidar_offline_flag"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 11, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *WireControlVcuVersionTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 }
  };
  static const char * const names[] = {
    "wire_vcu_func_version",
    "wire_vcu_main_version",
    "wire_vcu_sub_version"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *WireControlVehicleFaultTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 }
  };
  static const char * const names[] = {
    "wire_status_inclinator_status",
    "wire_status_ruler_status",
    "wire_status_robot_control_status",
    "wire_status_throttle_fault_status",
    "wire_status_electric_brake_fault_status",
    "wire_status_mechanicle_brake_motor_error_num",
    "wire_status_steer_motor_error_num",
    "wire_status_engine_falut",
    "wire_status_transmission_falut",
    "wire_status_ebs_falut",
    "wire_status_eps_falut",
    "wire_status_air_filter_alarm",
    "wire_status_steer_oil_filter_alarm",
    "wire_status_left_light",
    "wire_status_right_light",
    "wire_status_low_beam",
    "wire_status_high_beam",
    "wire_status_rotate_alarm_light",
    "wire_status_air_horns",
    "wire_status_front_fog_lamp",
    "wire_status_front_work_lamp",
    "wire_status_side_lamp",
    "wire_status_positoin_lamp",
    "wire_status_wiper_motor_power",
    "wire_status_ebs_power",
    "wire_status_pressure_sensor_power",
    "wire_status_rise_solenoid_savle_up",
    "wire_status_rise_solenoid_savle_down",
    "wire_status_manual_solenoid_savle",
    "wire_status_rear_left_light",
    "wire_status_rear_right_light",
    "wire_status_rear_pos_light",
    "wire_status_brake_light",
    "wire_status_reverse_light_horns",
    "wire_status_rear_work",
    "wire_status_heat_sink1",
    "wire_status_heat_sink2",
    "wire_status_diff_solenoid_savle",
    "wire_status_dryer_power",
    "wire_status_inclinator_power",
    "wire_status_cold_water_treasure_power",
    "wire_status_exhaust_brake",
    "wire_status_error_level",
    "wire_status_urgent_brake",
    "wire_status_engine_activation",
    "wire_status_hand_brake_activation",
    "wire_status_ebs_activation",
    "wire_status_retarder_activation",
    "wire_status_transmission_activation",
    "wire_status_eps_activation",
    "wire_status_lift_activation",
    "wire_status_pressure_sensor1",
    "wire_status_pressure_sensor2",
    "wire_status_oil_sensor",
    "wire_status_zhongchuang_motor_speed",
    "wire_status_steerwheelmotor_status",
    "wire_status_truck_horizontal_angle",
    "wire_status_truck_longitudinal_angle",
    "wire_status_retarder_torque_percent",
    "wire_status_vehicle_ctrl_mode",
    "Wirectl_nTime",
    "wire_status_steer_outrange_status",
    "wire_status_steer_setzero_status",
    "wire_status_steer_sequence_number",
    "wire_status_steering_valve",
    "wire_status_gear_shift_lamp",
    "wire_status_hydraulic_oil_temp_high",
    "wire_status_engine_coolant_level_low",
    "wire_status_engine_coolant_temperature_high",
    "wire_status_eng_stop_fault_lamp",
    "wire_status_eng_warning_fault_lamp",
    "wire_status_drive_system_fault_lamp",
    "wire_status_brake_press_low",
    "wire_status_streer_press_low",
    "wire_status_eng_oil_pressure_low",
    "wire_status_steering_valve_fault"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 76, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *WireControlVehicleMovationTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 }
  };
  static const char * const names[] = {
    "wire_status_acc_actuate_percent",
    "wire_status_acc_manual_pedal",
    "wire_status_electric_brake_actuate_percent",
    "wire_status_electric_brake_manual_pedal",
    "wire_status_mechanical_brake_actuate_percent",
    "wire_status_mechanical_brake_manual_pedal",
    "wire_status_engine_torque_percent",
    "wire_status_engine_speed",
    "wire_status_steering_wheel_angle",
    "wire_status_front_wheel_angle",
    "wire_status_vehicle_speed",
    "wire_status_max_gear_shift",
    "wire_status_front_axle_aver_velocity_raw",
    "wire_status_front_axle_left_wheel_relatively_velocity_raw",
    "wire_status_front_axle_right_wheel_relatively_velocity_raw",
    "wire_status_rear_axle_left_wheel_relatively_velocity_raw",
    "wire_status_rear_axle_right_wheel_relatively_velocity_raw",
    "wire_status_front_brake_percent",
    "wire_status_rear_brake_percent",
    "wire_status_acc_cmd_feedback",
    "wire_status_brake_cmd_feedback"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 21, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *WireControlVehicleStatusTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 }
  };
  static const char * const names[] = {
    "wire_status_parking_status",
    "wire_status_drive_mode_status",
    "wire_status_lift_status",
    "wire_status_vehicle_load",
    "wire_status_parking_long_status",
    "wire_status_gear_shift",
    "wire_status_truck_lift_anle",
    "wire_status_battery_voltage",
    "wire_status_fuel_level",
    "wire_status_emergency_brake",
    "wire_status_steering_valve_current_operation_state",
    "wire_status_engine_coolant_temperature",
    "wire_status_engine_oil_pressure",
    "wire_status_truck_type",
    "wire_status_truck_id",
    "wire_status_device_number",
    "wire_status_real_pay_load"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 17, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *MsgVcuVersionTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 }
  };
  static const char * const names[] = {
    "wire_vcu_func_version",
    "wire_vcu_main_version",
    "wire_vcu_sub_version"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const can::CanAboutDevStatus *GetCanAboutDevStatus(const void *buf) {
  return flatbuffers::GetRoot<can::CanAboutDevStatus>(buf);
}

inline const can::CanAboutDevStatus *GetSizePrefixedCanAboutDevStatus(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<can::CanAboutDevStatus>(buf);
}

inline CanAboutDevStatus *GetMutableCanAboutDevStatus(void *buf) {
  return flatbuffers::GetMutableRoot<CanAboutDevStatus>(buf);
}

inline const char *CanAboutDevStatusIdentifier() {
  return "CDSO";
}

inline bool CanAboutDevStatusBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, CanAboutDevStatusIdentifier());
}

inline bool VerifyCanAboutDevStatusBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<can::CanAboutDevStatus>(CanAboutDevStatusIdentifier());
}

inline bool VerifySizePrefixedCanAboutDevStatusBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<can::CanAboutDevStatus>(CanAboutDevStatusIdentifier());
}

inline void FinishCanAboutDevStatusBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<can::CanAboutDevStatus> root) {
  fbb.Finish(root, CanAboutDevStatusIdentifier());
}

inline void FinishSizePrefixedCanAboutDevStatusBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<can::CanAboutDevStatus> root) {
  fbb.FinishSizePrefixed(root, CanAboutDevStatusIdentifier());
}

inline std::unique_ptr<can::CanAboutDevStatusT> UnPackCanAboutDevStatus(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<can::CanAboutDevStatusT>(GetCanAboutDevStatus(buf)->UnPack(res));
}

inline std::unique_ptr<can::CanAboutDevStatusT> UnPackSizePrefixedCanAboutDevStatus(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<can::CanAboutDevStatusT>(GetSizePrefixedCanAboutDevStatus(buf)->UnPack(res));
}

}  // namespace can

#endif  // FLATBUFFERS_GENERATED_CANINFO_CAN_H_
