// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GPSINFO_GPS_H_
#define FLATBUFFERS_GENERATED_GPSINFO_GPS_H_

#include "flatbuffers/flatbuffers.h"

namespace gps {

struct GpsImuInfo;
struct GpsImuInfoBuilder;
struct GpsImuInfoT;

struct GpsStatus;
struct GpsStatusBuilder;
struct GpsStatusT;

bool operator==(const GpsImuInfoT &lhs, const GpsImuInfoT &rhs);
bool operator!=(const GpsImuInfoT &lhs, const GpsImuInfoT &rhs);
bool operator==(const GpsStatusT &lhs, const GpsStatusT &rhs);
bool operator!=(const GpsStatusT &lhs, const GpsStatusT &rhs);

inline const flatbuffers::TypeTable *GpsImuInfoTypeTable();

inline const flatbuffers::TypeTable *GpsStatusTypeTable();

struct GpsImuInfoT : public flatbuffers::NativeTable {
  typedef GpsImuInfo TableType;
  int32_t gps_rtk_status;
  double gps_lat;
  double gps_lng;
  float gps_heading;
  float gps_ve;
  float gps_vn;
  float gps_speed;
  float gps_height;
  float imu_acc_y;
  float imu_acc_x;
  float imu_yaw_z;
  int32_t gps_satellite_front;
  int32_t gps_satellite_rear;
  float gps_yaw;
  float gps_roll;
  float gps_pitch;
  int32_t gps_diff_flag;
  float gnss_horizontal_speed;
  uint64_t gps_utc_time;
  uint8_t flag;
  float speedEast;
  float speedNorth;
  float maxSpeed;
  float wheelAngle;
  GpsImuInfoT()
      : gps_rtk_status(0),
        gps_lat(0.0),
        gps_lng(0.0),
        gps_heading(0.0f),
        gps_ve(500.0f),
        gps_vn(500.0f),
        gps_speed(0.0f),
        gps_height(0.0f),
        imu_acc_y(0.0f),
        imu_acc_x(0.0f),
        imu_yaw_z(0.0f),
        gps_satellite_front(0),
        gps_satellite_rear(0),
        gps_yaw(0.0f),
        gps_roll(0.0f),
        gps_pitch(0.0f),
        gps_diff_flag(0),
        gnss_horizontal_speed(0.0f),
        gps_utc_time(0),
        flag(3),
        speedEast(0.0f),
        speedNorth(0.0f),
        maxSpeed(0.0f),
        wheelAngle(0.0f) {
  }
};

inline bool operator==(const GpsImuInfoT &lhs, const GpsImuInfoT &rhs) {
  return
      (lhs.gps_rtk_status == rhs.gps_rtk_status) &&
      (lhs.gps_lat == rhs.gps_lat) &&
      (lhs.gps_lng == rhs.gps_lng) &&
      (lhs.gps_heading == rhs.gps_heading) &&
      (lhs.gps_ve == rhs.gps_ve) &&
      (lhs.gps_vn == rhs.gps_vn) &&
      (lhs.gps_speed == rhs.gps_speed) &&
      (lhs.gps_height == rhs.gps_height) &&
      (lhs.imu_acc_y == rhs.imu_acc_y) &&
      (lhs.imu_acc_x == rhs.imu_acc_x) &&
      (lhs.imu_yaw_z == rhs.imu_yaw_z) &&
      (lhs.gps_satellite_front == rhs.gps_satellite_front) &&
      (lhs.gps_satellite_rear == rhs.gps_satellite_rear) &&
      (lhs.gps_yaw == rhs.gps_yaw) &&
      (lhs.gps_roll == rhs.gps_roll) &&
      (lhs.gps_pitch == rhs.gps_pitch) &&
      (lhs.gps_diff_flag == rhs.gps_diff_flag) &&
      (lhs.gnss_horizontal_speed == rhs.gnss_horizontal_speed) &&
      (lhs.gps_utc_time == rhs.gps_utc_time) &&
      (lhs.flag == rhs.flag) &&
      (lhs.speedEast == rhs.speedEast) &&
      (lhs.speedNorth == rhs.speedNorth) &&
      (lhs.maxSpeed == rhs.maxSpeed) &&
      (lhs.wheelAngle == rhs.wheelAngle);
}

inline bool operator!=(const GpsImuInfoT &lhs, const GpsImuInfoT &rhs) {
    return !(lhs == rhs);
}


struct GpsImuInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GpsImuInfoT NativeTableType;
  typedef GpsImuInfoBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GpsImuInfoTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GPS_RTK_STATUS = 4,
    VT_GPS_LAT = 6,
    VT_GPS_LNG = 8,
    VT_GPS_HEADING = 10,
    VT_GPS_VE = 12,
    VT_GPS_VN = 14,
    VT_GPS_SPEED = 16,
    VT_GPS_HEIGHT = 18,
    VT_IMU_ACC_Y = 20,
    VT_IMU_ACC_X = 22,
    VT_IMU_YAW_Z = 24,
    VT_GPS_SATELLITE_FRONT = 26,
    VT_GPS_SATELLITE_REAR = 28,
    VT_GPS_YAW = 30,
    VT_GPS_ROLL = 32,
    VT_GPS_PITCH = 34,
    VT_GPS_DIFF_FLAG = 36,
    VT_GNSS_HORIZONTAL_SPEED = 38,
    VT_GPS_UTC_TIME = 40,
    VT_FLAG = 42,
    VT_SPEEDEAST = 44,
    VT_SPEEDNORTH = 46,
    VT_MAXSPEED = 48,
    VT_WHEELANGLE = 50
  };
  int32_t gps_rtk_status() const {
    return GetField<int32_t>(VT_GPS_RTK_STATUS, 0);
  }
  bool mutate_gps_rtk_status(int32_t _gps_rtk_status) {
    return SetField<int32_t>(VT_GPS_RTK_STATUS, _gps_rtk_status, 0);
  }
  double gps_lat() const {
    return GetField<double>(VT_GPS_LAT, 0.0);
  }
  bool mutate_gps_lat(double _gps_lat) {
    return SetField<double>(VT_GPS_LAT, _gps_lat, 0.0);
  }
  double gps_lng() const {
    return GetField<double>(VT_GPS_LNG, 0.0);
  }
  bool mutate_gps_lng(double _gps_lng) {
    return SetField<double>(VT_GPS_LNG, _gps_lng, 0.0);
  }
  float gps_heading() const {
    return GetField<float>(VT_GPS_HEADING, 0.0f);
  }
  bool mutate_gps_heading(float _gps_heading) {
    return SetField<float>(VT_GPS_HEADING, _gps_heading, 0.0f);
  }
  float gps_ve() const {
    return GetField<float>(VT_GPS_VE, 500.0f);
  }
  bool mutate_gps_ve(float _gps_ve) {
    return SetField<float>(VT_GPS_VE, _gps_ve, 500.0f);
  }
  float gps_vn() const {
    return GetField<float>(VT_GPS_VN, 500.0f);
  }
  bool mutate_gps_vn(float _gps_vn) {
    return SetField<float>(VT_GPS_VN, _gps_vn, 500.0f);
  }
  float gps_speed() const {
    return GetField<float>(VT_GPS_SPEED, 0.0f);
  }
  bool mutate_gps_speed(float _gps_speed) {
    return SetField<float>(VT_GPS_SPEED, _gps_speed, 0.0f);
  }
  float gps_height() const {
    return GetField<float>(VT_GPS_HEIGHT, 0.0f);
  }
  bool mutate_gps_height(float _gps_height) {
    return SetField<float>(VT_GPS_HEIGHT, _gps_height, 0.0f);
  }
  float imu_acc_y() const {
    return GetField<float>(VT_IMU_ACC_Y, 0.0f);
  }
  bool mutate_imu_acc_y(float _imu_acc_y) {
    return SetField<float>(VT_IMU_ACC_Y, _imu_acc_y, 0.0f);
  }
  float imu_acc_x() const {
    return GetField<float>(VT_IMU_ACC_X, 0.0f);
  }
  bool mutate_imu_acc_x(float _imu_acc_x) {
    return SetField<float>(VT_IMU_ACC_X, _imu_acc_x, 0.0f);
  }
  float imu_yaw_z() const {
    return GetField<float>(VT_IMU_YAW_Z, 0.0f);
  }
  bool mutate_imu_yaw_z(float _imu_yaw_z) {
    return SetField<float>(VT_IMU_YAW_Z, _imu_yaw_z, 0.0f);
  }
  int32_t gps_satellite_front() const {
    return GetField<int32_t>(VT_GPS_SATELLITE_FRONT, 0);
  }
  bool mutate_gps_satellite_front(int32_t _gps_satellite_front) {
    return SetField<int32_t>(VT_GPS_SATELLITE_FRONT, _gps_satellite_front, 0);
  }
  int32_t gps_satellite_rear() const {
    return GetField<int32_t>(VT_GPS_SATELLITE_REAR, 0);
  }
  bool mutate_gps_satellite_rear(int32_t _gps_satellite_rear) {
    return SetField<int32_t>(VT_GPS_SATELLITE_REAR, _gps_satellite_rear, 0);
  }
  float gps_yaw() const {
    return GetField<float>(VT_GPS_YAW, 0.0f);
  }
  bool mutate_gps_yaw(float _gps_yaw) {
    return SetField<float>(VT_GPS_YAW, _gps_yaw, 0.0f);
  }
  float gps_roll() const {
    return GetField<float>(VT_GPS_ROLL, 0.0f);
  }
  bool mutate_gps_roll(float _gps_roll) {
    return SetField<float>(VT_GPS_ROLL, _gps_roll, 0.0f);
  }
  float gps_pitch() const {
    return GetField<float>(VT_GPS_PITCH, 0.0f);
  }
  bool mutate_gps_pitch(float _gps_pitch) {
    return SetField<float>(VT_GPS_PITCH, _gps_pitch, 0.0f);
  }
  int32_t gps_diff_flag() const {
    return GetField<int32_t>(VT_GPS_DIFF_FLAG, 0);
  }
  bool mutate_gps_diff_flag(int32_t _gps_diff_flag) {
    return SetField<int32_t>(VT_GPS_DIFF_FLAG, _gps_diff_flag, 0);
  }
  float gnss_horizontal_speed() const {
    return GetField<float>(VT_GNSS_HORIZONTAL_SPEED, 0.0f);
  }
  bool mutate_gnss_horizontal_speed(float _gnss_horizontal_speed) {
    return SetField<float>(VT_GNSS_HORIZONTAL_SPEED, _gnss_horizontal_speed, 0.0f);
  }
  uint64_t gps_utc_time() const {
    return GetField<uint64_t>(VT_GPS_UTC_TIME, 0);
  }
  bool mutate_gps_utc_time(uint64_t _gps_utc_time) {
    return SetField<uint64_t>(VT_GPS_UTC_TIME, _gps_utc_time, 0);
  }
  uint8_t flag() const {
    return GetField<uint8_t>(VT_FLAG, 3);
  }
  bool mutate_flag(uint8_t _flag) {
    return SetField<uint8_t>(VT_FLAG, _flag, 3);
  }
  float speedEast() const {
    return GetField<float>(VT_SPEEDEAST, 0.0f);
  }
  bool mutate_speedEast(float _speedEast) {
    return SetField<float>(VT_SPEEDEAST, _speedEast, 0.0f);
  }
  float speedNorth() const {
    return GetField<float>(VT_SPEEDNORTH, 0.0f);
  }
  bool mutate_speedNorth(float _speedNorth) {
    return SetField<float>(VT_SPEEDNORTH, _speedNorth, 0.0f);
  }
  float maxSpeed() const {
    return GetField<float>(VT_MAXSPEED, 0.0f);
  }
  bool mutate_maxSpeed(float _maxSpeed) {
    return SetField<float>(VT_MAXSPEED, _maxSpeed, 0.0f);
  }
  float wheelAngle() const {
    return GetField<float>(VT_WHEELANGLE, 0.0f);
  }
  bool mutate_wheelAngle(float _wheelAngle) {
    return SetField<float>(VT_WHEELANGLE, _wheelAngle, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_GPS_RTK_STATUS) &&
           VerifyField<double>(verifier, VT_GPS_LAT) &&
           VerifyField<double>(verifier, VT_GPS_LNG) &&
           VerifyField<float>(verifier, VT_GPS_HEADING) &&
           VerifyField<float>(verifier, VT_GPS_VE) &&
           VerifyField<float>(verifier, VT_GPS_VN) &&
           VerifyField<float>(verifier, VT_GPS_SPEED) &&
           VerifyField<float>(verifier, VT_GPS_HEIGHT) &&
           VerifyField<float>(verifier, VT_IMU_ACC_Y) &&
           VerifyField<float>(verifier, VT_IMU_ACC_X) &&
           VerifyField<float>(verifier, VT_IMU_YAW_Z) &&
           VerifyField<int32_t>(verifier, VT_GPS_SATELLITE_FRONT) &&
           VerifyField<int32_t>(verifier, VT_GPS_SATELLITE_REAR) &&
           VerifyField<float>(verifier, VT_GPS_YAW) &&
           VerifyField<float>(verifier, VT_GPS_ROLL) &&
           VerifyField<float>(verifier, VT_GPS_PITCH) &&
           VerifyField<int32_t>(verifier, VT_GPS_DIFF_FLAG) &&
           VerifyField<float>(verifier, VT_GNSS_HORIZONTAL_SPEED) &&
           VerifyField<uint64_t>(verifier, VT_GPS_UTC_TIME) &&
           VerifyField<uint8_t>(verifier, VT_FLAG) &&
           VerifyField<float>(verifier, VT_SPEEDEAST) &&
           VerifyField<float>(verifier, VT_SPEEDNORTH) &&
           VerifyField<float>(verifier, VT_MAXSPEED) &&
           VerifyField<float>(verifier, VT_WHEELANGLE) &&
           verifier.EndTable();
  }
  GpsImuInfoT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GpsImuInfoT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<GpsImuInfo> Pack(flatbuffers::FlatBufferBuilder &_fbb, const GpsImuInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GpsImuInfoBuilder {
  typedef GpsImuInfo Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gps_rtk_status(int32_t gps_rtk_status) {
    fbb_.AddElement<int32_t>(GpsImuInfo::VT_GPS_RTK_STATUS, gps_rtk_status, 0);
  }
  void add_gps_lat(double gps_lat) {
    fbb_.AddElement<double>(GpsImuInfo::VT_GPS_LAT, gps_lat, 0.0);
  }
  void add_gps_lng(double gps_lng) {
    fbb_.AddElement<double>(GpsImuInfo::VT_GPS_LNG, gps_lng, 0.0);
  }
  void add_gps_heading(float gps_heading) {
    fbb_.AddElement<float>(GpsImuInfo::VT_GPS_HEADING, gps_heading, 0.0f);
  }
  void add_gps_ve(float gps_ve) {
    fbb_.AddElement<float>(GpsImuInfo::VT_GPS_VE, gps_ve, 500.0f);
  }
  void add_gps_vn(float gps_vn) {
    fbb_.AddElement<float>(GpsImuInfo::VT_GPS_VN, gps_vn, 500.0f);
  }
  void add_gps_speed(float gps_speed) {
    fbb_.AddElement<float>(GpsImuInfo::VT_GPS_SPEED, gps_speed, 0.0f);
  }
  void add_gps_height(float gps_height) {
    fbb_.AddElement<float>(GpsImuInfo::VT_GPS_HEIGHT, gps_height, 0.0f);
  }
  void add_imu_acc_y(float imu_acc_y) {
    fbb_.AddElement<float>(GpsImuInfo::VT_IMU_ACC_Y, imu_acc_y, 0.0f);
  }
  void add_imu_acc_x(float imu_acc_x) {
    fbb_.AddElement<float>(GpsImuInfo::VT_IMU_ACC_X, imu_acc_x, 0.0f);
  }
  void add_imu_yaw_z(float imu_yaw_z) {
    fbb_.AddElement<float>(GpsImuInfo::VT_IMU_YAW_Z, imu_yaw_z, 0.0f);
  }
  void add_gps_satellite_front(int32_t gps_satellite_front) {
    fbb_.AddElement<int32_t>(GpsImuInfo::VT_GPS_SATELLITE_FRONT, gps_satellite_front, 0);
  }
  void add_gps_satellite_rear(int32_t gps_satellite_rear) {
    fbb_.AddElement<int32_t>(GpsImuInfo::VT_GPS_SATELLITE_REAR, gps_satellite_rear, 0);
  }
  void add_gps_yaw(float gps_yaw) {
    fbb_.AddElement<float>(GpsImuInfo::VT_GPS_YAW, gps_yaw, 0.0f);
  }
  void add_gps_roll(float gps_roll) {
    fbb_.AddElement<float>(GpsImuInfo::VT_GPS_ROLL, gps_roll, 0.0f);
  }
  void add_gps_pitch(float gps_pitch) {
    fbb_.AddElement<float>(GpsImuInfo::VT_GPS_PITCH, gps_pitch, 0.0f);
  }
  void add_gps_diff_flag(int32_t gps_diff_flag) {
    fbb_.AddElement<int32_t>(GpsImuInfo::VT_GPS_DIFF_FLAG, gps_diff_flag, 0);
  }
  void add_gnss_horizontal_speed(float gnss_horizontal_speed) {
    fbb_.AddElement<float>(GpsImuInfo::VT_GNSS_HORIZONTAL_SPEED, gnss_horizontal_speed, 0.0f);
  }
  void add_gps_utc_time(uint64_t gps_utc_time) {
    fbb_.AddElement<uint64_t>(GpsImuInfo::VT_GPS_UTC_TIME, gps_utc_time, 0);
  }
  void add_flag(uint8_t flag) {
    fbb_.AddElement<uint8_t>(GpsImuInfo::VT_FLAG, flag, 3);
  }
  void add_speedEast(float speedEast) {
    fbb_.AddElement<float>(GpsImuInfo::VT_SPEEDEAST, speedEast, 0.0f);
  }
  void add_speedNorth(float speedNorth) {
    fbb_.AddElement<float>(GpsImuInfo::VT_SPEEDNORTH, speedNorth, 0.0f);
  }
  void add_maxSpeed(float maxSpeed) {
    fbb_.AddElement<float>(GpsImuInfo::VT_MAXSPEED, maxSpeed, 0.0f);
  }
  void add_wheelAngle(float wheelAngle) {
    fbb_.AddElement<float>(GpsImuInfo::VT_WHEELANGLE, wheelAngle, 0.0f);
  }
  explicit GpsImuInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GpsImuInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GpsImuInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<GpsImuInfo> CreateGpsImuInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t gps_rtk_status = 0,
    double gps_lat = 0.0,
    double gps_lng = 0.0,
    float gps_heading = 0.0f,
    float gps_ve = 500.0f,
    float gps_vn = 500.0f,
    float gps_speed = 0.0f,
    float gps_height = 0.0f,
    float imu_acc_y = 0.0f,
    float imu_acc_x = 0.0f,
    float imu_yaw_z = 0.0f,
    int32_t gps_satellite_front = 0,
    int32_t gps_satellite_rear = 0,
    float gps_yaw = 0.0f,
    float gps_roll = 0.0f,
    float gps_pitch = 0.0f,
    int32_t gps_diff_flag = 0,
    float gnss_horizontal_speed = 0.0f,
    uint64_t gps_utc_time = 0,
    uint8_t flag = 3,
    float speedEast = 0.0f,
    float speedNorth = 0.0f,
    float maxSpeed = 0.0f,
    float wheelAngle = 0.0f) {
  GpsImuInfoBuilder builder_(_fbb);
  builder_.add_gps_utc_time(gps_utc_time);
  builder_.add_gps_lng(gps_lng);
  builder_.add_gps_lat(gps_lat);
  builder_.add_wheelAngle(wheelAngle);
  builder_.add_maxSpeed(maxSpeed);
  builder_.add_speedNorth(speedNorth);
  builder_.add_speedEast(speedEast);
  builder_.add_gnss_horizontal_speed(gnss_horizontal_speed);
  builder_.add_gps_diff_flag(gps_diff_flag);
  builder_.add_gps_pitch(gps_pitch);
  builder_.add_gps_roll(gps_roll);
  builder_.add_gps_yaw(gps_yaw);
  builder_.add_gps_satellite_rear(gps_satellite_rear);
  builder_.add_gps_satellite_front(gps_satellite_front);
  builder_.add_imu_yaw_z(imu_yaw_z);
  builder_.add_imu_acc_x(imu_acc_x);
  builder_.add_imu_acc_y(imu_acc_y);
  builder_.add_gps_height(gps_height);
  builder_.add_gps_speed(gps_speed);
  builder_.add_gps_vn(gps_vn);
  builder_.add_gps_ve(gps_ve);
  builder_.add_gps_heading(gps_heading);
  builder_.add_gps_rtk_status(gps_rtk_status);
  builder_.add_flag(flag);
  return builder_.Finish();
}

flatbuffers::Offset<GpsImuInfo> CreateGpsImuInfo(flatbuffers::FlatBufferBuilder &_fbb, const GpsImuInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct GpsStatusT : public flatbuffers::NativeTable {
  typedef GpsStatus TableType;
  bool gps_rtk_fault_flag;
  bool gps_gps_fault_flag;
  bool gps_imu_fault_flag;
  GpsStatusT()
      : gps_rtk_fault_flag(false),
        gps_gps_fault_flag(false),
        gps_imu_fault_flag(false) {
  }
};

inline bool operator==(const GpsStatusT &lhs, const GpsStatusT &rhs) {
  return
      (lhs.gps_rtk_fault_flag == rhs.gps_rtk_fault_flag) &&
      (lhs.gps_gps_fault_flag == rhs.gps_gps_fault_flag) &&
      (lhs.gps_imu_fault_flag == rhs.gps_imu_fault_flag);
}

inline bool operator!=(const GpsStatusT &lhs, const GpsStatusT &rhs) {
    return !(lhs == rhs);
}


struct GpsStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GpsStatusT NativeTableType;
  typedef GpsStatusBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GpsStatusTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GPS_RTK_FAULT_FLAG = 4,
    VT_GPS_GPS_FAULT_FLAG = 6,
    VT_GPS_IMU_FAULT_FLAG = 8
  };
  bool gps_rtk_fault_flag() const {
    return GetField<uint8_t>(VT_GPS_RTK_FAULT_FLAG, 0) != 0;
  }
  bool mutate_gps_rtk_fault_flag(bool _gps_rtk_fault_flag) {
    return SetField<uint8_t>(VT_GPS_RTK_FAULT_FLAG, static_cast<uint8_t>(_gps_rtk_fault_flag), 0);
  }
  bool gps_gps_fault_flag() const {
    return GetField<uint8_t>(VT_GPS_GPS_FAULT_FLAG, 0) != 0;
  }
  bool mutate_gps_gps_fault_flag(bool _gps_gps_fault_flag) {
    return SetField<uint8_t>(VT_GPS_GPS_FAULT_FLAG, static_cast<uint8_t>(_gps_gps_fault_flag), 0);
  }
  bool gps_imu_fault_flag() const {
    return GetField<uint8_t>(VT_GPS_IMU_FAULT_FLAG, 0) != 0;
  }
  bool mutate_gps_imu_fault_flag(bool _gps_imu_fault_flag) {
    return SetField<uint8_t>(VT_GPS_IMU_FAULT_FLAG, static_cast<uint8_t>(_gps_imu_fault_flag), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_GPS_RTK_FAULT_FLAG) &&
           VerifyField<uint8_t>(verifier, VT_GPS_GPS_FAULT_FLAG) &&
           VerifyField<uint8_t>(verifier, VT_GPS_IMU_FAULT_FLAG) &&
           verifier.EndTable();
  }
  GpsStatusT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GpsStatusT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<GpsStatus> Pack(flatbuffers::FlatBufferBuilder &_fbb, const GpsStatusT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GpsStatusBuilder {
  typedef GpsStatus Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gps_rtk_fault_flag(bool gps_rtk_fault_flag) {
    fbb_.AddElement<uint8_t>(GpsStatus::VT_GPS_RTK_FAULT_FLAG, static_cast<uint8_t>(gps_rtk_fault_flag), 0);
  }
  void add_gps_gps_fault_flag(bool gps_gps_fault_flag) {
    fbb_.AddElement<uint8_t>(GpsStatus::VT_GPS_GPS_FAULT_FLAG, static_cast<uint8_t>(gps_gps_fault_flag), 0);
  }
  void add_gps_imu_fault_flag(bool gps_imu_fault_flag) {
    fbb_.AddElement<uint8_t>(GpsStatus::VT_GPS_IMU_FAULT_FLAG, static_cast<uint8_t>(gps_imu_fault_flag), 0);
  }
  explicit GpsStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GpsStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GpsStatus>(end);
    return o;
  }
};

inline flatbuffers::Offset<GpsStatus> CreateGpsStatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool gps_rtk_fault_flag = false,
    bool gps_gps_fault_flag = false,
    bool gps_imu_fault_flag = false) {
  GpsStatusBuilder builder_(_fbb);
  builder_.add_gps_imu_fault_flag(gps_imu_fault_flag);
  builder_.add_gps_gps_fault_flag(gps_gps_fault_flag);
  builder_.add_gps_rtk_fault_flag(gps_rtk_fault_flag);
  return builder_.Finish();
}

flatbuffers::Offset<GpsStatus> CreateGpsStatus(flatbuffers::FlatBufferBuilder &_fbb, const GpsStatusT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline GpsImuInfoT *GpsImuInfo::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<gps::GpsImuInfoT> _o = std::unique_ptr<gps::GpsImuInfoT>(new GpsImuInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GpsImuInfo::UnPackTo(GpsImuInfoT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = gps_rtk_status(); _o->gps_rtk_status = _e; }
  { auto _e = gps_lat(); _o->gps_lat = _e; }
  { auto _e = gps_lng(); _o->gps_lng = _e; }
  { auto _e = gps_heading(); _o->gps_heading = _e; }
  { auto _e = gps_ve(); _o->gps_ve = _e; }
  { auto _e = gps_vn(); _o->gps_vn = _e; }
  { auto _e = gps_speed(); _o->gps_speed = _e; }
  { auto _e = gps_height(); _o->gps_height = _e; }
  { auto _e = imu_acc_y(); _o->imu_acc_y = _e; }
  { auto _e = imu_acc_x(); _o->imu_acc_x = _e; }
  { auto _e = imu_yaw_z(); _o->imu_yaw_z = _e; }
  { auto _e = gps_satellite_front(); _o->gps_satellite_front = _e; }
  { auto _e = gps_satellite_rear(); _o->gps_satellite_rear = _e; }
  { auto _e = gps_yaw(); _o->gps_yaw = _e; }
  { auto _e = gps_roll(); _o->gps_roll = _e; }
  { auto _e = gps_pitch(); _o->gps_pitch = _e; }
  { auto _e = gps_diff_flag(); _o->gps_diff_flag = _e; }
  { auto _e = gnss_horizontal_speed(); _o->gnss_horizontal_speed = _e; }
  { auto _e = gps_utc_time(); _o->gps_utc_time = _e; }
  { auto _e = flag(); _o->flag = _e; }
  { auto _e = speedEast(); _o->speedEast = _e; }
  { auto _e = speedNorth(); _o->speedNorth = _e; }
  { auto _e = maxSpeed(); _o->maxSpeed = _e; }
  { auto _e = wheelAngle(); _o->wheelAngle = _e; }
}

inline flatbuffers::Offset<GpsImuInfo> GpsImuInfo::Pack(flatbuffers::FlatBufferBuilder &_fbb, const GpsImuInfoT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGpsImuInfo(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<GpsImuInfo> CreateGpsImuInfo(flatbuffers::FlatBufferBuilder &_fbb, const GpsImuInfoT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const GpsImuInfoT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _gps_rtk_status = _o->gps_rtk_status;
  auto _gps_lat = _o->gps_lat;
  auto _gps_lng = _o->gps_lng;
  auto _gps_heading = _o->gps_heading;
  auto _gps_ve = _o->gps_ve;
  auto _gps_vn = _o->gps_vn;
  auto _gps_speed = _o->gps_speed;
  auto _gps_height = _o->gps_height;
  auto _imu_acc_y = _o->imu_acc_y;
  auto _imu_acc_x = _o->imu_acc_x;
  auto _imu_yaw_z = _o->imu_yaw_z;
  auto _gps_satellite_front = _o->gps_satellite_front;
  auto _gps_satellite_rear = _o->gps_satellite_rear;
  auto _gps_yaw = _o->gps_yaw;
  auto _gps_roll = _o->gps_roll;
  auto _gps_pitch = _o->gps_pitch;
  auto _gps_diff_flag = _o->gps_diff_flag;
  auto _gnss_horizontal_speed = _o->gnss_horizontal_speed;
  auto _gps_utc_time = _o->gps_utc_time;
  auto _flag = _o->flag;
  auto _speedEast = _o->speedEast;
  auto _speedNorth = _o->speedNorth;
  auto _maxSpeed = _o->maxSpeed;
  auto _wheelAngle = _o->wheelAngle;
  return gps::CreateGpsImuInfo(
      _fbb,
      _gps_rtk_status,
      _gps_lat,
      _gps_lng,
      _gps_heading,
      _gps_ve,
      _gps_vn,
      _gps_speed,
      _gps_height,
      _imu_acc_y,
      _imu_acc_x,
      _imu_yaw_z,
      _gps_satellite_front,
      _gps_satellite_rear,
      _gps_yaw,
      _gps_roll,
      _gps_pitch,
      _gps_diff_flag,
      _gnss_horizontal_speed,
      _gps_utc_time,
      _flag,
      _speedEast,
      _speedNorth,
      _maxSpeed,
      _wheelAngle);
}

inline GpsStatusT *GpsStatus::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<gps::GpsStatusT> _o = std::unique_ptr<gps::GpsStatusT>(new GpsStatusT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GpsStatus::UnPackTo(GpsStatusT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = gps_rtk_fault_flag(); _o->gps_rtk_fault_flag = _e; }
  { auto _e = gps_gps_fault_flag(); _o->gps_gps_fault_flag = _e; }
  { auto _e = gps_imu_fault_flag(); _o->gps_imu_fault_flag = _e; }
}

inline flatbuffers::Offset<GpsStatus> GpsStatus::Pack(flatbuffers::FlatBufferBuilder &_fbb, const GpsStatusT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGpsStatus(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<GpsStatus> CreateGpsStatus(flatbuffers::FlatBufferBuilder &_fbb, const GpsStatusT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const GpsStatusT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _gps_rtk_fault_flag = _o->gps_rtk_fault_flag;
  auto _gps_gps_fault_flag = _o->gps_gps_fault_flag;
  auto _gps_imu_fault_flag = _o->gps_imu_fault_flag;
  return gps::CreateGpsStatus(
      _fbb,
      _gps_rtk_fault_flag,
      _gps_gps_fault_flag,
      _gps_imu_fault_flag);
}

inline const flatbuffers::TypeTable *GpsImuInfoTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 }
  };
  static const char * const names[] = {
    "gps_rtk_status",
    "gps_lat",
    "gps_lng",
    "gps_heading",
    "gps_ve",
    "gps_vn",
    "gps_speed",
    "gps_height",
    "imu_acc_y",
    "imu_acc_x",
    "imu_yaw_z",
    "gps_satellite_front",
    "gps_satellite_rear",
    "gps_yaw",
    "gps_roll",
    "gps_pitch",
    "gps_diff_flag",
    "gnss_horizontal_speed",
    "gps_utc_time",
    "flag",
    "speedEast",
    "speedNorth",
    "maxSpeed",
    "wheelAngle"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 24, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *GpsStatusTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 }
  };
  static const char * const names[] = {
    "gps_rtk_fault_flag",
    "gps_gps_fault_flag",
    "gps_imu_fault_flag"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const gps::GpsImuInfo *GetGpsImuInfo(const void *buf) {
  return flatbuffers::GetRoot<gps::GpsImuInfo>(buf);
}

inline const gps::GpsImuInfo *GetSizePrefixedGpsImuInfo(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<gps::GpsImuInfo>(buf);
}

inline GpsImuInfo *GetMutableGpsImuInfo(void *buf) {
  return flatbuffers::GetMutableRoot<GpsImuInfo>(buf);
}

inline const char *GpsImuInfoIdentifier() {
  return "GPSO";
}

inline bool GpsImuInfoBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, GpsImuInfoIdentifier());
}

inline bool VerifyGpsImuInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<gps::GpsImuInfo>(GpsImuInfoIdentifier());
}

inline bool VerifySizePrefixedGpsImuInfoBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<gps::GpsImuInfo>(GpsImuInfoIdentifier());
}

inline void FinishGpsImuInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gps::GpsImuInfo> root) {
  fbb.Finish(root, GpsImuInfoIdentifier());
}

inline void FinishSizePrefixedGpsImuInfoBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<gps::GpsImuInfo> root) {
  fbb.FinishSizePrefixed(root, GpsImuInfoIdentifier());
}

inline std::unique_ptr<gps::GpsImuInfoT> UnPackGpsImuInfo(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<gps::GpsImuInfoT>(GetGpsImuInfo(buf)->UnPack(res));
}

inline std::unique_ptr<gps::GpsImuInfoT> UnPackSizePrefixedGpsImuInfo(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<gps::GpsImuInfoT>(GetSizePrefixedGpsImuInfo(buf)->UnPack(res));
}

}  // namespace gps

#endif  // FLATBUFFERS_GENERATED_GPSINFO_GPS_H_
