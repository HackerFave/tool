// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_H_
#define FLATBUFFERS_GENERATED_MESSAGE_H_

#include "flatbuffers/flatbuffers.h"

struct Message;
struct MessageBuilder;
struct MessageT;

bool operator==(const MessageT &lhs, const MessageT &rhs);
bool operator!=(const MessageT &lhs, const MessageT &rhs);

inline const flatbuffers::TypeTable *MessageTypeTable();

struct MessageT : public flatbuffers::NativeTable {
  typedef Message TableType;
  uint64_t timestamp;
  std::string node_name;
  uint32_t size;
  std::vector<uint8_t> data;
  uint64_t seq;
  MessageT()
      : timestamp(0),
        size(0),
        seq(0) {
  }
};

inline bool operator==(const MessageT &lhs, const MessageT &rhs) {
  return
      (lhs.timestamp == rhs.timestamp) &&
      (lhs.node_name == rhs.node_name) &&
      (lhs.size == rhs.size) &&
      (lhs.data == rhs.data) &&
      (lhs.seq == rhs.seq);
}

inline bool operator!=(const MessageT &lhs, const MessageT &rhs) {
    return !(lhs == rhs);
}


struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageT NativeTableType;
  typedef MessageBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return MessageTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_NODE_NAME = 6,
    VT_SIZE = 8,
    VT_DATA = 10,
    VT_SEQ = 12
  };
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool mutate_timestamp(uint64_t _timestamp) {
    return SetField<uint64_t>(VT_TIMESTAMP, _timestamp, 0);
  }
  const flatbuffers::String *node_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NODE_NAME);
  }
  flatbuffers::String *mutable_node_name() {
    return GetPointer<flatbuffers::String *>(VT_NODE_NAME);
  }
  uint32_t size() const {
    return GetField<uint32_t>(VT_SIZE, 0);
  }
  bool mutate_size(uint32_t _size) {
    return SetField<uint32_t>(VT_SIZE, _size, 0);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  uint64_t seq() const {
    return GetField<uint64_t>(VT_SEQ, 0);
  }
  bool mutate_seq(uint64_t _seq) {
    return SetField<uint64_t>(VT_SEQ, _seq, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyOffset(verifier, VT_NODE_NAME) &&
           verifier.VerifyString(node_name()) &&
           VerifyField<uint32_t>(verifier, VT_SIZE) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyField<uint64_t>(verifier, VT_SEQ) &&
           verifier.EndTable();
  }
  MessageT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MessageT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Message> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MessageT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(Message::VT_TIMESTAMP, timestamp, 0);
  }
  void add_node_name(flatbuffers::Offset<flatbuffers::String> node_name) {
    fbb_.AddOffset(Message::VT_NODE_NAME, node_name);
  }
  void add_size(uint32_t size) {
    fbb_.AddElement<uint32_t>(Message::VT_SIZE, size, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Message::VT_DATA, data);
  }
  void add_seq(uint64_t seq) {
    fbb_.AddElement<uint64_t>(Message::VT_SEQ, seq, 0);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t timestamp = 0,
    flatbuffers::Offset<flatbuffers::String> node_name = 0,
    uint32_t size = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0,
    uint64_t seq = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_seq(seq);
  builder_.add_timestamp(timestamp);
  builder_.add_data(data);
  builder_.add_size(size);
  builder_.add_node_name(node_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message> CreateMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t timestamp = 0,
    const char *node_name = nullptr,
    uint32_t size = 0,
    const std::vector<uint8_t> *data = nullptr,
    uint64_t seq = 0) {
  auto node_name__ = node_name ? _fbb.CreateString(node_name) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return CreateMessage(
      _fbb,
      timestamp,
      node_name__,
      size,
      data__,
      seq);
}

flatbuffers::Offset<Message> CreateMessage(flatbuffers::FlatBufferBuilder &_fbb, const MessageT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MessageT *Message::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<MessageT> _o = std::unique_ptr<MessageT>(new MessageT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Message::UnPackTo(MessageT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = timestamp(); _o->timestamp = _e; }
  { auto _e = node_name(); if (_e) _o->node_name = _e->str(); }
  { auto _e = size(); _o->size = _e; }
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->data[_i] = _e->Get(_i); } } }
  { auto _e = seq(); _o->seq = _e; }
}

inline flatbuffers::Offset<Message> Message::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MessageT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMessage(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Message> CreateMessage(flatbuffers::FlatBufferBuilder &_fbb, const MessageT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MessageT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _timestamp = _o->timestamp;
  auto _node_name = _o->node_name.empty() ? 0 : _fbb.CreateString(_o->node_name);
  auto _size = _o->size;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  auto _seq = _o->seq;
  return CreateMessage(
      _fbb,
      _timestamp,
      _node_name,
      _size,
      _data,
      _seq);
}

inline const flatbuffers::TypeTable *MessageTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_ULONG, 0, -1 }
  };
  static const char * const names[] = {
    "timestamp",
    "node_name",
    "size",
    "data",
    "seq"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 5, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<Message>(buf);
}

inline const Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Message>(buf);
}

inline Message *GetMutableMessage(void *buf) {
  return flatbuffers::GetMutableRoot<Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Message> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<MessageT> UnPackMessage(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<MessageT>(GetMessage(buf)->UnPack(res));
}

inline std::unique_ptr<MessageT> UnPackSizePrefixedMessage(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<MessageT>(GetSizePrefixedMessage(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_MESSAGE_H_
