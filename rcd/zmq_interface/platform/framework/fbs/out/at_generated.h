// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AT_H_
#define FLATBUFFERS_GENERATED_AT_H_

#include "flatbuffers/flatbuffers.h"

struct ATMsg;
struct ATMsgBuilder;
struct ATMsgT;

bool operator==(const ATMsgT &lhs, const ATMsgT &rhs);
bool operator!=(const ATMsgT &lhs, const ATMsgT &rhs);

inline const flatbuffers::TypeTable *ATMsgTypeTable();

struct ATMsgT : public flatbuffers::NativeTable {
  typedef ATMsg TableType;
  int32_t rssi;
  int32_t ber;
  ATMsgT()
      : rssi(0),
        ber(0) {
  }
};

inline bool operator==(const ATMsgT &lhs, const ATMsgT &rhs) {
  return
      (lhs.rssi == rhs.rssi) &&
      (lhs.ber == rhs.ber);
}

inline bool operator!=(const ATMsgT &lhs, const ATMsgT &rhs) {
    return !(lhs == rhs);
}


struct ATMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ATMsgT NativeTableType;
  typedef ATMsgBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return ATMsgTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RSSI = 4,
    VT_BER = 6
  };
  int32_t rssi() const {
    return GetField<int32_t>(VT_RSSI, 0);
  }
  bool mutate_rssi(int32_t _rssi) {
    return SetField<int32_t>(VT_RSSI, _rssi, 0);
  }
  int32_t ber() const {
    return GetField<int32_t>(VT_BER, 0);
  }
  bool mutate_ber(int32_t _ber) {
    return SetField<int32_t>(VT_BER, _ber, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RSSI) &&
           VerifyField<int32_t>(verifier, VT_BER) &&
           verifier.EndTable();
  }
  ATMsgT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ATMsgT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ATMsg> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ATMsgT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ATMsgBuilder {
  typedef ATMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rssi(int32_t rssi) {
    fbb_.AddElement<int32_t>(ATMsg::VT_RSSI, rssi, 0);
  }
  void add_ber(int32_t ber) {
    fbb_.AddElement<int32_t>(ATMsg::VT_BER, ber, 0);
  }
  explicit ATMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ATMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ATMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<ATMsg> CreateATMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t rssi = 0,
    int32_t ber = 0) {
  ATMsgBuilder builder_(_fbb);
  builder_.add_ber(ber);
  builder_.add_rssi(rssi);
  return builder_.Finish();
}

flatbuffers::Offset<ATMsg> CreateATMsg(flatbuffers::FlatBufferBuilder &_fbb, const ATMsgT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ATMsgT *ATMsg::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<ATMsgT> _o = std::unique_ptr<ATMsgT>(new ATMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ATMsg::UnPackTo(ATMsgT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = rssi(); _o->rssi = _e; }
  { auto _e = ber(); _o->ber = _e; }
}

inline flatbuffers::Offset<ATMsg> ATMsg::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ATMsgT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateATMsg(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ATMsg> CreateATMsg(flatbuffers::FlatBufferBuilder &_fbb, const ATMsgT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ATMsgT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _rssi = _o->rssi;
  auto _ber = _o->ber;
  return CreateATMsg(
      _fbb,
      _rssi,
      _ber);
}

inline const flatbuffers::TypeTable *ATMsgTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 }
  };
  static const char * const names[] = {
    "rssi",
    "ber"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const ATMsg *GetATMsg(const void *buf) {
  return flatbuffers::GetRoot<ATMsg>(buf);
}

inline const ATMsg *GetSizePrefixedATMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ATMsg>(buf);
}

inline ATMsg *GetMutableATMsg(void *buf) {
  return flatbuffers::GetMutableRoot<ATMsg>(buf);
}

inline bool VerifyATMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ATMsg>(nullptr);
}

inline bool VerifySizePrefixedATMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ATMsg>(nullptr);
}

inline void FinishATMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ATMsg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedATMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ATMsg> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<ATMsgT> UnPackATMsg(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ATMsgT>(GetATMsg(buf)->UnPack(res));
}

inline std::unique_ptr<ATMsgT> UnPackSizePrefixedATMsg(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ATMsgT>(GetSizePrefixedATMsg(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_AT_H_
