// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FUNCMSG_H_
#define FLATBUFFERS_GENERATED_FUNCMSG_H_

#include "flatbuffers/flatbuffers.h"

struct FuncCloudGetAllDevName;
struct FuncCloudGetAllDevNameBuilder;
struct FuncCloudGetAllDevNameT;

struct FuncMsg;
struct FuncMsgBuilder;
struct FuncMsgT;

bool operator==(const FuncCloudGetAllDevNameT &lhs, const FuncCloudGetAllDevNameT &rhs);
bool operator!=(const FuncCloudGetAllDevNameT &lhs, const FuncCloudGetAllDevNameT &rhs);
bool operator==(const FuncMsgT &lhs, const FuncMsgT &rhs);
bool operator!=(const FuncMsgT &lhs, const FuncMsgT &rhs);

inline const flatbuffers::TypeTable *FuncCloudGetAllDevNameTypeTable();

inline const flatbuffers::TypeTable *FuncMsgTypeTable();

struct FuncCloudGetAllDevNameT : public flatbuffers::NativeTable {
  typedef FuncCloudGetAllDevName TableType;
  std::string local_name;
  std::string remote_target_name;
  FuncCloudGetAllDevNameT() {
  }
};

inline bool operator==(const FuncCloudGetAllDevNameT &lhs, const FuncCloudGetAllDevNameT &rhs) {
  return
      (lhs.local_name == rhs.local_name) &&
      (lhs.remote_target_name == rhs.remote_target_name);
}

inline bool operator!=(const FuncCloudGetAllDevNameT &lhs, const FuncCloudGetAllDevNameT &rhs) {
    return !(lhs == rhs);
}


struct FuncCloudGetAllDevName FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FuncCloudGetAllDevNameT NativeTableType;
  typedef FuncCloudGetAllDevNameBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return FuncCloudGetAllDevNameTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOCAL_NAME = 4,
    VT_REMOTE_TARGET_NAME = 6
  };
  const flatbuffers::String *local_name() const {
    return GetPointer<const flatbuffers::String *>(VT_LOCAL_NAME);
  }
  flatbuffers::String *mutable_local_name() {
    return GetPointer<flatbuffers::String *>(VT_LOCAL_NAME);
  }
  const flatbuffers::String *remote_target_name() const {
    return GetPointer<const flatbuffers::String *>(VT_REMOTE_TARGET_NAME);
  }
  flatbuffers::String *mutable_remote_target_name() {
    return GetPointer<flatbuffers::String *>(VT_REMOTE_TARGET_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LOCAL_NAME) &&
           verifier.VerifyString(local_name()) &&
           VerifyOffset(verifier, VT_REMOTE_TARGET_NAME) &&
           verifier.VerifyString(remote_target_name()) &&
           verifier.EndTable();
  }
  FuncCloudGetAllDevNameT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(FuncCloudGetAllDevNameT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<FuncCloudGetAllDevName> Pack(flatbuffers::FlatBufferBuilder &_fbb, const FuncCloudGetAllDevNameT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct FuncCloudGetAllDevNameBuilder {
  typedef FuncCloudGetAllDevName Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_local_name(flatbuffers::Offset<flatbuffers::String> local_name) {
    fbb_.AddOffset(FuncCloudGetAllDevName::VT_LOCAL_NAME, local_name);
  }
  void add_remote_target_name(flatbuffers::Offset<flatbuffers::String> remote_target_name) {
    fbb_.AddOffset(FuncCloudGetAllDevName::VT_REMOTE_TARGET_NAME, remote_target_name);
  }
  explicit FuncCloudGetAllDevNameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FuncCloudGetAllDevName> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FuncCloudGetAllDevName>(end);
    return o;
  }
};

inline flatbuffers::Offset<FuncCloudGetAllDevName> CreateFuncCloudGetAllDevName(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> local_name = 0,
    flatbuffers::Offset<flatbuffers::String> remote_target_name = 0) {
  FuncCloudGetAllDevNameBuilder builder_(_fbb);
  builder_.add_remote_target_name(remote_target_name);
  builder_.add_local_name(local_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<FuncCloudGetAllDevName> CreateFuncCloudGetAllDevNameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *local_name = nullptr,
    const char *remote_target_name = nullptr) {
  auto local_name__ = local_name ? _fbb.CreateString(local_name) : 0;
  auto remote_target_name__ = remote_target_name ? _fbb.CreateString(remote_target_name) : 0;
  return CreateFuncCloudGetAllDevName(
      _fbb,
      local_name__,
      remote_target_name__);
}

flatbuffers::Offset<FuncCloudGetAllDevName> CreateFuncCloudGetAllDevName(flatbuffers::FlatBufferBuilder &_fbb, const FuncCloudGetAllDevNameT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct FuncMsgT : public flatbuffers::NativeTable {
  typedef FuncMsg TableType;
  std::string func_name;
  std::vector<uint8_t> data;
  FuncMsgT() {
  }
};

inline bool operator==(const FuncMsgT &lhs, const FuncMsgT &rhs) {
  return
      (lhs.func_name == rhs.func_name) &&
      (lhs.data == rhs.data);
}

inline bool operator!=(const FuncMsgT &lhs, const FuncMsgT &rhs) {
    return !(lhs == rhs);
}


struct FuncMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FuncMsgT NativeTableType;
  typedef FuncMsgBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return FuncMsgTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUNC_NAME = 4,
    VT_DATA = 6
  };
  const flatbuffers::String *func_name() const {
    return GetPointer<const flatbuffers::String *>(VT_FUNC_NAME);
  }
  flatbuffers::String *mutable_func_name() {
    return GetPointer<flatbuffers::String *>(VT_FUNC_NAME);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FUNC_NAME) &&
           verifier.VerifyString(func_name()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
  FuncMsgT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(FuncMsgT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<FuncMsg> Pack(flatbuffers::FlatBufferBuilder &_fbb, const FuncMsgT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct FuncMsgBuilder {
  typedef FuncMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_func_name(flatbuffers::Offset<flatbuffers::String> func_name) {
    fbb_.AddOffset(FuncMsg::VT_FUNC_NAME, func_name);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(FuncMsg::VT_DATA, data);
  }
  explicit FuncMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FuncMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FuncMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<FuncMsg> CreateFuncMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> func_name = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  FuncMsgBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_func_name(func_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<FuncMsg> CreateFuncMsgDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *func_name = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  auto func_name__ = func_name ? _fbb.CreateString(func_name) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return CreateFuncMsg(
      _fbb,
      func_name__,
      data__);
}

flatbuffers::Offset<FuncMsg> CreateFuncMsg(flatbuffers::FlatBufferBuilder &_fbb, const FuncMsgT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline FuncCloudGetAllDevNameT *FuncCloudGetAllDevName::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<FuncCloudGetAllDevNameT> _o = std::unique_ptr<FuncCloudGetAllDevNameT>(new FuncCloudGetAllDevNameT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void FuncCloudGetAllDevName::UnPackTo(FuncCloudGetAllDevNameT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = local_name(); if (_e) _o->local_name = _e->str(); }
  { auto _e = remote_target_name(); if (_e) _o->remote_target_name = _e->str(); }
}

inline flatbuffers::Offset<FuncCloudGetAllDevName> FuncCloudGetAllDevName::Pack(flatbuffers::FlatBufferBuilder &_fbb, const FuncCloudGetAllDevNameT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateFuncCloudGetAllDevName(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<FuncCloudGetAllDevName> CreateFuncCloudGetAllDevName(flatbuffers::FlatBufferBuilder &_fbb, const FuncCloudGetAllDevNameT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const FuncCloudGetAllDevNameT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _local_name = _o->local_name.empty() ? 0 : _fbb.CreateString(_o->local_name);
  auto _remote_target_name = _o->remote_target_name.empty() ? 0 : _fbb.CreateString(_o->remote_target_name);
  return CreateFuncCloudGetAllDevName(
      _fbb,
      _local_name,
      _remote_target_name);
}

inline FuncMsgT *FuncMsg::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<FuncMsgT> _o = std::unique_ptr<FuncMsgT>(new FuncMsgT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void FuncMsg::UnPackTo(FuncMsgT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = func_name(); if (_e) _o->func_name = _e->str(); }
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->data[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<FuncMsg> FuncMsg::Pack(flatbuffers::FlatBufferBuilder &_fbb, const FuncMsgT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateFuncMsg(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<FuncMsg> CreateFuncMsg(flatbuffers::FlatBufferBuilder &_fbb, const FuncMsgT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const FuncMsgT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _func_name = _o->func_name.empty() ? 0 : _fbb.CreateString(_o->func_name);
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  return CreateFuncMsg(
      _fbb,
      _func_name,
      _data);
}

inline const flatbuffers::TypeTable *FuncCloudGetAllDevNameTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "local_name",
    "remote_target_name"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *FuncMsgTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 }
  };
  static const char * const names[] = {
    "func_name",
    "data"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

#endif  // FLATBUFFERS_GENERATED_FUNCMSG_H_
