namespace prediction;

struct Point_xy{
    xy:[float:2] (id:0);
}
struct Point_xyz{
    xyz:[float:3] (id:0);
}
struct Points{
    vertex:[Point_xyz:4] (id:0);//边角点
}
struct Pointcar{
    vertex:[Point_xy:4] (id:0);//边角点
}
struct Pointwall{
    wall:[Point_xy:25] (id:0);//边角点
}
table LidarSickInfo {
  Time:ulong (id: 0);                 //时间戳
  object_number:uint (id: 1);         //障碍物个数
  object_type:uint (id: 2);           //目标障碍物类型
  detection_type:uint (id: 3);        //檢測類型：0：激光累的；1：毫米波；2：融合
  object_dist_long:float (id: 4);     //障礙物縱向距離：單位米
  object_dist_lat:float (id: 5);      //障礙物橫向距離：單位米，左負右正
  object_length:float (id: 6);        //障碍物长度：单位米
  object_width:float (id: 7);         //障礙物寬度：單位米
  object_height:float (id: 8);        //障礙物高度：單位米
  object_head:float (id: 9);          //障碍物偏航角： 范围：-90度~90度，障碍物长边与雷达坐标系y轴方向夹角
  object_vrel_long:float (id: 10);    //障礙物縱向速度：單位m/s
  object_vrel_lat:float (id: 11);     //障礙物橫向速度：單位m/s
  object_min_long:float (id: 12);     //该障碍物距离车的最近纵向距离
  stop_flag:bool = false (id: 13);
}
//用于保存数据
table DataRecord_fuse{
   count:uint (id:0);  //障碍物个数
   Time:uint64 (id:1);  //障碍物时间戳
   record_time:uint64 (id:2); //数据发送时间戳
   path_flag:uint (id:3); //是否在路径上
   path_id:uint  (id:4);   //路径点id
   key_obstacle:int  (id:5);  //障碍物列表中行驶区域内障碍物的下标
   object_couter:uint (id:6); //遍历障碍物下标
   is_impact:bool  (id:7);  //是否发生碰撞

   object_type:uint  (id:8);           //目标障碍物类型,
   detection_type:uint (id:9);        //檢測類型：0：激光累的；1：毫米波；2：融合
   object_dist_long:float (id:10);     //障礙物縱向距離：單位米
   object_dist_lat:float (id:11);      //障礙物橫向距離：單位米，左負右正
   object_length:float (id:12);        //障碍物长度：单位米
   object_width:float (id:13);         //障礙物寬度：單位米
   object_height:float (id:14);        //障礙物高度：單位米
   object_head:float (id:15);          //障碍物偏航角： 范围：-90度~90度，障碍物长边与雷达坐标系y轴方向夹角
   object_vrel_long:float (id:16);     //障礙物縱向速度：單位m/s
   object_vrel_lat:float (id:17);      //障礙物橫向速度：單位m/s
   p_corner:Points (id:18);          //边角点(xyx)，从左下顺时针开始
   object_min_long:float (id:19);      //该障碍物距离车的最近纵向距离
   stop_flag:bool  (id:20);  //停车标志位

   front_x:float (id:21);     //在行驶区域内的障碍物列表中的最小x坐标
   front_y:float (id:22);     //在行驶区域内的障碍物列表中的最小y坐标
   path_dis:float (id:23);  //路径距离
   bia_dis:float (id:24);  //横向偏移距离
   cur_max:float (id:25);  //控制曲率
   point_car:Pointcar (id:26);  //车辆边角点，从左下角开始顺时针（x,y）单位/m
   min_impact_point:float (id:27); //最近碰撞点y

   //挡墙
   wall_count:uint (id:28);  //挡墙点个数
   point_wall:Pointwall (id:29);  //挡墙点个数25，坐标（x，y）单位/m
   wall_y:float (id:30);  //发生碰撞挡墙点y坐标
   wall_x:float (id:31);  //发生碰撞挡墙点x坐标
   point_wall_left:Pointwall(id:32);  //挡墙点个数25，坐标（x，y）单位/m
}

table DataRecord_v2i {
  count:uint (id:0);  //障碍物个数
  path_id:uint(id:1);
  key_obstacle:int(id:2);
  record_time:uint64(id:3) ;
  is_impact:bool(id:4) ;
  is_expand_impact_result:bool(id:5) ;
  y_V2Vcar:float(id:6) ; //不是中心点
  x_V2Vcar:float(id:7) ; //不是中心点
  x_center:float(id:8) ;
  y_center:float(id:9) ;
  width_V2Vcar:float(id:10) ;
  height_V2Vcar:float(id:11) ;
  p_coner:Pointcar(id:12); //目标车辆边角点坐标
  huiche_flag:uint(id:13);
  point_car:Pointcar(id:14); //预测车辆边角点
  dis_path:float(id:15) ;       //障碍物路径距离
  v2i_stop_x:float (id:16);
  v2i_stop_y: float(id:17) ;
  y_limit:float (id:18);
  x_limit:float (id:19);
  width_limit:float (id:20);
  V2V_limit_flag:float (id:21);
}

table SteerPara {
  X_center:float (id: 0);     //转向圆心横坐标（相对车辆质心）
  Y_center:float (id: 1);     //转向圆心纵坐标
  R_car_left:float (id: 2);   //左车身的转弯半径
  R_car_right:float (id: 3);  //右车身的转弯半径
  R_left_side:float (id: 4);  //左侧半径
  R_right_side:float (id: 5); //右侧半径
  R_left_lane:float (id: 6);  //左车道半径
  R_right_lane:float (id: 7); //右车道半径
}

table Lidardis {
  front:float (id: 0);          //车前方
  back_y:float (id: 1);      //车后侧边界在停靠点航向方向0.5m范围内边界点纵向坐标
  back_x:float (id: 2);     //车后侧边界在停靠点航向方向0.5m范围内边界点横向坐标
  back_wall_heading_Projectionlength:float (id: 3);      //车后侧边界在停靠点航向方向0.5m范围内边界点在停靠点航向投影的距离
  right_lane:float (id: 4);     //车右车道
  //限速区域变量
  y_limit:float (id: 5);          //限速区域内障碍物纵向距离
  x_limit:float (id: 6);          //限速区域内障碍物横向距离
  width_limit:float (id: 7);      //限速区域内障碍物宽度
  x_stop:float (id: 8);         //行驶区域上的障碍物横向距离
  dis_path:float (id: 9);       //障碍物路径距离
  impact_point_x:float (id: 10);  //碰撞点x坐标
  impact_point_y:float (id: 11);  //碰撞点y坐标
  object_stop_flag:uint = 0 (id: 12);  //2，是挡墙数据；1,是v2v数据；0，是感知数据
  V2V_limit_flag:uint = 0 (id: 13); //1,是有会车；0，是无会车
  width_stop:float (id: 14);  //障碍物的宽度
  isin_path:uint (id: 15);  //1,在路径上；0,通过前轮转角计算距离
  impact_load_id:uint(id: 16);  //发生impact load id;
}

table SenseResultInfo {
  back_data:Lidardis (id: 0);
  lidar_front_data:Lidardis (id: 1);
  steer_para:SteerPara (id: 2);
  lidar_back_judge_result:bool = false (id: 3);
}

root_type SenseResultInfo;

file_identifier "PERO";
