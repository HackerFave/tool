// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file systemInfo.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _TG_MSGS_DDS_SYSTEMINFO_H_
#define _TG_MSGS_DDS_SYSTEMINFO_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(systemInfo_SOURCE)
#define systemInfo_DllAPI __declspec( dllexport )
#else
#define systemInfo_DllAPI __declspec( dllimport )
#endif // systemInfo_SOURCE
#else
#define systemInfo_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define systemInfo_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace tg_msgs {
    namespace dds {
        /*!
         * @brief This class represents the enumeration moudleType defined by the user in the IDL file.
         * @ingroup SYSTEMINFO
         */
        enum moudleType : uint32_t
        {
            Unknown,
            CCU,
            CGU,
            CGU_TBOX,
            HMI,
            ICU
        };
        const std::string Topic_DiskMonitor = "SysMonitor/DiskMonitor";
        /*!
         * @brief This class represents the structure MsgDiskStatST defined by the user in the IDL file.
         * @ingroup SYSTEMINFO
         */
        class MsgDiskStatST
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport MsgDiskStatST();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~MsgDiskStatST();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tg_msgs::dds::MsgDiskStatST that will be copied.
             */
            eProsima_user_DllExport MsgDiskStatST(
                    const MsgDiskStatST& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tg_msgs::dds::MsgDiskStatST that will be copied.
             */
            eProsima_user_DllExport MsgDiskStatST(
                    MsgDiskStatST&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tg_msgs::dds::MsgDiskStatST that will be copied.
             */
            eProsima_user_DllExport MsgDiskStatST& operator =(
                    const MsgDiskStatST& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tg_msgs::dds::MsgDiskStatST that will be copied.
             */
            eProsima_user_DllExport MsgDiskStatST& operator =(
                    MsgDiskStatST&& x);

            /*!
             * @brief This function copies the value in member fileSystem
             * @param _fileSystem New value to be copied in member fileSystem
             */
            eProsima_user_DllExport void fileSystem(
                    const std::string& _fileSystem);

            /*!
             * @brief This function moves the value in member fileSystem
             * @param _fileSystem New value to be moved in member fileSystem
             */
            eProsima_user_DllExport void fileSystem(
                    std::string&& _fileSystem);

            /*!
             * @brief This function returns a constant reference to member fileSystem
             * @return Constant reference to member fileSystem
             */
            eProsima_user_DllExport const std::string& fileSystem() const;

            /*!
             * @brief This function returns a reference to member fileSystem
             * @return Reference to member fileSystem
             */
            eProsima_user_DllExport std::string& fileSystem();
            /*!
             * @brief This function copies the value in member mountedOn
             * @param _mountedOn New value to be copied in member mountedOn
             */
            eProsima_user_DllExport void mountedOn(
                    const std::string& _mountedOn);

            /*!
             * @brief This function moves the value in member mountedOn
             * @param _mountedOn New value to be moved in member mountedOn
             */
            eProsima_user_DllExport void mountedOn(
                    std::string&& _mountedOn);

            /*!
             * @brief This function returns a constant reference to member mountedOn
             * @return Constant reference to member mountedOn
             */
            eProsima_user_DllExport const std::string& mountedOn() const;

            /*!
             * @brief This function returns a reference to member mountedOn
             * @return Reference to member mountedOn
             */
            eProsima_user_DllExport std::string& mountedOn();
            /*!
             * @brief This function copies the value in member size
             * @param _size New value to be copied in member size
             */
            eProsima_user_DllExport void size(
                    const std::string& _size);

            /*!
             * @brief This function moves the value in member size
             * @param _size New value to be moved in member size
             */
            eProsima_user_DllExport void size(
                    std::string&& _size);

            /*!
             * @brief This function returns a constant reference to member size
             * @return Constant reference to member size
             */
            eProsima_user_DllExport const std::string& size() const;

            /*!
             * @brief This function returns a reference to member size
             * @return Reference to member size
             */
            eProsima_user_DllExport std::string& size();
            /*!
             * @brief This function copies the value in member used
             * @param _used New value to be copied in member used
             */
            eProsima_user_DllExport void used(
                    const std::string& _used);

            /*!
             * @brief This function moves the value in member used
             * @param _used New value to be moved in member used
             */
            eProsima_user_DllExport void used(
                    std::string&& _used);

            /*!
             * @brief This function returns a constant reference to member used
             * @return Constant reference to member used
             */
            eProsima_user_DllExport const std::string& used() const;

            /*!
             * @brief This function returns a reference to member used
             * @return Reference to member used
             */
            eProsima_user_DllExport std::string& used();
            /*!
             * @brief This function copies the value in member usage
             * @param _usage New value to be copied in member usage
             */
            eProsima_user_DllExport void usage(
                    const std::string& _usage);

            /*!
             * @brief This function moves the value in member usage
             * @param _usage New value to be moved in member usage
             */
            eProsima_user_DllExport void usage(
                    std::string&& _usage);

            /*!
             * @brief This function returns a constant reference to member usage
             * @return Constant reference to member usage
             */
            eProsima_user_DllExport const std::string& usage() const;

            /*!
             * @brief This function returns a reference to member usage
             * @return Reference to member usage
             */
            eProsima_user_DllExport std::string& usage();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tg_msgs::dds::MsgDiskStatST& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_fileSystem;
            std::string m_mountedOn;
            std::string m_size;
            std::string m_used;
            std::string m_usage;
        };
        /*!
         * @brief This class represents the structure MsgDiskMonitor defined by the user in the IDL file.
         * @ingroup SYSTEMINFO
         */
        class MsgDiskMonitor
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport MsgDiskMonitor();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~MsgDiskMonitor();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tg_msgs::dds::MsgDiskMonitor that will be copied.
             */
            eProsima_user_DllExport MsgDiskMonitor(
                    const MsgDiskMonitor& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tg_msgs::dds::MsgDiskMonitor that will be copied.
             */
            eProsima_user_DllExport MsgDiskMonitor(
                    MsgDiskMonitor&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tg_msgs::dds::MsgDiskMonitor that will be copied.
             */
            eProsima_user_DllExport MsgDiskMonitor& operator =(
                    const MsgDiskMonitor& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tg_msgs::dds::MsgDiskMonitor that will be copied.
             */
            eProsima_user_DllExport MsgDiskMonitor& operator =(
                    MsgDiskMonitor&& x);

            /*!
             * @brief This function sets a value in member moudle
             * @param _moudle New value for member moudle
             */
            eProsima_user_DllExport void moudle(
                    tg_msgs::dds::moudleType _moudle);

            /*!
             * @brief This function returns the value of member moudle
             * @return Value of member moudle
             */
            eProsima_user_DllExport tg_msgs::dds::moudleType moudle() const;

            /*!
             * @brief This function returns a reference to member moudle
             * @return Reference to member moudle
             */
            eProsima_user_DllExport tg_msgs::dds::moudleType& moudle();

            /*!
             * @brief This function copies the value in member diskList
             * @param _diskList New value to be copied in member diskList
             */
            eProsima_user_DllExport void diskList(
                    const std::vector<tg_msgs::dds::MsgDiskStatST>& _diskList);

            /*!
             * @brief This function moves the value in member diskList
             * @param _diskList New value to be moved in member diskList
             */
            eProsima_user_DllExport void diskList(
                    std::vector<tg_msgs::dds::MsgDiskStatST>&& _diskList);

            /*!
             * @brief This function returns a constant reference to member diskList
             * @return Constant reference to member diskList
             */
            eProsima_user_DllExport const std::vector<tg_msgs::dds::MsgDiskStatST>& diskList() const;

            /*!
             * @brief This function returns a reference to member diskList
             * @return Reference to member diskList
             */
            eProsima_user_DllExport std::vector<tg_msgs::dds::MsgDiskStatST>& diskList();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tg_msgs::dds::MsgDiskMonitor& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            tg_msgs::dds::moudleType m_moudle;
            std::vector<tg_msgs::dds::MsgDiskStatST> m_diskList;
        };
        const std::string Topic_CPUMonitor = "SysMonitor/CPUMonitor";
        /*!
         * @brief This class represents the structure MsgProcessST defined by the user in the IDL file.
         * @ingroup SYSTEMINFO
         */
        class MsgProcessST
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport MsgProcessST();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~MsgProcessST();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tg_msgs::dds::MsgProcessST that will be copied.
             */
            eProsima_user_DllExport MsgProcessST(
                    const MsgProcessST& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tg_msgs::dds::MsgProcessST that will be copied.
             */
            eProsima_user_DllExport MsgProcessST(
                    MsgProcessST&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tg_msgs::dds::MsgProcessST that will be copied.
             */
            eProsima_user_DllExport MsgProcessST& operator =(
                    const MsgProcessST& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tg_msgs::dds::MsgProcessST that will be copied.
             */
            eProsima_user_DllExport MsgProcessST& operator =(
                    MsgProcessST&& x);

            /*!
             * @brief This function copies the value in member process
             * @param _process New value to be copied in member process
             */
            eProsima_user_DllExport void process(
                    const std::string& _process);

            /*!
             * @brief This function moves the value in member process
             * @param _process New value to be moved in member process
             */
            eProsima_user_DllExport void process(
                    std::string&& _process);

            /*!
             * @brief This function returns a constant reference to member process
             * @return Constant reference to member process
             */
            eProsima_user_DllExport const std::string& process() const;

            /*!
             * @brief This function returns a reference to member process
             * @return Reference to member process
             */
            eProsima_user_DllExport std::string& process();
            /*!
             * @brief This function sets a value in member pid
             * @param _pid New value for member pid
             */
            eProsima_user_DllExport void pid(
                    uint32_t _pid);

            /*!
             * @brief This function returns the value of member pid
             * @return Value of member pid
             */
            eProsima_user_DllExport uint32_t pid() const;

            /*!
             * @brief This function returns a reference to member pid
             * @return Reference to member pid
             */
            eProsima_user_DllExport uint32_t& pid();

            /*!
             * @brief This function sets a value in member pCPUUsage
             * @param _pCPUUsage New value for member pCPUUsage
             */
            eProsima_user_DllExport void pCPUUsage(
                    float _pCPUUsage);

            /*!
             * @brief This function returns the value of member pCPUUsage
             * @return Value of member pCPUUsage
             */
            eProsima_user_DllExport float pCPUUsage() const;

            /*!
             * @brief This function returns a reference to member pCPUUsage
             * @return Reference to member pCPUUsage
             */
            eProsima_user_DllExport float& pCPUUsage();

            /*!
             * @brief This function sets a value in member pMEMUsage
             * @param _pMEMUsage New value for member pMEMUsage
             */
            eProsima_user_DllExport void pMEMUsage(
                    float _pMEMUsage);

            /*!
             * @brief This function returns the value of member pMEMUsage
             * @return Value of member pMEMUsage
             */
            eProsima_user_DllExport float pMEMUsage() const;

            /*!
             * @brief This function returns a reference to member pMEMUsage
             * @return Reference to member pMEMUsage
             */
            eProsima_user_DllExport float& pMEMUsage();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tg_msgs::dds::MsgProcessST& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_process;
            uint32_t m_pid;
            float m_pCPUUsage;
            float m_pMEMUsage;
        };
        /*!
         * @brief This class represents the structure MsgCPUMEMMonitor defined by the user in the IDL file.
         * @ingroup SYSTEMINFO
         */
        class MsgCPUMEMMonitor
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport MsgCPUMEMMonitor();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~MsgCPUMEMMonitor();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tg_msgs::dds::MsgCPUMEMMonitor that will be copied.
             */
            eProsima_user_DllExport MsgCPUMEMMonitor(
                    const MsgCPUMEMMonitor& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tg_msgs::dds::MsgCPUMEMMonitor that will be copied.
             */
            eProsima_user_DllExport MsgCPUMEMMonitor(
                    MsgCPUMEMMonitor&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tg_msgs::dds::MsgCPUMEMMonitor that will be copied.
             */
            eProsima_user_DllExport MsgCPUMEMMonitor& operator =(
                    const MsgCPUMEMMonitor& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tg_msgs::dds::MsgCPUMEMMonitor that will be copied.
             */
            eProsima_user_DllExport MsgCPUMEMMonitor& operator =(
                    MsgCPUMEMMonitor&& x);

            /*!
             * @brief This function sets a value in member moudle
             * @param _moudle New value for member moudle
             */
            eProsima_user_DllExport void moudle(
                    tg_msgs::dds::moudleType _moudle);

            /*!
             * @brief This function returns the value of member moudle
             * @return Value of member moudle
             */
            eProsima_user_DllExport tg_msgs::dds::moudleType moudle() const;

            /*!
             * @brief This function returns a reference to member moudle
             * @return Reference to member moudle
             */
            eProsima_user_DllExport tg_msgs::dds::moudleType& moudle();

            /*!
             * @brief This function sets a value in member CPUUsage
             * @param _CPUUsage New value for member CPUUsage
             */
            eProsima_user_DllExport void CPUUsage(
                    float _CPUUsage);

            /*!
             * @brief This function returns the value of member CPUUsage
             * @return Value of member CPUUsage
             */
            eProsima_user_DllExport float CPUUsage() const;

            /*!
             * @brief This function returns a reference to member CPUUsage
             * @return Reference to member CPUUsage
             */
            eProsima_user_DllExport float& CPUUsage();

            /*!
             * @brief This function sets a value in member CPUTemp
             * @param _CPUTemp New value for member CPUTemp
             */
            eProsima_user_DllExport void CPUTemp(
                    float _CPUTemp);

            /*!
             * @brief This function returns the value of member CPUTemp
             * @return Value of member CPUTemp
             */
            eProsima_user_DllExport float CPUTemp() const;

            /*!
             * @brief This function returns a reference to member CPUTemp
             * @return Reference to member CPUTemp
             */
            eProsima_user_DllExport float& CPUTemp();

            /*!
             * @brief This function sets a value in member MEMUsage
             * @param _MEMUsage New value for member MEMUsage
             */
            eProsima_user_DllExport void MEMUsage(
                    float _MEMUsage);

            /*!
             * @brief This function returns the value of member MEMUsage
             * @return Value of member MEMUsage
             */
            eProsima_user_DllExport float MEMUsage() const;

            /*!
             * @brief This function returns a reference to member MEMUsage
             * @return Reference to member MEMUsage
             */
            eProsima_user_DllExport float& MEMUsage();

            /*!
             * @brief This function copies the value in member processList
             * @param _processList New value to be copied in member processList
             */
            eProsima_user_DllExport void processList(
                    const std::vector<tg_msgs::dds::MsgProcessST>& _processList);

            /*!
             * @brief This function moves the value in member processList
             * @param _processList New value to be moved in member processList
             */
            eProsima_user_DllExport void processList(
                    std::vector<tg_msgs::dds::MsgProcessST>&& _processList);

            /*!
             * @brief This function returns a constant reference to member processList
             * @return Constant reference to member processList
             */
            eProsima_user_DllExport const std::vector<tg_msgs::dds::MsgProcessST>& processList() const;

            /*!
             * @brief This function returns a reference to member processList
             * @return Reference to member processList
             */
            eProsima_user_DllExport std::vector<tg_msgs::dds::MsgProcessST>& processList();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tg_msgs::dds::MsgCPUMEMMonitor& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            tg_msgs::dds::moudleType m_moudle;
            float m_CPUUsage;
            float m_CPUTemp;
            float m_MEMUsage;
            std::vector<tg_msgs::dds::MsgProcessST> m_processList;
        };
        const std::string Topic_KILLProcess = "SysMonitor/KILLProcess";
        /*!
         * @brief This class represents the structure MsgKILLProcess defined by the user in the IDL file.
         * @ingroup SYSTEMINFO
         */
        class MsgKILLProcess
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport MsgKILLProcess();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~MsgKILLProcess();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tg_msgs::dds::MsgKILLProcess that will be copied.
             */
            eProsima_user_DllExport MsgKILLProcess(
                    const MsgKILLProcess& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tg_msgs::dds::MsgKILLProcess that will be copied.
             */
            eProsima_user_DllExport MsgKILLProcess(
                    MsgKILLProcess&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tg_msgs::dds::MsgKILLProcess that will be copied.
             */
            eProsima_user_DllExport MsgKILLProcess& operator =(
                    const MsgKILLProcess& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tg_msgs::dds::MsgKILLProcess that will be copied.
             */
            eProsima_user_DllExport MsgKILLProcess& operator =(
                    MsgKILLProcess&& x);

            /*!
             * @brief This function sets a value in member moudle
             * @param _moudle New value for member moudle
             */
            eProsima_user_DllExport void moudle(
                    tg_msgs::dds::moudleType _moudle);

            /*!
             * @brief This function returns the value of member moudle
             * @return Value of member moudle
             */
            eProsima_user_DllExport tg_msgs::dds::moudleType moudle() const;

            /*!
             * @brief This function returns a reference to member moudle
             * @return Reference to member moudle
             */
            eProsima_user_DllExport tg_msgs::dds::moudleType& moudle();

            /*!
             * @brief This function sets a value in member pid
             * @param _pid New value for member pid
             */
            eProsima_user_DllExport void pid(
                    uint32_t _pid);

            /*!
             * @brief This function returns the value of member pid
             * @return Value of member pid
             */
            eProsima_user_DllExport uint32_t pid() const;

            /*!
             * @brief This function returns a reference to member pid
             * @return Reference to member pid
             */
            eProsima_user_DllExport uint32_t& pid();

            /*!
             * @brief This function copies the value in member name
             * @param _name New value to be copied in member name
             */
            eProsima_user_DllExport void name(
                    const std::string& _name);

            /*!
             * @brief This function moves the value in member name
             * @param _name New value to be moved in member name
             */
            eProsima_user_DllExport void name(
                    std::string&& _name);

            /*!
             * @brief This function returns a constant reference to member name
             * @return Constant reference to member name
             */
            eProsima_user_DllExport const std::string& name() const;

            /*!
             * @brief This function returns a reference to member name
             * @return Reference to member name
             */
            eProsima_user_DllExport std::string& name();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tg_msgs::dds::MsgKILLProcess& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            tg_msgs::dds::moudleType m_moudle;
            uint32_t m_pid;
            std::string m_name;
        };
        const std::string Topic_ClearAll = "SysMonitor/ClearAll";
        /*!
         * @brief This class represents the structure MsgClearAll defined by the user in the IDL file.
         * @ingroup SYSTEMINFO
         */
        class MsgClearAll
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport MsgClearAll();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~MsgClearAll();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tg_msgs::dds::MsgClearAll that will be copied.
             */
            eProsima_user_DllExport MsgClearAll(
                    const MsgClearAll& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tg_msgs::dds::MsgClearAll that will be copied.
             */
            eProsima_user_DllExport MsgClearAll(
                    MsgClearAll&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tg_msgs::dds::MsgClearAll that will be copied.
             */
            eProsima_user_DllExport MsgClearAll& operator =(
                    const MsgClearAll& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tg_msgs::dds::MsgClearAll that will be copied.
             */
            eProsima_user_DllExport MsgClearAll& operator =(
                    MsgClearAll&& x);

            /*!
             * @brief This function sets a value in member moudle
             * @param _moudle New value for member moudle
             */
            eProsima_user_DllExport void moudle(
                    tg_msgs::dds::moudleType _moudle);

            /*!
             * @brief This function returns the value of member moudle
             * @return Value of member moudle
             */
            eProsima_user_DllExport tg_msgs::dds::moudleType moudle() const;

            /*!
             * @brief This function returns a reference to member moudle
             * @return Reference to member moudle
             */
            eProsima_user_DllExport tg_msgs::dds::moudleType& moudle();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tg_msgs::dds::MsgClearAll& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            tg_msgs::dds::moudleType m_moudle;
        };
        const std::string Topic_ShellCMD = "SysMonitor/ShellCMD";
        /*!
         * @brief This class represents the structure MsgShellCMD defined by the user in the IDL file.
         * @ingroup SYSTEMINFO
         */
        class MsgShellCMD
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport MsgShellCMD();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~MsgShellCMD();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tg_msgs::dds::MsgShellCMD that will be copied.
             */
            eProsima_user_DllExport MsgShellCMD(
                    const MsgShellCMD& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tg_msgs::dds::MsgShellCMD that will be copied.
             */
            eProsima_user_DllExport MsgShellCMD(
                    MsgShellCMD&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tg_msgs::dds::MsgShellCMD that will be copied.
             */
            eProsima_user_DllExport MsgShellCMD& operator =(
                    const MsgShellCMD& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tg_msgs::dds::MsgShellCMD that will be copied.
             */
            eProsima_user_DllExport MsgShellCMD& operator =(
                    MsgShellCMD&& x);

            /*!
             * @brief This function sets a value in member moudle
             * @param _moudle New value for member moudle
             */
            eProsima_user_DllExport void moudle(
                    tg_msgs::dds::moudleType _moudle);

            /*!
             * @brief This function returns the value of member moudle
             * @return Value of member moudle
             */
            eProsima_user_DllExport tg_msgs::dds::moudleType moudle() const;

            /*!
             * @brief This function returns a reference to member moudle
             * @return Reference to member moudle
             */
            eProsima_user_DllExport tg_msgs::dds::moudleType& moudle();

            /*!
             * @brief This function sets a value in member overTime
             * @param _overTime New value for member overTime
             */
            eProsima_user_DllExport void overTime(
                    uint16_t _overTime);

            /*!
             * @brief This function returns the value of member overTime
             * @return Value of member overTime
             */
            eProsima_user_DllExport uint16_t overTime() const;

            /*!
             * @brief This function returns a reference to member overTime
             * @return Reference to member overTime
             */
            eProsima_user_DllExport uint16_t& overTime();

            /*!
             * @brief This function copies the value in member cmd
             * @param _cmd New value to be copied in member cmd
             */
            eProsima_user_DllExport void cmd(
                    const std::string& _cmd);

            /*!
             * @brief This function moves the value in member cmd
             * @param _cmd New value to be moved in member cmd
             */
            eProsima_user_DllExport void cmd(
                    std::string&& _cmd);

            /*!
             * @brief This function returns a constant reference to member cmd
             * @return Constant reference to member cmd
             */
            eProsima_user_DllExport const std::string& cmd() const;

            /*!
             * @brief This function returns a reference to member cmd
             * @return Reference to member cmd
             */
            eProsima_user_DllExport std::string& cmd();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tg_msgs::dds::MsgShellCMD& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            tg_msgs::dds::moudleType m_moudle;
            uint16_t m_overTime;
            std::string m_cmd;
        };
        const std::string Topic_ShellCMDResult = "SysMonitor/ShellCMDResult";
        /*!
         * @brief This class represents the structure MsgShellCMDResult defined by the user in the IDL file.
         * @ingroup SYSTEMINFO
         */
        class MsgShellCMDResult
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport MsgShellCMDResult();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~MsgShellCMDResult();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tg_msgs::dds::MsgShellCMDResult that will be copied.
             */
            eProsima_user_DllExport MsgShellCMDResult(
                    const MsgShellCMDResult& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tg_msgs::dds::MsgShellCMDResult that will be copied.
             */
            eProsima_user_DllExport MsgShellCMDResult(
                    MsgShellCMDResult&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tg_msgs::dds::MsgShellCMDResult that will be copied.
             */
            eProsima_user_DllExport MsgShellCMDResult& operator =(
                    const MsgShellCMDResult& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tg_msgs::dds::MsgShellCMDResult that will be copied.
             */
            eProsima_user_DllExport MsgShellCMDResult& operator =(
                    MsgShellCMDResult&& x);

            /*!
             * @brief This function sets a value in member moudle
             * @param _moudle New value for member moudle
             */
            eProsima_user_DllExport void moudle(
                    tg_msgs::dds::moudleType _moudle);

            /*!
             * @brief This function returns the value of member moudle
             * @return Value of member moudle
             */
            eProsima_user_DllExport tg_msgs::dds::moudleType moudle() const;

            /*!
             * @brief This function returns a reference to member moudle
             * @return Reference to member moudle
             */
            eProsima_user_DllExport tg_msgs::dds::moudleType& moudle();

            /*!
             * @brief This function copies the value in member cmd
             * @param _cmd New value to be copied in member cmd
             */
            eProsima_user_DllExport void cmd(
                    const std::string& _cmd);

            /*!
             * @brief This function moves the value in member cmd
             * @param _cmd New value to be moved in member cmd
             */
            eProsima_user_DllExport void cmd(
                    std::string&& _cmd);

            /*!
             * @brief This function returns a constant reference to member cmd
             * @return Constant reference to member cmd
             */
            eProsima_user_DllExport const std::string& cmd() const;

            /*!
             * @brief This function returns a reference to member cmd
             * @return Reference to member cmd
             */
            eProsima_user_DllExport std::string& cmd();
            /*!
             * @brief This function copies the value in member result
             * @param _result New value to be copied in member result
             */
            eProsima_user_DllExport void result(
                    const std::string& _result);

            /*!
             * @brief This function moves the value in member result
             * @param _result New value to be moved in member result
             */
            eProsima_user_DllExport void result(
                    std::string&& _result);

            /*!
             * @brief This function returns a constant reference to member result
             * @return Constant reference to member result
             */
            eProsima_user_DllExport const std::string& result() const;

            /*!
             * @brief This function returns a reference to member result
             * @return Reference to member result
             */
            eProsima_user_DllExport std::string& result();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tg_msgs::dds::MsgShellCMDResult& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            tg_msgs::dds::moudleType m_moudle;
            std::string m_cmd;
            std::string m_result;
        };
    } // namespace dds
} // namespace tg_msgs

#endif // _TG_MSGS_DDS_SYSTEMINFO_H_