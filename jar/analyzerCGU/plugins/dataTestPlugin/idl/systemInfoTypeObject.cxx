// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file systemInfoTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "systemInfo.h"
#include "systemInfoTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registersystemInfoTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::get_instance();
}

const TypeIdentifier* GetmoudleTypeIdentifier(bool complete)
{
    const TypeIdentifier* c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("moudleType", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetmoudleTypeObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("moudleType", complete);
}

const TypeObject* GetmoudleTypeObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("moudleType", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompletemoudleTypeObject();
    }
    // else
    return GetMinimalmoudleTypeObject();
}

const TypeObject* GetMinimalmoudleTypeObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("moudleType", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_ENUM);

    // No flags apply
    //type_object->minimal().enumerated_type().enum_flags().IS_FINAL(false);
    //type_object->minimal().enumerated_type().enum_flags().IS_APPENDABLE(false);
    //type_object->minimal().enumerated_type().enum_flags().IS_MUTABLE(false);
    //type_object->minimal().enumerated_type().enum_flags().IS_NESTED(false);
    //type_object->minimal().enumerated_type().enum_flags().IS_AUTOID_HASH(false);

    type_object->minimal().enumerated_type().header().common().bit_bound(32); // TODO fixed by IDL, isn't?

    uint32_t value = 0;
    MinimalEnumeratedLiteral mel_Unknown;
    mel_Unknown.common().flags().TRY_CONSTRUCT1(false); // Doesn't apply
    mel_Unknown.common().flags().TRY_CONSTRUCT2(false); // Doesn't apply
    mel_Unknown.common().flags().IS_EXTERNAL(false); // Doesn't apply
    mel_Unknown.common().flags().IS_OPTIONAL(false); // Doesn't apply
    mel_Unknown.common().flags().IS_MUST_UNDERSTAND(false); // Doesn't apply
    mel_Unknown.common().flags().IS_KEY(false); // Doesn't apply
    mel_Unknown.common().flags().IS_DEFAULT(false);
    mel_Unknown.common().value(value++);
    MD5 Unknown_hash("Unknown");
    for(int i = 0; i < 4; ++i)
    {
        mel_Unknown.detail().name_hash()[i] = Unknown_hash.digest[i];
    }
    type_object->minimal().enumerated_type().literal_seq().emplace_back(mel_Unknown);

    MinimalEnumeratedLiteral mel_CCU;
    mel_CCU.common().flags().TRY_CONSTRUCT1(false); // Doesn't apply
    mel_CCU.common().flags().TRY_CONSTRUCT2(false); // Doesn't apply
    mel_CCU.common().flags().IS_EXTERNAL(false); // Doesn't apply
    mel_CCU.common().flags().IS_OPTIONAL(false); // Doesn't apply
    mel_CCU.common().flags().IS_MUST_UNDERSTAND(false); // Doesn't apply
    mel_CCU.common().flags().IS_KEY(false); // Doesn't apply
    mel_CCU.common().flags().IS_DEFAULT(false);
    mel_CCU.common().value(value++);
    MD5 CCU_hash("CCU");
    for(int i = 0; i < 4; ++i)
    {
        mel_CCU.detail().name_hash()[i] = CCU_hash.digest[i];
    }
    type_object->minimal().enumerated_type().literal_seq().emplace_back(mel_CCU);

    MinimalEnumeratedLiteral mel_CGU;
    mel_CGU.common().flags().TRY_CONSTRUCT1(false); // Doesn't apply
    mel_CGU.common().flags().TRY_CONSTRUCT2(false); // Doesn't apply
    mel_CGU.common().flags().IS_EXTERNAL(false); // Doesn't apply
    mel_CGU.common().flags().IS_OPTIONAL(false); // Doesn't apply
    mel_CGU.common().flags().IS_MUST_UNDERSTAND(false); // Doesn't apply
    mel_CGU.common().flags().IS_KEY(false); // Doesn't apply
    mel_CGU.common().flags().IS_DEFAULT(false);
    mel_CGU.common().value(value++);
    MD5 CGU_hash("CGU");
    for(int i = 0; i < 4; ++i)
    {
        mel_CGU.detail().name_hash()[i] = CGU_hash.digest[i];
    }
    type_object->minimal().enumerated_type().literal_seq().emplace_back(mel_CGU);

    MinimalEnumeratedLiteral mel_CGU_TBOX;
    mel_CGU_TBOX.common().flags().TRY_CONSTRUCT1(false); // Doesn't apply
    mel_CGU_TBOX.common().flags().TRY_CONSTRUCT2(false); // Doesn't apply
    mel_CGU_TBOX.common().flags().IS_EXTERNAL(false); // Doesn't apply
    mel_CGU_TBOX.common().flags().IS_OPTIONAL(false); // Doesn't apply
    mel_CGU_TBOX.common().flags().IS_MUST_UNDERSTAND(false); // Doesn't apply
    mel_CGU_TBOX.common().flags().IS_KEY(false); // Doesn't apply
    mel_CGU_TBOX.common().flags().IS_DEFAULT(false);
    mel_CGU_TBOX.common().value(value++);
    MD5 CGU_TBOX_hash("CGU_TBOX");
    for(int i = 0; i < 4; ++i)
    {
        mel_CGU_TBOX.detail().name_hash()[i] = CGU_TBOX_hash.digest[i];
    }
    type_object->minimal().enumerated_type().literal_seq().emplace_back(mel_CGU_TBOX);

    MinimalEnumeratedLiteral mel_HMI;
    mel_HMI.common().flags().TRY_CONSTRUCT1(false); // Doesn't apply
    mel_HMI.common().flags().TRY_CONSTRUCT2(false); // Doesn't apply
    mel_HMI.common().flags().IS_EXTERNAL(false); // Doesn't apply
    mel_HMI.common().flags().IS_OPTIONAL(false); // Doesn't apply
    mel_HMI.common().flags().IS_MUST_UNDERSTAND(false); // Doesn't apply
    mel_HMI.common().flags().IS_KEY(false); // Doesn't apply
    mel_HMI.common().flags().IS_DEFAULT(false);
    mel_HMI.common().value(value++);
    MD5 HMI_hash("HMI");
    for(int i = 0; i < 4; ++i)
    {
        mel_HMI.detail().name_hash()[i] = HMI_hash.digest[i];
    }
    type_object->minimal().enumerated_type().literal_seq().emplace_back(mel_HMI);

    MinimalEnumeratedLiteral mel_ICU;
    mel_ICU.common().flags().TRY_CONSTRUCT1(false); // Doesn't apply
    mel_ICU.common().flags().TRY_CONSTRUCT2(false); // Doesn't apply
    mel_ICU.common().flags().IS_EXTERNAL(false); // Doesn't apply
    mel_ICU.common().flags().IS_OPTIONAL(false); // Doesn't apply
    mel_ICU.common().flags().IS_MUST_UNDERSTAND(false); // Doesn't apply
    mel_ICU.common().flags().IS_KEY(false); // Doesn't apply
    mel_ICU.common().flags().IS_DEFAULT(false);
    mel_ICU.common().value(value++);
    MD5 ICU_hash("ICU");
    for(int i = 0; i < 4; ++i)
    {
        mel_ICU.detail().name_hash()[i] = ICU_hash.digest[i];
    }
    type_object->minimal().enumerated_type().literal_seq().emplace_back(mel_ICU);


    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalEnumeratedType::getCdrSerializedSize(type_object->minimal().enumerated_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("moudleType", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("moudleType", false);
}

const TypeObject* GetCompletemoudleTypeObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("moudleType", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_ENUM);

    // No flags apply
    //type_object->complete().enumerated_type().enum_flags().IS_FINAL(false);
    //type_object->complete().enumerated_type().enum_flags().IS_APPENDABLE(false);
    //type_object->complete().enumerated_type().enum_flags().IS_MUTABLE(false);
    //type_object->complete().enumerated_type().enum_flags().IS_NESTED(false);
    //type_object->complete().enumerated_type().enum_flags().IS_AUTOID_HASH(false);

    type_object->complete().enumerated_type().header().common().bit_bound(32); // TODO fixed by IDL, isn't?
    type_object->complete().enumerated_type().header().detail().type_name("moudleType");


    uint32_t value = 0;
    CompleteEnumeratedLiteral cel_Unknown;
    cel_Unknown.common().flags().TRY_CONSTRUCT1(false); // Doesn't apply
    cel_Unknown.common().flags().TRY_CONSTRUCT2(false); // Doesn't apply
    cel_Unknown.common().flags().IS_EXTERNAL(false); // Doesn't apply
    cel_Unknown.common().flags().IS_OPTIONAL(false); // Doesn't apply
    cel_Unknown.common().flags().IS_MUST_UNDERSTAND(false); // Doesn't apply
    cel_Unknown.common().flags().IS_KEY(false); // Doesn't apply
    cel_Unknown.common().flags().IS_DEFAULT(false);
    cel_Unknown.common().value(value++);
    cel_Unknown.detail().name("Unknown");

    type_object->complete().enumerated_type().literal_seq().emplace_back(cel_Unknown);

    CompleteEnumeratedLiteral cel_CCU;
    cel_CCU.common().flags().TRY_CONSTRUCT1(false); // Doesn't apply
    cel_CCU.common().flags().TRY_CONSTRUCT2(false); // Doesn't apply
    cel_CCU.common().flags().IS_EXTERNAL(false); // Doesn't apply
    cel_CCU.common().flags().IS_OPTIONAL(false); // Doesn't apply
    cel_CCU.common().flags().IS_MUST_UNDERSTAND(false); // Doesn't apply
    cel_CCU.common().flags().IS_KEY(false); // Doesn't apply
    cel_CCU.common().flags().IS_DEFAULT(false);
    cel_CCU.common().value(value++);
    cel_CCU.detail().name("CCU");

    type_object->complete().enumerated_type().literal_seq().emplace_back(cel_CCU);

    CompleteEnumeratedLiteral cel_CGU;
    cel_CGU.common().flags().TRY_CONSTRUCT1(false); // Doesn't apply
    cel_CGU.common().flags().TRY_CONSTRUCT2(false); // Doesn't apply
    cel_CGU.common().flags().IS_EXTERNAL(false); // Doesn't apply
    cel_CGU.common().flags().IS_OPTIONAL(false); // Doesn't apply
    cel_CGU.common().flags().IS_MUST_UNDERSTAND(false); // Doesn't apply
    cel_CGU.common().flags().IS_KEY(false); // Doesn't apply
    cel_CGU.common().flags().IS_DEFAULT(false);
    cel_CGU.common().value(value++);
    cel_CGU.detail().name("CGU");

    type_object->complete().enumerated_type().literal_seq().emplace_back(cel_CGU);

    CompleteEnumeratedLiteral cel_CGU_TBOX;
    cel_CGU_TBOX.common().flags().TRY_CONSTRUCT1(false); // Doesn't apply
    cel_CGU_TBOX.common().flags().TRY_CONSTRUCT2(false); // Doesn't apply
    cel_CGU_TBOX.common().flags().IS_EXTERNAL(false); // Doesn't apply
    cel_CGU_TBOX.common().flags().IS_OPTIONAL(false); // Doesn't apply
    cel_CGU_TBOX.common().flags().IS_MUST_UNDERSTAND(false); // Doesn't apply
    cel_CGU_TBOX.common().flags().IS_KEY(false); // Doesn't apply
    cel_CGU_TBOX.common().flags().IS_DEFAULT(false);
    cel_CGU_TBOX.common().value(value++);
    cel_CGU_TBOX.detail().name("CGU_TBOX");

    type_object->complete().enumerated_type().literal_seq().emplace_back(cel_CGU_TBOX);

    CompleteEnumeratedLiteral cel_HMI;
    cel_HMI.common().flags().TRY_CONSTRUCT1(false); // Doesn't apply
    cel_HMI.common().flags().TRY_CONSTRUCT2(false); // Doesn't apply
    cel_HMI.common().flags().IS_EXTERNAL(false); // Doesn't apply
    cel_HMI.common().flags().IS_OPTIONAL(false); // Doesn't apply
    cel_HMI.common().flags().IS_MUST_UNDERSTAND(false); // Doesn't apply
    cel_HMI.common().flags().IS_KEY(false); // Doesn't apply
    cel_HMI.common().flags().IS_DEFAULT(false);
    cel_HMI.common().value(value++);
    cel_HMI.detail().name("HMI");

    type_object->complete().enumerated_type().literal_seq().emplace_back(cel_HMI);

    CompleteEnumeratedLiteral cel_ICU;
    cel_ICU.common().flags().TRY_CONSTRUCT1(false); // Doesn't apply
    cel_ICU.common().flags().TRY_CONSTRUCT2(false); // Doesn't apply
    cel_ICU.common().flags().IS_EXTERNAL(false); // Doesn't apply
    cel_ICU.common().flags().IS_OPTIONAL(false); // Doesn't apply
    cel_ICU.common().flags().IS_MUST_UNDERSTAND(false); // Doesn't apply
    cel_ICU.common().flags().IS_KEY(false); // Doesn't apply
    cel_ICU.common().flags().IS_DEFAULT(false);
    cel_ICU.common().value(value++);
    cel_ICU.detail().name("ICU");

    type_object->complete().enumerated_type().literal_seq().emplace_back(cel_ICU);


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteEnumeratedType::getCdrSerializedSize(type_object->complete().enumerated_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("moudleType", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("moudleType", true);
}


const TypeIdentifier* GetMsgDiskStatSTIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("MsgDiskStatST", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetMsgDiskStatSTObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("MsgDiskStatST", complete);
}

const TypeObject* GetMsgDiskStatSTObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgDiskStatST", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteMsgDiskStatSTObject();
    }
    //else
    return GetMinimalMsgDiskStatSTObject();
}

const TypeObject* GetMinimalMsgDiskStatSTObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgDiskStatST", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_fileSystem;
    mst_fileSystem.common().member_id(memberId++);
    mst_fileSystem.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_fileSystem.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_fileSystem.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_fileSystem.common().member_flags().IS_OPTIONAL(false);
    mst_fileSystem.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_fileSystem.common().member_flags().IS_KEY(false);
    mst_fileSystem.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_fileSystem.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 fileSystem_hash("fileSystem");
    for(int i = 0; i < 4; ++i)
    {
        mst_fileSystem.detail().name_hash()[i] = fileSystem_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_fileSystem);

    MinimalStructMember mst_mountedOn;
    mst_mountedOn.common().member_id(memberId++);
    mst_mountedOn.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_mountedOn.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_mountedOn.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_mountedOn.common().member_flags().IS_OPTIONAL(false);
    mst_mountedOn.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_mountedOn.common().member_flags().IS_KEY(false);
    mst_mountedOn.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_mountedOn.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 mountedOn_hash("mountedOn");
    for(int i = 0; i < 4; ++i)
    {
        mst_mountedOn.detail().name_hash()[i] = mountedOn_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_mountedOn);

    MinimalStructMember mst_size;
    mst_size.common().member_id(memberId++);
    mst_size.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_size.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_size.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_size.common().member_flags().IS_OPTIONAL(false);
    mst_size.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_size.common().member_flags().IS_KEY(false);
    mst_size.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_size.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 size_hash("size");
    for(int i = 0; i < 4; ++i)
    {
        mst_size.detail().name_hash()[i] = size_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_size);

    MinimalStructMember mst_used;
    mst_used.common().member_id(memberId++);
    mst_used.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_used.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_used.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_used.common().member_flags().IS_OPTIONAL(false);
    mst_used.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_used.common().member_flags().IS_KEY(false);
    mst_used.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_used.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 used_hash("used");
    for(int i = 0; i < 4; ++i)
    {
        mst_used.detail().name_hash()[i] = used_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_used);

    MinimalStructMember mst_usage;
    mst_usage.common().member_id(memberId++);
    mst_usage.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_usage.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_usage.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_usage.common().member_flags().IS_OPTIONAL(false);
    mst_usage.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_usage.common().member_flags().IS_KEY(false);
    mst_usage.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_usage.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 usage_hash("usage");
    for(int i = 0; i < 4; ++i)
    {
        mst_usage.detail().name_hash()[i] = usage_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_usage);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgDiskStatST", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgDiskStatST", false);
}

const TypeObject* GetCompleteMsgDiskStatSTObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgDiskStatST", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_fileSystem;
    cst_fileSystem.common().member_id(memberId++);
    cst_fileSystem.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_fileSystem.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_fileSystem.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_fileSystem.common().member_flags().IS_OPTIONAL(false);
    cst_fileSystem.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_fileSystem.common().member_flags().IS_KEY(false);
    cst_fileSystem.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_fileSystem.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_fileSystem.detail().name("fileSystem");

    type_object->complete().struct_type().member_seq().emplace_back(cst_fileSystem);

    CompleteStructMember cst_mountedOn;
    cst_mountedOn.common().member_id(memberId++);
    cst_mountedOn.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_mountedOn.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_mountedOn.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_mountedOn.common().member_flags().IS_OPTIONAL(false);
    cst_mountedOn.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_mountedOn.common().member_flags().IS_KEY(false);
    cst_mountedOn.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_mountedOn.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_mountedOn.detail().name("mountedOn");

    type_object->complete().struct_type().member_seq().emplace_back(cst_mountedOn);

    CompleteStructMember cst_size;
    cst_size.common().member_id(memberId++);
    cst_size.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_size.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_size.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_size.common().member_flags().IS_OPTIONAL(false);
    cst_size.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_size.common().member_flags().IS_KEY(false);
    cst_size.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_size.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_size.detail().name("size");

    type_object->complete().struct_type().member_seq().emplace_back(cst_size);

    CompleteStructMember cst_used;
    cst_used.common().member_id(memberId++);
    cst_used.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_used.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_used.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_used.common().member_flags().IS_OPTIONAL(false);
    cst_used.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_used.common().member_flags().IS_KEY(false);
    cst_used.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_used.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_used.detail().name("used");

    type_object->complete().struct_type().member_seq().emplace_back(cst_used);

    CompleteStructMember cst_usage;
    cst_usage.common().member_id(memberId++);
    cst_usage.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_usage.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_usage.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_usage.common().member_flags().IS_OPTIONAL(false);
    cst_usage.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_usage.common().member_flags().IS_KEY(false);
    cst_usage.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_usage.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_usage.detail().name("usage");

    type_object->complete().struct_type().member_seq().emplace_back(cst_usage);


    // Header
    type_object->complete().struct_type().header().detail().type_name("MsgDiskStatST");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgDiskStatST", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgDiskStatST", true);
}

const TypeIdentifier* GetMsgDiskMonitorIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("MsgDiskMonitor", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetMsgDiskMonitorObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("MsgDiskMonitor", complete);
}

const TypeObject* GetMsgDiskMonitorObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgDiskMonitor", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteMsgDiskMonitorObject();
    }
    //else
    return GetMinimalMsgDiskMonitorObject();
}

const TypeObject* GetMinimalMsgDiskMonitorObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgDiskMonitor", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_moudle;
    mst_moudle.common().member_id(memberId++);
    mst_moudle.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_moudle.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_moudle.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_moudle.common().member_flags().IS_OPTIONAL(false);
    mst_moudle.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_moudle.common().member_flags().IS_KEY(false);
    mst_moudle.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_moudle.common().member_type_id(*GetmoudleTypeIdentifier(false));
    MD5 moudle_hash("moudle");
    for(int i = 0; i < 4; ++i)
    {
        mst_moudle.detail().name_hash()[i] = moudle_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_moudle);

    MinimalStructMember mst_diskList;
    mst_diskList.common().member_id(memberId++);
    mst_diskList.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_diskList.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_diskList.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_diskList.common().member_flags().IS_OPTIONAL(false);
    mst_diskList.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_diskList.common().member_flags().IS_KEY(false);
    mst_diskList.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_diskList.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("tg_msgs::dds::MsgDiskStatST", 0, false));


    MD5 diskList_hash("diskList");
    for(int i = 0; i < 4; ++i)
    {
        mst_diskList.detail().name_hash()[i] = diskList_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_diskList);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgDiskMonitor", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgDiskMonitor", false);
}

const TypeObject* GetCompleteMsgDiskMonitorObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgDiskMonitor", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_moudle;
    cst_moudle.common().member_id(memberId++);
    cst_moudle.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_moudle.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_moudle.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_moudle.common().member_flags().IS_OPTIONAL(false);
    cst_moudle.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_moudle.common().member_flags().IS_KEY(false);
    cst_moudle.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_moudle.common().member_type_id(*GetmoudleTypeIdentifier(true));
    cst_moudle.detail().name("moudle");

    type_object->complete().struct_type().member_seq().emplace_back(cst_moudle);

    CompleteStructMember cst_diskList;
    cst_diskList.common().member_id(memberId++);
    cst_diskList.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_diskList.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_diskList.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_diskList.common().member_flags().IS_OPTIONAL(false);
    cst_diskList.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_diskList.common().member_flags().IS_KEY(false);
    cst_diskList.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_diskList.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("tg_msgs::dds::MsgDiskStatST", 0, true));


    cst_diskList.detail().name("diskList");

    type_object->complete().struct_type().member_seq().emplace_back(cst_diskList);


    // Header
    type_object->complete().struct_type().header().detail().type_name("MsgDiskMonitor");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgDiskMonitor", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgDiskMonitor", true);
}


const TypeIdentifier* GetMsgProcessSTIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("MsgProcessST", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetMsgProcessSTObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("MsgProcessST", complete);
}

const TypeObject* GetMsgProcessSTObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgProcessST", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteMsgProcessSTObject();
    }
    //else
    return GetMinimalMsgProcessSTObject();
}

const TypeObject* GetMinimalMsgProcessSTObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgProcessST", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_process;
    mst_process.common().member_id(memberId++);
    mst_process.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_process.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_process.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_process.common().member_flags().IS_OPTIONAL(false);
    mst_process.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_process.common().member_flags().IS_KEY(false);
    mst_process.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_process.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 process_hash("process");
    for(int i = 0; i < 4; ++i)
    {
        mst_process.detail().name_hash()[i] = process_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_process);

    MinimalStructMember mst_pid;
    mst_pid.common().member_id(memberId++);
    mst_pid.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_pid.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_pid.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_pid.common().member_flags().IS_OPTIONAL(false);
    mst_pid.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_pid.common().member_flags().IS_KEY(false);
    mst_pid.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_pid.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    MD5 pid_hash("pid");
    for(int i = 0; i < 4; ++i)
    {
        mst_pid.detail().name_hash()[i] = pid_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_pid);

    MinimalStructMember mst_pCPUUsage;
    mst_pCPUUsage.common().member_id(memberId++);
    mst_pCPUUsage.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_pCPUUsage.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_pCPUUsage.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_pCPUUsage.common().member_flags().IS_OPTIONAL(false);
    mst_pCPUUsage.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_pCPUUsage.common().member_flags().IS_KEY(false);
    mst_pCPUUsage.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "float";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_pCPUUsage.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    MD5 pCPUUsage_hash("pCPUUsage");
    for(int i = 0; i < 4; ++i)
    {
        mst_pCPUUsage.detail().name_hash()[i] = pCPUUsage_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_pCPUUsage);

    MinimalStructMember mst_pMEMUsage;
    mst_pMEMUsage.common().member_id(memberId++);
    mst_pMEMUsage.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_pMEMUsage.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_pMEMUsage.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_pMEMUsage.common().member_flags().IS_OPTIONAL(false);
    mst_pMEMUsage.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_pMEMUsage.common().member_flags().IS_KEY(false);
    mst_pMEMUsage.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "float";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_pMEMUsage.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    MD5 pMEMUsage_hash("pMEMUsage");
    for(int i = 0; i < 4; ++i)
    {
        mst_pMEMUsage.detail().name_hash()[i] = pMEMUsage_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_pMEMUsage);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgProcessST", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgProcessST", false);
}

const TypeObject* GetCompleteMsgProcessSTObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgProcessST", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_process;
    cst_process.common().member_id(memberId++);
    cst_process.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_process.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_process.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_process.common().member_flags().IS_OPTIONAL(false);
    cst_process.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_process.common().member_flags().IS_KEY(false);
    cst_process.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_process.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_process.detail().name("process");

    type_object->complete().struct_type().member_seq().emplace_back(cst_process);

    CompleteStructMember cst_pid;
    cst_pid.common().member_id(memberId++);
    cst_pid.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_pid.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_pid.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_pid.common().member_flags().IS_OPTIONAL(false);
    cst_pid.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_pid.common().member_flags().IS_KEY(false);
    cst_pid.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_pid.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    cst_pid.detail().name("pid");

    type_object->complete().struct_type().member_seq().emplace_back(cst_pid);

    CompleteStructMember cst_pCPUUsage;
    cst_pCPUUsage.common().member_id(memberId++);
    cst_pCPUUsage.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_pCPUUsage.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_pCPUUsage.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_pCPUUsage.common().member_flags().IS_OPTIONAL(false);
    cst_pCPUUsage.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_pCPUUsage.common().member_flags().IS_KEY(false);
    cst_pCPUUsage.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "float";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_pCPUUsage.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    cst_pCPUUsage.detail().name("pCPUUsage");

    type_object->complete().struct_type().member_seq().emplace_back(cst_pCPUUsage);

    CompleteStructMember cst_pMEMUsage;
    cst_pMEMUsage.common().member_id(memberId++);
    cst_pMEMUsage.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_pMEMUsage.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_pMEMUsage.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_pMEMUsage.common().member_flags().IS_OPTIONAL(false);
    cst_pMEMUsage.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_pMEMUsage.common().member_flags().IS_KEY(false);
    cst_pMEMUsage.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "float";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_pMEMUsage.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    cst_pMEMUsage.detail().name("pMEMUsage");

    type_object->complete().struct_type().member_seq().emplace_back(cst_pMEMUsage);


    // Header
    type_object->complete().struct_type().header().detail().type_name("MsgProcessST");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgProcessST", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgProcessST", true);
}

const TypeIdentifier* GetMsgCPUMEMMonitorIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("MsgCPUMEMMonitor", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetMsgCPUMEMMonitorObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("MsgCPUMEMMonitor", complete);
}

const TypeObject* GetMsgCPUMEMMonitorObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgCPUMEMMonitor", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteMsgCPUMEMMonitorObject();
    }
    //else
    return GetMinimalMsgCPUMEMMonitorObject();
}

const TypeObject* GetMinimalMsgCPUMEMMonitorObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgCPUMEMMonitor", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_moudle;
    mst_moudle.common().member_id(memberId++);
    mst_moudle.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_moudle.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_moudle.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_moudle.common().member_flags().IS_OPTIONAL(false);
    mst_moudle.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_moudle.common().member_flags().IS_KEY(false);
    mst_moudle.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_moudle.common().member_type_id(*GetmoudleTypeIdentifier(false));
    MD5 moudle_hash("moudle");
    for(int i = 0; i < 4; ++i)
    {
        mst_moudle.detail().name_hash()[i] = moudle_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_moudle);

    MinimalStructMember mst_CPUUsage;
    mst_CPUUsage.common().member_id(memberId++);
    mst_CPUUsage.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_CPUUsage.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_CPUUsage.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_CPUUsage.common().member_flags().IS_OPTIONAL(false);
    mst_CPUUsage.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_CPUUsage.common().member_flags().IS_KEY(false);
    mst_CPUUsage.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "float";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_CPUUsage.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    MD5 CPUUsage_hash("CPUUsage");
    for(int i = 0; i < 4; ++i)
    {
        mst_CPUUsage.detail().name_hash()[i] = CPUUsage_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_CPUUsage);

    MinimalStructMember mst_CPUTemp;
    mst_CPUTemp.common().member_id(memberId++);
    mst_CPUTemp.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_CPUTemp.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_CPUTemp.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_CPUTemp.common().member_flags().IS_OPTIONAL(false);
    mst_CPUTemp.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_CPUTemp.common().member_flags().IS_KEY(false);
    mst_CPUTemp.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "float";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_CPUTemp.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    MD5 CPUTemp_hash("CPUTemp");
    for(int i = 0; i < 4; ++i)
    {
        mst_CPUTemp.detail().name_hash()[i] = CPUTemp_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_CPUTemp);

    MinimalStructMember mst_MEMUsage;
    mst_MEMUsage.common().member_id(memberId++);
    mst_MEMUsage.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_MEMUsage.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_MEMUsage.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_MEMUsage.common().member_flags().IS_OPTIONAL(false);
    mst_MEMUsage.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_MEMUsage.common().member_flags().IS_KEY(false);
    mst_MEMUsage.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "float";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_MEMUsage.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    MD5 MEMUsage_hash("MEMUsage");
    for(int i = 0; i < 4; ++i)
    {
        mst_MEMUsage.detail().name_hash()[i] = MEMUsage_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_MEMUsage);

    MinimalStructMember mst_processList;
    mst_processList.common().member_id(memberId++);
    mst_processList.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_processList.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_processList.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_processList.common().member_flags().IS_OPTIONAL(false);
    mst_processList.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_processList.common().member_flags().IS_KEY(false);
    mst_processList.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_processList.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("tg_msgs::dds::MsgProcessST", 0, false));


    MD5 processList_hash("processList");
    for(int i = 0; i < 4; ++i)
    {
        mst_processList.detail().name_hash()[i] = processList_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_processList);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgCPUMEMMonitor", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgCPUMEMMonitor", false);
}

const TypeObject* GetCompleteMsgCPUMEMMonitorObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgCPUMEMMonitor", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_moudle;
    cst_moudle.common().member_id(memberId++);
    cst_moudle.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_moudle.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_moudle.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_moudle.common().member_flags().IS_OPTIONAL(false);
    cst_moudle.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_moudle.common().member_flags().IS_KEY(false);
    cst_moudle.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_moudle.common().member_type_id(*GetmoudleTypeIdentifier(true));
    cst_moudle.detail().name("moudle");

    type_object->complete().struct_type().member_seq().emplace_back(cst_moudle);

    CompleteStructMember cst_CPUUsage;
    cst_CPUUsage.common().member_id(memberId++);
    cst_CPUUsage.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_CPUUsage.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_CPUUsage.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_CPUUsage.common().member_flags().IS_OPTIONAL(false);
    cst_CPUUsage.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_CPUUsage.common().member_flags().IS_KEY(false);
    cst_CPUUsage.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "float";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_CPUUsage.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    cst_CPUUsage.detail().name("CPUUsage");

    type_object->complete().struct_type().member_seq().emplace_back(cst_CPUUsage);

    CompleteStructMember cst_CPUTemp;
    cst_CPUTemp.common().member_id(memberId++);
    cst_CPUTemp.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_CPUTemp.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_CPUTemp.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_CPUTemp.common().member_flags().IS_OPTIONAL(false);
    cst_CPUTemp.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_CPUTemp.common().member_flags().IS_KEY(false);
    cst_CPUTemp.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "float";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_CPUTemp.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    cst_CPUTemp.detail().name("CPUTemp");

    type_object->complete().struct_type().member_seq().emplace_back(cst_CPUTemp);

    CompleteStructMember cst_MEMUsage;
    cst_MEMUsage.common().member_id(memberId++);
    cst_MEMUsage.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_MEMUsage.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_MEMUsage.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_MEMUsage.common().member_flags().IS_OPTIONAL(false);
    cst_MEMUsage.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_MEMUsage.common().member_flags().IS_KEY(false);
    cst_MEMUsage.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "float";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_MEMUsage.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    cst_MEMUsage.detail().name("MEMUsage");

    type_object->complete().struct_type().member_seq().emplace_back(cst_MEMUsage);

    CompleteStructMember cst_processList;
    cst_processList.common().member_id(memberId++);
    cst_processList.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_processList.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_processList.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_processList.common().member_flags().IS_OPTIONAL(false);
    cst_processList.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_processList.common().member_flags().IS_KEY(false);
    cst_processList.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_processList.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("tg_msgs::dds::MsgProcessST", 0, true));


    cst_processList.detail().name("processList");

    type_object->complete().struct_type().member_seq().emplace_back(cst_processList);


    // Header
    type_object->complete().struct_type().header().detail().type_name("MsgCPUMEMMonitor");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgCPUMEMMonitor", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgCPUMEMMonitor", true);
}


const TypeIdentifier* GetMsgKILLProcessIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("MsgKILLProcess", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetMsgKILLProcessObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("MsgKILLProcess", complete);
}

const TypeObject* GetMsgKILLProcessObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgKILLProcess", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteMsgKILLProcessObject();
    }
    //else
    return GetMinimalMsgKILLProcessObject();
}

const TypeObject* GetMinimalMsgKILLProcessObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgKILLProcess", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_moudle;
    mst_moudle.common().member_id(memberId++);
    mst_moudle.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_moudle.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_moudle.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_moudle.common().member_flags().IS_OPTIONAL(false);
    mst_moudle.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_moudle.common().member_flags().IS_KEY(false);
    mst_moudle.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_moudle.common().member_type_id(*GetmoudleTypeIdentifier(false));
    MD5 moudle_hash("moudle");
    for(int i = 0; i < 4; ++i)
    {
        mst_moudle.detail().name_hash()[i] = moudle_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_moudle);

    MinimalStructMember mst_pid;
    mst_pid.common().member_id(memberId++);
    mst_pid.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_pid.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_pid.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_pid.common().member_flags().IS_OPTIONAL(false);
    mst_pid.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_pid.common().member_flags().IS_KEY(false);
    mst_pid.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_pid.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    MD5 pid_hash("pid");
    for(int i = 0; i < 4; ++i)
    {
        mst_pid.detail().name_hash()[i] = pid_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_pid);

    MinimalStructMember mst_name;
    mst_name.common().member_id(memberId++);
    mst_name.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_name.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_name.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_name.common().member_flags().IS_OPTIONAL(false);
    mst_name.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_name.common().member_flags().IS_KEY(false);
    mst_name.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_name.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 name_hash("name");
    for(int i = 0; i < 4; ++i)
    {
        mst_name.detail().name_hash()[i] = name_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_name);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgKILLProcess", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgKILLProcess", false);
}

const TypeObject* GetCompleteMsgKILLProcessObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgKILLProcess", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_moudle;
    cst_moudle.common().member_id(memberId++);
    cst_moudle.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_moudle.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_moudle.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_moudle.common().member_flags().IS_OPTIONAL(false);
    cst_moudle.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_moudle.common().member_flags().IS_KEY(false);
    cst_moudle.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_moudle.common().member_type_id(*GetmoudleTypeIdentifier(true));
    cst_moudle.detail().name("moudle");

    type_object->complete().struct_type().member_seq().emplace_back(cst_moudle);

    CompleteStructMember cst_pid;
    cst_pid.common().member_id(memberId++);
    cst_pid.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_pid.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_pid.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_pid.common().member_flags().IS_OPTIONAL(false);
    cst_pid.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_pid.common().member_flags().IS_KEY(false);
    cst_pid.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_pid.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    cst_pid.detail().name("pid");

    type_object->complete().struct_type().member_seq().emplace_back(cst_pid);

    CompleteStructMember cst_name;
    cst_name.common().member_id(memberId++);
    cst_name.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_name.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_name.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_name.common().member_flags().IS_OPTIONAL(false);
    cst_name.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_name.common().member_flags().IS_KEY(false);
    cst_name.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_name.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_name.detail().name("name");

    type_object->complete().struct_type().member_seq().emplace_back(cst_name);


    // Header
    type_object->complete().struct_type().header().detail().type_name("MsgKILLProcess");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgKILLProcess", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgKILLProcess", true);
}


const TypeIdentifier* GetMsgClearAllIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("MsgClearAll", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetMsgClearAllObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("MsgClearAll", complete);
}

const TypeObject* GetMsgClearAllObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgClearAll", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteMsgClearAllObject();
    }
    //else
    return GetMinimalMsgClearAllObject();
}

const TypeObject* GetMinimalMsgClearAllObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgClearAll", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_moudle;
    mst_moudle.common().member_id(memberId++);
    mst_moudle.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_moudle.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_moudle.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_moudle.common().member_flags().IS_OPTIONAL(false);
    mst_moudle.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_moudle.common().member_flags().IS_KEY(false);
    mst_moudle.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_moudle.common().member_type_id(*GetmoudleTypeIdentifier(false));
    MD5 moudle_hash("moudle");
    for(int i = 0; i < 4; ++i)
    {
        mst_moudle.detail().name_hash()[i] = moudle_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_moudle);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgClearAll", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgClearAll", false);
}

const TypeObject* GetCompleteMsgClearAllObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgClearAll", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_moudle;
    cst_moudle.common().member_id(memberId++);
    cst_moudle.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_moudle.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_moudle.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_moudle.common().member_flags().IS_OPTIONAL(false);
    cst_moudle.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_moudle.common().member_flags().IS_KEY(false);
    cst_moudle.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_moudle.common().member_type_id(*GetmoudleTypeIdentifier(true));
    cst_moudle.detail().name("moudle");

    type_object->complete().struct_type().member_seq().emplace_back(cst_moudle);


    // Header
    type_object->complete().struct_type().header().detail().type_name("MsgClearAll");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgClearAll", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgClearAll", true);
}


const TypeIdentifier* GetMsgShellCMDIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("MsgShellCMD", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetMsgShellCMDObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("MsgShellCMD", complete);
}

const TypeObject* GetMsgShellCMDObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgShellCMD", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteMsgShellCMDObject();
    }
    //else
    return GetMinimalMsgShellCMDObject();
}

const TypeObject* GetMinimalMsgShellCMDObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgShellCMD", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_moudle;
    mst_moudle.common().member_id(memberId++);
    mst_moudle.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_moudle.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_moudle.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_moudle.common().member_flags().IS_OPTIONAL(false);
    mst_moudle.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_moudle.common().member_flags().IS_KEY(false);
    mst_moudle.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_moudle.common().member_type_id(*GetmoudleTypeIdentifier(false));
    MD5 moudle_hash("moudle");
    for(int i = 0; i < 4; ++i)
    {
        mst_moudle.detail().name_hash()[i] = moudle_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_moudle);

    MinimalStructMember mst_overTime;
    mst_overTime.common().member_id(memberId++);
    mst_overTime.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_overTime.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_overTime.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_overTime.common().member_flags().IS_OPTIONAL(false);
    mst_overTime.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_overTime.common().member_flags().IS_KEY(false);
    mst_overTime.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "uint16_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_overTime.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    MD5 overTime_hash("overTime");
    for(int i = 0; i < 4; ++i)
    {
        mst_overTime.detail().name_hash()[i] = overTime_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_overTime);

    MinimalStructMember mst_cmd;
    mst_cmd.common().member_id(memberId++);
    mst_cmd.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_cmd.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_cmd.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_cmd.common().member_flags().IS_OPTIONAL(false);
    mst_cmd.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_cmd.common().member_flags().IS_KEY(false);
    mst_cmd.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_cmd.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 cmd_hash("cmd");
    for(int i = 0; i < 4; ++i)
    {
        mst_cmd.detail().name_hash()[i] = cmd_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_cmd);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgShellCMD", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgShellCMD", false);
}

const TypeObject* GetCompleteMsgShellCMDObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgShellCMD", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_moudle;
    cst_moudle.common().member_id(memberId++);
    cst_moudle.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_moudle.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_moudle.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_moudle.common().member_flags().IS_OPTIONAL(false);
    cst_moudle.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_moudle.common().member_flags().IS_KEY(false);
    cst_moudle.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_moudle.common().member_type_id(*GetmoudleTypeIdentifier(true));
    cst_moudle.detail().name("moudle");

    type_object->complete().struct_type().member_seq().emplace_back(cst_moudle);

    CompleteStructMember cst_overTime;
    cst_overTime.common().member_id(memberId++);
    cst_overTime.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_overTime.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_overTime.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_overTime.common().member_flags().IS_OPTIONAL(false);
    cst_overTime.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_overTime.common().member_flags().IS_KEY(false);
    cst_overTime.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "uint16_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_overTime.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    cst_overTime.detail().name("overTime");

    type_object->complete().struct_type().member_seq().emplace_back(cst_overTime);

    CompleteStructMember cst_cmd;
    cst_cmd.common().member_id(memberId++);
    cst_cmd.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_cmd.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_cmd.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_cmd.common().member_flags().IS_OPTIONAL(false);
    cst_cmd.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_cmd.common().member_flags().IS_KEY(false);
    cst_cmd.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_cmd.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_cmd.detail().name("cmd");

    type_object->complete().struct_type().member_seq().emplace_back(cst_cmd);


    // Header
    type_object->complete().struct_type().header().detail().type_name("MsgShellCMD");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgShellCMD", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgShellCMD", true);
}


const TypeIdentifier* GetMsgShellCMDResultIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("MsgShellCMDResult", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetMsgShellCMDResultObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("MsgShellCMDResult", complete);
}

const TypeObject* GetMsgShellCMDResultObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgShellCMDResult", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteMsgShellCMDResultObject();
    }
    //else
    return GetMinimalMsgShellCMDResultObject();
}

const TypeObject* GetMinimalMsgShellCMDResultObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgShellCMDResult", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_moudle;
    mst_moudle.common().member_id(memberId++);
    mst_moudle.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_moudle.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_moudle.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_moudle.common().member_flags().IS_OPTIONAL(false);
    mst_moudle.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_moudle.common().member_flags().IS_KEY(false);
    mst_moudle.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_moudle.common().member_type_id(*GetmoudleTypeIdentifier(false));
    MD5 moudle_hash("moudle");
    for(int i = 0; i < 4; ++i)
    {
        mst_moudle.detail().name_hash()[i] = moudle_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_moudle);

    MinimalStructMember mst_cmd;
    mst_cmd.common().member_id(memberId++);
    mst_cmd.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_cmd.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_cmd.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_cmd.common().member_flags().IS_OPTIONAL(false);
    mst_cmd.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_cmd.common().member_flags().IS_KEY(false);
    mst_cmd.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_cmd.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 cmd_hash("cmd");
    for(int i = 0; i < 4; ++i)
    {
        mst_cmd.detail().name_hash()[i] = cmd_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_cmd);

    MinimalStructMember mst_result;
    mst_result.common().member_id(memberId++);
    mst_result.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_result.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_result.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_result.common().member_flags().IS_OPTIONAL(false);
    mst_result.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_result.common().member_flags().IS_KEY(false);
    mst_result.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_result.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 result_hash("result");
    for(int i = 0; i < 4; ++i)
    {
        mst_result.detail().name_hash()[i] = result_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_result);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgShellCMDResult", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgShellCMDResult", false);
}

const TypeObject* GetCompleteMsgShellCMDResultObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("MsgShellCMDResult", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_moudle;
    cst_moudle.common().member_id(memberId++);
    cst_moudle.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_moudle.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_moudle.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_moudle.common().member_flags().IS_OPTIONAL(false);
    cst_moudle.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_moudle.common().member_flags().IS_KEY(false);
    cst_moudle.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_moudle.common().member_type_id(*GetmoudleTypeIdentifier(true));
    cst_moudle.detail().name("moudle");

    type_object->complete().struct_type().member_seq().emplace_back(cst_moudle);

    CompleteStructMember cst_cmd;
    cst_cmd.common().member_id(memberId++);
    cst_cmd.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_cmd.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_cmd.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_cmd.common().member_flags().IS_OPTIONAL(false);
    cst_cmd.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_cmd.common().member_flags().IS_KEY(false);
    cst_cmd.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_cmd.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_cmd.detail().name("cmd");

    type_object->complete().struct_type().member_seq().emplace_back(cst_cmd);

    CompleteStructMember cst_result;
    cst_result.common().member_id(memberId++);
    cst_result.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_result.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_result.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_result.common().member_flags().IS_OPTIONAL(false);
    cst_result.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_result.common().member_flags().IS_KEY(false);
    cst_result.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_result.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_result.detail().name("result");

    type_object->complete().struct_type().member_seq().emplace_back(cst_result);


    // Header
    type_object->complete().struct_type().header().detail().type_name("MsgShellCMDResult");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("MsgShellCMDResult", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("MsgShellCMDResult", true);
}
