// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SignatureSSL.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _TG_MSGS_DDS_SIGNATURESSL_H_
#define _TG_MSGS_DDS_SIGNATURESSL_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SignatureSSL_SOURCE)
#define SignatureSSL_DllAPI __declspec( dllexport )
#else
#define SignatureSSL_DllAPI __declspec( dllimport )
#endif // SignatureSSL_SOURCE
#else
#define SignatureSSL_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define SignatureSSL_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace tg_msgs {
    namespace dds {
        const std::string Topic_FileImportStatus = "File/ImportStatus";
        /*!
         * @brief This class represents the structure FileImportStatus defined by the user in the IDL file.
         * @ingroup SIGNATURESSL
         */
        class FileImportStatus
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport FileImportStatus();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~FileImportStatus();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tg_msgs::dds::FileImportStatus that will be copied.
             */
            eProsima_user_DllExport FileImportStatus(
                    const FileImportStatus& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tg_msgs::dds::FileImportStatus that will be copied.
             */
            eProsima_user_DllExport FileImportStatus(
                    FileImportStatus&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tg_msgs::dds::FileImportStatus that will be copied.
             */
            eProsima_user_DllExport FileImportStatus& operator =(
                    const FileImportStatus& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tg_msgs::dds::FileImportStatus that will be copied.
             */
            eProsima_user_DllExport FileImportStatus& operator =(
                    FileImportStatus&& x);

            /*!
             * @brief This function sets a value in member imortStatus
             * @param _imortStatus New value for member imortStatus
             */
            eProsima_user_DllExport void imortStatus(
                    bool _imortStatus);

            /*!
             * @brief This function returns the value of member imortStatus
             * @return Value of member imortStatus
             */
            eProsima_user_DllExport bool imortStatus() const;

            /*!
             * @brief This function returns a reference to member imortStatus
             * @return Reference to member imortStatus
             */
            eProsima_user_DllExport bool& imortStatus();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tg_msgs::dds::FileImportStatus& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            bool m_imortStatus;
        };
        const std::string Topic_CA_Status = "File/CaStatus";
        /*!
         * @brief This class represents the structure FileCaStatus defined by the user in the IDL file.
         * @ingroup SIGNATURESSL
         */
        class FileCaStatus
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport FileCaStatus();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~FileCaStatus();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tg_msgs::dds::FileCaStatus that will be copied.
             */
            eProsima_user_DllExport FileCaStatus(
                    const FileCaStatus& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tg_msgs::dds::FileCaStatus that will be copied.
             */
            eProsima_user_DllExport FileCaStatus(
                    FileCaStatus&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tg_msgs::dds::FileCaStatus that will be copied.
             */
            eProsima_user_DllExport FileCaStatus& operator =(
                    const FileCaStatus& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tg_msgs::dds::FileCaStatus that will be copied.
             */
            eProsima_user_DllExport FileCaStatus& operator =(
                    FileCaStatus&& x);

            /*!
             * @brief This function sets a value in member CAStatus
             * @param _CAStatus New value for member CAStatus
             */
            eProsima_user_DllExport void CAStatus(
                    bool _CAStatus);

            /*!
             * @brief This function returns the value of member CAStatus
             * @return Value of member CAStatus
             */
            eProsima_user_DllExport bool CAStatus() const;

            /*!
             * @brief This function returns a reference to member CAStatus
             * @return Reference to member CAStatus
             */
            eProsima_user_DllExport bool& CAStatus();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tg_msgs::dds::FileCaStatus& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            bool m_CAStatus;
        };
        const std::string Topic_FileDataStream = "File/DataStream";
        /*!
         * @brief This class represents the structure FileDataStream defined by the user in the IDL file.
         * @ingroup SIGNATURESSL
         */
        class FileDataStream
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport FileDataStream();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~FileDataStream();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object tg_msgs::dds::FileDataStream that will be copied.
             */
            eProsima_user_DllExport FileDataStream(
                    const FileDataStream& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object tg_msgs::dds::FileDataStream that will be copied.
             */
            eProsima_user_DllExport FileDataStream(
                    FileDataStream&& x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object tg_msgs::dds::FileDataStream that will be copied.
             */
            eProsima_user_DllExport FileDataStream& operator =(
                    const FileDataStream& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object tg_msgs::dds::FileDataStream that will be copied.
             */
            eProsima_user_DllExport FileDataStream& operator =(
                    FileDataStream&& x);

            /*!
             * @brief This function copies the value in member ca_data
             * @param _ca_data New value to be copied in member ca_data
             */
            eProsima_user_DllExport void ca_data(
                    const std::string& _ca_data);

            /*!
             * @brief This function moves the value in member ca_data
             * @param _ca_data New value to be moved in member ca_data
             */
            eProsima_user_DllExport void ca_data(
                    std::string&& _ca_data);

            /*!
             * @brief This function returns a constant reference to member ca_data
             * @return Constant reference to member ca_data
             */
            eProsima_user_DllExport const std::string& ca_data() const;

            /*!
             * @brief This function returns a reference to member ca_data
             * @return Reference to member ca_data
             */
            eProsima_user_DllExport std::string& ca_data();
            /*!
             * @brief This function copies the value in member private_key_data
             * @param _private_key_data New value to be copied in member private_key_data
             */
            eProsima_user_DllExport void private_key_data(
                    const std::string& _private_key_data);

            /*!
             * @brief This function moves the value in member private_key_data
             * @param _private_key_data New value to be moved in member private_key_data
             */
            eProsima_user_DllExport void private_key_data(
                    std::string&& _private_key_data);

            /*!
             * @brief This function returns a constant reference to member private_key_data
             * @return Constant reference to member private_key_data
             */
            eProsima_user_DllExport const std::string& private_key_data() const;

            /*!
             * @brief This function returns a reference to member private_key_data
             * @return Reference to member private_key_data
             */
            eProsima_user_DllExport std::string& private_key_data();
            /*!
             * @brief This function copies the value in member public_key_data
             * @param _public_key_data New value to be copied in member public_key_data
             */
            eProsima_user_DllExport void public_key_data(
                    const std::string& _public_key_data);

            /*!
             * @brief This function moves the value in member public_key_data
             * @param _public_key_data New value to be moved in member public_key_data
             */
            eProsima_user_DllExport void public_key_data(
                    std::string&& _public_key_data);

            /*!
             * @brief This function returns a constant reference to member public_key_data
             * @return Constant reference to member public_key_data
             */
            eProsima_user_DllExport const std::string& public_key_data() const;

            /*!
             * @brief This function returns a reference to member public_key_data
             * @return Reference to member public_key_data
             */
            eProsima_user_DllExport std::string& public_key_data();
            /*!
             * @brief This function copies the value in member cert_data
             * @param _cert_data New value to be copied in member cert_data
             */
            eProsima_user_DllExport void cert_data(
                    const std::string& _cert_data);

            /*!
             * @brief This function moves the value in member cert_data
             * @param _cert_data New value to be moved in member cert_data
             */
            eProsima_user_DllExport void cert_data(
                    std::string&& _cert_data);

            /*!
             * @brief This function returns a constant reference to member cert_data
             * @return Constant reference to member cert_data
             */
            eProsima_user_DllExport const std::string& cert_data() const;

            /*!
             * @brief This function returns a reference to member cert_data
             * @return Reference to member cert_data
             */
            eProsima_user_DllExport std::string& cert_data();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const tg_msgs::dds::FileDataStream& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            std::string m_ca_data;
            std::string m_private_key_data;
            std::string m_public_key_data;
            std::string m_cert_data;
        };
    } // namespace dds
} // namespace tg_msgs

#endif // _TG_MSGS_DDS_SIGNATURESSL_H_