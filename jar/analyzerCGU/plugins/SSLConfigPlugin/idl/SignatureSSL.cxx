// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SignatureSSL.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SignatureSSL.h"
#include "SignatureSSLTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


tg_msgs::dds::FileImportStatus::FileImportStatus()
{
    // m_imortStatus com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6ec8211c
    m_imortStatus = false;

    // Just to register all known types
    registerSignatureSSLTypes();
}

tg_msgs::dds::FileImportStatus::~FileImportStatus()
{
}

tg_msgs::dds::FileImportStatus::FileImportStatus(
        const FileImportStatus& x)
{
    m_imortStatus = x.m_imortStatus;
}

tg_msgs::dds::FileImportStatus::FileImportStatus(
        FileImportStatus&& x)
{
    m_imortStatus = x.m_imortStatus;
}

tg_msgs::dds::FileImportStatus& tg_msgs::dds::FileImportStatus::operator =(
        const FileImportStatus& x)
{

    m_imortStatus = x.m_imortStatus;

    return *this;
}

tg_msgs::dds::FileImportStatus& tg_msgs::dds::FileImportStatus::operator =(
        FileImportStatus&& x)
{

    m_imortStatus = x.m_imortStatus;

    return *this;
}

size_t tg_msgs::dds::FileImportStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t tg_msgs::dds::FileImportStatus::getCdrSerializedSize(
        const tg_msgs::dds::FileImportStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void tg_msgs::dds::FileImportStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_imortStatus;

}

void tg_msgs::dds::FileImportStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_imortStatus;
}

/*!
 * @brief This function sets a value in member imortStatus
 * @param _imortStatus New value for member imortStatus
 */
void tg_msgs::dds::FileImportStatus::imortStatus(
        bool _imortStatus)
{
    m_imortStatus = _imortStatus;
}

/*!
 * @brief This function returns the value of member imortStatus
 * @return Value of member imortStatus
 */
bool tg_msgs::dds::FileImportStatus::imortStatus() const
{
    return m_imortStatus;
}

/*!
 * @brief This function returns a reference to member imortStatus
 * @return Reference to member imortStatus
 */
bool& tg_msgs::dds::FileImportStatus::imortStatus()
{
    return m_imortStatus;
}


size_t tg_msgs::dds::FileImportStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool tg_msgs::dds::FileImportStatus::isKeyDefined()
{
    return false;
}

void tg_msgs::dds::FileImportStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


tg_msgs::dds::FileCaStatus::FileCaStatus()
{
    // m_CAStatus com.eprosima.idl.parser.typecode.PrimitiveTypeCode@704d6e83
    m_CAStatus = false;

    // Just to register all known types
    registerSignatureSSLTypes();
}

tg_msgs::dds::FileCaStatus::~FileCaStatus()
{
}

tg_msgs::dds::FileCaStatus::FileCaStatus(
        const FileCaStatus& x)
{
    m_CAStatus = x.m_CAStatus;
}

tg_msgs::dds::FileCaStatus::FileCaStatus(
        FileCaStatus&& x)
{
    m_CAStatus = x.m_CAStatus;
}

tg_msgs::dds::FileCaStatus& tg_msgs::dds::FileCaStatus::operator =(
        const FileCaStatus& x)
{

    m_CAStatus = x.m_CAStatus;

    return *this;
}

tg_msgs::dds::FileCaStatus& tg_msgs::dds::FileCaStatus::operator =(
        FileCaStatus&& x)
{

    m_CAStatus = x.m_CAStatus;

    return *this;
}

size_t tg_msgs::dds::FileCaStatus::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t tg_msgs::dds::FileCaStatus::getCdrSerializedSize(
        const tg_msgs::dds::FileCaStatus& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void tg_msgs::dds::FileCaStatus::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_CAStatus;

}

void tg_msgs::dds::FileCaStatus::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_CAStatus;
}

/*!
 * @brief This function sets a value in member CAStatus
 * @param _CAStatus New value for member CAStatus
 */
void tg_msgs::dds::FileCaStatus::CAStatus(
        bool _CAStatus)
{
    m_CAStatus = _CAStatus;
}

/*!
 * @brief This function returns the value of member CAStatus
 * @return Value of member CAStatus
 */
bool tg_msgs::dds::FileCaStatus::CAStatus() const
{
    return m_CAStatus;
}

/*!
 * @brief This function returns a reference to member CAStatus
 * @return Reference to member CAStatus
 */
bool& tg_msgs::dds::FileCaStatus::CAStatus()
{
    return m_CAStatus;
}


size_t tg_msgs::dds::FileCaStatus::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool tg_msgs::dds::FileCaStatus::isKeyDefined()
{
    return false;
}

void tg_msgs::dds::FileCaStatus::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


tg_msgs::dds::FileDataStream::FileDataStream()
{
    // m_ca_data com.eprosima.idl.parser.typecode.StringTypeCode@954b04f
    m_ca_data ="";
    // m_private_key_data com.eprosima.idl.parser.typecode.StringTypeCode@149494d8
    m_private_key_data ="";
    // m_public_key_data com.eprosima.idl.parser.typecode.StringTypeCode@710726a3
    m_public_key_data ="";
    // m_cert_data com.eprosima.idl.parser.typecode.StringTypeCode@646007f4
    m_cert_data ="";

    // Just to register all known types
    registerSignatureSSLTypes();
}

tg_msgs::dds::FileDataStream::~FileDataStream()
{




}

tg_msgs::dds::FileDataStream::FileDataStream(
        const FileDataStream& x)
{
    m_ca_data = x.m_ca_data;
    m_private_key_data = x.m_private_key_data;
    m_public_key_data = x.m_public_key_data;
    m_cert_data = x.m_cert_data;
}

tg_msgs::dds::FileDataStream::FileDataStream(
        FileDataStream&& x)
{
    m_ca_data = std::move(x.m_ca_data);
    m_private_key_data = std::move(x.m_private_key_data);
    m_public_key_data = std::move(x.m_public_key_data);
    m_cert_data = std::move(x.m_cert_data);
}

tg_msgs::dds::FileDataStream& tg_msgs::dds::FileDataStream::operator =(
        const FileDataStream& x)
{

    m_ca_data = x.m_ca_data;
    m_private_key_data = x.m_private_key_data;
    m_public_key_data = x.m_public_key_data;
    m_cert_data = x.m_cert_data;

    return *this;
}

tg_msgs::dds::FileDataStream& tg_msgs::dds::FileDataStream::operator =(
        FileDataStream&& x)
{

    m_ca_data = std::move(x.m_ca_data);
    m_private_key_data = std::move(x.m_private_key_data);
    m_public_key_data = std::move(x.m_public_key_data);
    m_cert_data = std::move(x.m_cert_data);

    return *this;
}

size_t tg_msgs::dds::FileDataStream::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t tg_msgs::dds::FileDataStream::getCdrSerializedSize(
        const tg_msgs::dds::FileDataStream& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.ca_data().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.private_key_data().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.public_key_data().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.cert_data().size() + 1;


    return current_alignment - initial_alignment;
}

void tg_msgs::dds::FileDataStream::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_ca_data;
    scdr << m_private_key_data;
    scdr << m_public_key_data;
    scdr << m_cert_data;

}

void tg_msgs::dds::FileDataStream::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_ca_data;
    dcdr >> m_private_key_data;
    dcdr >> m_public_key_data;
    dcdr >> m_cert_data;
}

/*!
 * @brief This function copies the value in member ca_data
 * @param _ca_data New value to be copied in member ca_data
 */
void tg_msgs::dds::FileDataStream::ca_data(
        const std::string& _ca_data)
{
    m_ca_data = _ca_data;
}

/*!
 * @brief This function moves the value in member ca_data
 * @param _ca_data New value to be moved in member ca_data
 */
void tg_msgs::dds::FileDataStream::ca_data(
        std::string&& _ca_data)
{
    m_ca_data = std::move(_ca_data);
}

/*!
 * @brief This function returns a constant reference to member ca_data
 * @return Constant reference to member ca_data
 */
const std::string& tg_msgs::dds::FileDataStream::ca_data() const
{
    return m_ca_data;
}

/*!
 * @brief This function returns a reference to member ca_data
 * @return Reference to member ca_data
 */
std::string& tg_msgs::dds::FileDataStream::ca_data()
{
    return m_ca_data;
}
/*!
 * @brief This function copies the value in member private_key_data
 * @param _private_key_data New value to be copied in member private_key_data
 */
void tg_msgs::dds::FileDataStream::private_key_data(
        const std::string& _private_key_data)
{
    m_private_key_data = _private_key_data;
}

/*!
 * @brief This function moves the value in member private_key_data
 * @param _private_key_data New value to be moved in member private_key_data
 */
void tg_msgs::dds::FileDataStream::private_key_data(
        std::string&& _private_key_data)
{
    m_private_key_data = std::move(_private_key_data);
}

/*!
 * @brief This function returns a constant reference to member private_key_data
 * @return Constant reference to member private_key_data
 */
const std::string& tg_msgs::dds::FileDataStream::private_key_data() const
{
    return m_private_key_data;
}

/*!
 * @brief This function returns a reference to member private_key_data
 * @return Reference to member private_key_data
 */
std::string& tg_msgs::dds::FileDataStream::private_key_data()
{
    return m_private_key_data;
}
/*!
 * @brief This function copies the value in member public_key_data
 * @param _public_key_data New value to be copied in member public_key_data
 */
void tg_msgs::dds::FileDataStream::public_key_data(
        const std::string& _public_key_data)
{
    m_public_key_data = _public_key_data;
}

/*!
 * @brief This function moves the value in member public_key_data
 * @param _public_key_data New value to be moved in member public_key_data
 */
void tg_msgs::dds::FileDataStream::public_key_data(
        std::string&& _public_key_data)
{
    m_public_key_data = std::move(_public_key_data);
}

/*!
 * @brief This function returns a constant reference to member public_key_data
 * @return Constant reference to member public_key_data
 */
const std::string& tg_msgs::dds::FileDataStream::public_key_data() const
{
    return m_public_key_data;
}

/*!
 * @brief This function returns a reference to member public_key_data
 * @return Reference to member public_key_data
 */
std::string& tg_msgs::dds::FileDataStream::public_key_data()
{
    return m_public_key_data;
}
/*!
 * @brief This function copies the value in member cert_data
 * @param _cert_data New value to be copied in member cert_data
 */
void tg_msgs::dds::FileDataStream::cert_data(
        const std::string& _cert_data)
{
    m_cert_data = _cert_data;
}

/*!
 * @brief This function moves the value in member cert_data
 * @param _cert_data New value to be moved in member cert_data
 */
void tg_msgs::dds::FileDataStream::cert_data(
        std::string&& _cert_data)
{
    m_cert_data = std::move(_cert_data);
}

/*!
 * @brief This function returns a constant reference to member cert_data
 * @return Constant reference to member cert_data
 */
const std::string& tg_msgs::dds::FileDataStream::cert_data() const
{
    return m_cert_data;
}

/*!
 * @brief This function returns a reference to member cert_data
 * @return Reference to member cert_data
 */
std::string& tg_msgs::dds::FileDataStream::cert_data()
{
    return m_cert_data;
}

size_t tg_msgs::dds::FileDataStream::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool tg_msgs::dds::FileDataStream::isKeyDefined()
{
    return false;
}

void tg_msgs::dds::FileDataStream::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}


