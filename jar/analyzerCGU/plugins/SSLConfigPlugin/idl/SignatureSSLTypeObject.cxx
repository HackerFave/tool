// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SignatureSSLTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "SignatureSSL.h"
#include "SignatureSSLTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerSignatureSSLTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::get_instance();
}


const TypeIdentifier* GetFileImportStatusIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("FileImportStatus", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetFileImportStatusObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("FileImportStatus", complete);
}

const TypeObject* GetFileImportStatusObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("FileImportStatus", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteFileImportStatusObject();
    }
    //else
    return GetMinimalFileImportStatusObject();
}

const TypeObject* GetMinimalFileImportStatusObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("FileImportStatus", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_imortStatus;
    mst_imortStatus.common().member_id(memberId++);
    mst_imortStatus.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_imortStatus.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_imortStatus.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_imortStatus.common().member_flags().IS_OPTIONAL(false);
    mst_imortStatus.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_imortStatus.common().member_flags().IS_KEY(false);
    mst_imortStatus.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "bool";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_imortStatus.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    MD5 imortStatus_hash("imortStatus");
    for(int i = 0; i < 4; ++i)
    {
        mst_imortStatus.detail().name_hash()[i] = imortStatus_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_imortStatus);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("FileImportStatus", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("FileImportStatus", false);
}

const TypeObject* GetCompleteFileImportStatusObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("FileImportStatus", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_imortStatus;
    cst_imortStatus.common().member_id(memberId++);
    cst_imortStatus.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_imortStatus.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_imortStatus.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_imortStatus.common().member_flags().IS_OPTIONAL(false);
    cst_imortStatus.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_imortStatus.common().member_flags().IS_KEY(false);
    cst_imortStatus.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "bool";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_imortStatus.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    cst_imortStatus.detail().name("imortStatus");

    type_object->complete().struct_type().member_seq().emplace_back(cst_imortStatus);


    // Header
    type_object->complete().struct_type().header().detail().type_name("FileImportStatus");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("FileImportStatus", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("FileImportStatus", true);
}


const TypeIdentifier* GetFileCaStatusIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("FileCaStatus", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetFileCaStatusObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("FileCaStatus", complete);
}

const TypeObject* GetFileCaStatusObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("FileCaStatus", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteFileCaStatusObject();
    }
    //else
    return GetMinimalFileCaStatusObject();
}

const TypeObject* GetMinimalFileCaStatusObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("FileCaStatus", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_CAStatus;
    mst_CAStatus.common().member_id(memberId++);
    mst_CAStatus.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_CAStatus.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_CAStatus.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_CAStatus.common().member_flags().IS_OPTIONAL(false);
    mst_CAStatus.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_CAStatus.common().member_flags().IS_KEY(false);
    mst_CAStatus.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "bool";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_CAStatus.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    MD5 CAStatus_hash("CAStatus");
    for(int i = 0; i < 4; ++i)
    {
        mst_CAStatus.detail().name_hash()[i] = CAStatus_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_CAStatus);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("FileCaStatus", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("FileCaStatus", false);
}

const TypeObject* GetCompleteFileCaStatusObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("FileCaStatus", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_CAStatus;
    cst_CAStatus.common().member_id(memberId++);
    cst_CAStatus.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_CAStatus.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_CAStatus.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_CAStatus.common().member_flags().IS_OPTIONAL(false);
    cst_CAStatus.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_CAStatus.common().member_flags().IS_KEY(false);
    cst_CAStatus.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "bool";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_CAStatus.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    cst_CAStatus.detail().name("CAStatus");

    type_object->complete().struct_type().member_seq().emplace_back(cst_CAStatus);


    // Header
    type_object->complete().struct_type().header().detail().type_name("FileCaStatus");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("FileCaStatus", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("FileCaStatus", true);
}


const TypeIdentifier* GetFileDataStreamIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("FileDataStream", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetFileDataStreamObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("FileDataStream", complete);
}

const TypeObject* GetFileDataStreamObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("FileDataStream", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteFileDataStreamObject();
    }
    //else
    return GetMinimalFileDataStreamObject();
}

const TypeObject* GetMinimalFileDataStreamObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("FileDataStream", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_ca_data;
    mst_ca_data.common().member_id(memberId++);
    mst_ca_data.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_ca_data.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_ca_data.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_ca_data.common().member_flags().IS_OPTIONAL(false);
    mst_ca_data.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_ca_data.common().member_flags().IS_KEY(false);
    mst_ca_data.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_ca_data.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 ca_data_hash("ca_data");
    for(int i = 0; i < 4; ++i)
    {
        mst_ca_data.detail().name_hash()[i] = ca_data_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_ca_data);

    MinimalStructMember mst_private_key_data;
    mst_private_key_data.common().member_id(memberId++);
    mst_private_key_data.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_private_key_data.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_private_key_data.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_private_key_data.common().member_flags().IS_OPTIONAL(false);
    mst_private_key_data.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_private_key_data.common().member_flags().IS_KEY(false);
    mst_private_key_data.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_private_key_data.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 private_key_data_hash("private_key_data");
    for(int i = 0; i < 4; ++i)
    {
        mst_private_key_data.detail().name_hash()[i] = private_key_data_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_private_key_data);

    MinimalStructMember mst_public_key_data;
    mst_public_key_data.common().member_id(memberId++);
    mst_public_key_data.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_public_key_data.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_public_key_data.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_public_key_data.common().member_flags().IS_OPTIONAL(false);
    mst_public_key_data.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_public_key_data.common().member_flags().IS_KEY(false);
    mst_public_key_data.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_public_key_data.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 public_key_data_hash("public_key_data");
    for(int i = 0; i < 4; ++i)
    {
        mst_public_key_data.detail().name_hash()[i] = public_key_data_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_public_key_data);

    MinimalStructMember mst_cert_data;
    mst_cert_data.common().member_id(memberId++);
    mst_cert_data.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_cert_data.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_cert_data.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_cert_data.common().member_flags().IS_OPTIONAL(false);
    mst_cert_data.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_cert_data.common().member_flags().IS_KEY(false);
    mst_cert_data.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_cert_data.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    MD5 cert_data_hash("cert_data");
    for(int i = 0; i < 4; ++i)
    {
        mst_cert_data.detail().name_hash()[i] = cert_data_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_cert_data);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("FileDataStream", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("FileDataStream", false);
}

const TypeObject* GetCompleteFileDataStreamObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("FileDataStream", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_ca_data;
    cst_ca_data.common().member_id(memberId++);
    cst_ca_data.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_ca_data.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_ca_data.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_ca_data.common().member_flags().IS_OPTIONAL(false);
    cst_ca_data.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_ca_data.common().member_flags().IS_KEY(false);
    cst_ca_data.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_ca_data.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_ca_data.detail().name("ca_data");

    type_object->complete().struct_type().member_seq().emplace_back(cst_ca_data);

    CompleteStructMember cst_private_key_data;
    cst_private_key_data.common().member_id(memberId++);
    cst_private_key_data.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_private_key_data.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_private_key_data.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_private_key_data.common().member_flags().IS_OPTIONAL(false);
    cst_private_key_data.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_private_key_data.common().member_flags().IS_KEY(false);
    cst_private_key_data.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_private_key_data.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_private_key_data.detail().name("private_key_data");

    type_object->complete().struct_type().member_seq().emplace_back(cst_private_key_data);

    CompleteStructMember cst_public_key_data;
    cst_public_key_data.common().member_id(memberId++);
    cst_public_key_data.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_public_key_data.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_public_key_data.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_public_key_data.common().member_flags().IS_OPTIONAL(false);
    cst_public_key_data.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_public_key_data.common().member_flags().IS_KEY(false);
    cst_public_key_data.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_public_key_data.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_public_key_data.detail().name("public_key_data");

    type_object->complete().struct_type().member_seq().emplace_back(cst_public_key_data);

    CompleteStructMember cst_cert_data;
    cst_cert_data.common().member_id(memberId++);
    cst_cert_data.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_cert_data.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_cert_data.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_cert_data.common().member_flags().IS_OPTIONAL(false);
    cst_cert_data.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_cert_data.common().member_flags().IS_KEY(false);
    cst_cert_data.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_cert_data.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));


    cst_cert_data.detail().name("cert_data");

    type_object->complete().struct_type().member_seq().emplace_back(cst_cert_data);


    // Header
    type_object->complete().struct_type().header().detail().type_name("FileDataStream");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("FileDataStream", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("FileDataStream", true);
}
