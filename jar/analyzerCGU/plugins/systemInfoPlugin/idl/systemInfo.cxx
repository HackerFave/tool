// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file systemInfo.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "systemInfo.h"
#include "systemInfoTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


tg_msgs::dds::MsgDiskStatST::MsgDiskStatST()
{
    // m_fileSystem com.eprosima.idl.parser.typecode.StringTypeCode@2de8284b
    m_fileSystem ="";
    // m_mountedOn com.eprosima.idl.parser.typecode.StringTypeCode@396e2f39
    m_mountedOn ="";
    // m_size com.eprosima.idl.parser.typecode.StringTypeCode@a74868d
    m_size ="";
    // m_used com.eprosima.idl.parser.typecode.StringTypeCode@12c8a2c0
    m_used ="";
    // m_usage com.eprosima.idl.parser.typecode.StringTypeCode@7e0e6aa2
    m_usage ="";

    // Just to register all known types
    registersystemInfoTypes();
}

tg_msgs::dds::MsgDiskStatST::~MsgDiskStatST()
{





}

tg_msgs::dds::MsgDiskStatST::MsgDiskStatST(
        const MsgDiskStatST& x)
{
    m_fileSystem = x.m_fileSystem;
    m_mountedOn = x.m_mountedOn;
    m_size = x.m_size;
    m_used = x.m_used;
    m_usage = x.m_usage;
}

tg_msgs::dds::MsgDiskStatST::MsgDiskStatST(
        MsgDiskStatST&& x)
{
    m_fileSystem = std::move(x.m_fileSystem);
    m_mountedOn = std::move(x.m_mountedOn);
    m_size = std::move(x.m_size);
    m_used = std::move(x.m_used);
    m_usage = std::move(x.m_usage);
}

tg_msgs::dds::MsgDiskStatST& tg_msgs::dds::MsgDiskStatST::operator =(
        const MsgDiskStatST& x)
{

    m_fileSystem = x.m_fileSystem;
    m_mountedOn = x.m_mountedOn;
    m_size = x.m_size;
    m_used = x.m_used;
    m_usage = x.m_usage;

    return *this;
}

tg_msgs::dds::MsgDiskStatST& tg_msgs::dds::MsgDiskStatST::operator =(
        MsgDiskStatST&& x)
{

    m_fileSystem = std::move(x.m_fileSystem);
    m_mountedOn = std::move(x.m_mountedOn);
    m_size = std::move(x.m_size);
    m_used = std::move(x.m_used);
    m_usage = std::move(x.m_usage);

    return *this;
}

size_t tg_msgs::dds::MsgDiskStatST::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t tg_msgs::dds::MsgDiskStatST::getCdrSerializedSize(
        const tg_msgs::dds::MsgDiskStatST& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.fileSystem().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.mountedOn().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.size().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.used().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.usage().size() + 1;


    return current_alignment - initial_alignment;
}

void tg_msgs::dds::MsgDiskStatST::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_fileSystem;
    scdr << m_mountedOn;
    scdr << m_size;
    scdr << m_used;
    scdr << m_usage;

}

void tg_msgs::dds::MsgDiskStatST::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_fileSystem;
    dcdr >> m_mountedOn;
    dcdr >> m_size;
    dcdr >> m_used;
    dcdr >> m_usage;
}

/*!
 * @brief This function copies the value in member fileSystem
 * @param _fileSystem New value to be copied in member fileSystem
 */
void tg_msgs::dds::MsgDiskStatST::fileSystem(
        const std::string& _fileSystem)
{
    m_fileSystem = _fileSystem;
}

/*!
 * @brief This function moves the value in member fileSystem
 * @param _fileSystem New value to be moved in member fileSystem
 */
void tg_msgs::dds::MsgDiskStatST::fileSystem(
        std::string&& _fileSystem)
{
    m_fileSystem = std::move(_fileSystem);
}

/*!
 * @brief This function returns a constant reference to member fileSystem
 * @return Constant reference to member fileSystem
 */
const std::string& tg_msgs::dds::MsgDiskStatST::fileSystem() const
{
    return m_fileSystem;
}

/*!
 * @brief This function returns a reference to member fileSystem
 * @return Reference to member fileSystem
 */
std::string& tg_msgs::dds::MsgDiskStatST::fileSystem()
{
    return m_fileSystem;
}
/*!
 * @brief This function copies the value in member mountedOn
 * @param _mountedOn New value to be copied in member mountedOn
 */
void tg_msgs::dds::MsgDiskStatST::mountedOn(
        const std::string& _mountedOn)
{
    m_mountedOn = _mountedOn;
}

/*!
 * @brief This function moves the value in member mountedOn
 * @param _mountedOn New value to be moved in member mountedOn
 */
void tg_msgs::dds::MsgDiskStatST::mountedOn(
        std::string&& _mountedOn)
{
    m_mountedOn = std::move(_mountedOn);
}

/*!
 * @brief This function returns a constant reference to member mountedOn
 * @return Constant reference to member mountedOn
 */
const std::string& tg_msgs::dds::MsgDiskStatST::mountedOn() const
{
    return m_mountedOn;
}

/*!
 * @brief This function returns a reference to member mountedOn
 * @return Reference to member mountedOn
 */
std::string& tg_msgs::dds::MsgDiskStatST::mountedOn()
{
    return m_mountedOn;
}
/*!
 * @brief This function copies the value in member size
 * @param _size New value to be copied in member size
 */
void tg_msgs::dds::MsgDiskStatST::size(
        const std::string& _size)
{
    m_size = _size;
}

/*!
 * @brief This function moves the value in member size
 * @param _size New value to be moved in member size
 */
void tg_msgs::dds::MsgDiskStatST::size(
        std::string&& _size)
{
    m_size = std::move(_size);
}

/*!
 * @brief This function returns a constant reference to member size
 * @return Constant reference to member size
 */
const std::string& tg_msgs::dds::MsgDiskStatST::size() const
{
    return m_size;
}

/*!
 * @brief This function returns a reference to member size
 * @return Reference to member size
 */
std::string& tg_msgs::dds::MsgDiskStatST::size()
{
    return m_size;
}
/*!
 * @brief This function copies the value in member used
 * @param _used New value to be copied in member used
 */
void tg_msgs::dds::MsgDiskStatST::used(
        const std::string& _used)
{
    m_used = _used;
}

/*!
 * @brief This function moves the value in member used
 * @param _used New value to be moved in member used
 */
void tg_msgs::dds::MsgDiskStatST::used(
        std::string&& _used)
{
    m_used = std::move(_used);
}

/*!
 * @brief This function returns a constant reference to member used
 * @return Constant reference to member used
 */
const std::string& tg_msgs::dds::MsgDiskStatST::used() const
{
    return m_used;
}

/*!
 * @brief This function returns a reference to member used
 * @return Reference to member used
 */
std::string& tg_msgs::dds::MsgDiskStatST::used()
{
    return m_used;
}
/*!
 * @brief This function copies the value in member usage
 * @param _usage New value to be copied in member usage
 */
void tg_msgs::dds::MsgDiskStatST::usage(
        const std::string& _usage)
{
    m_usage = _usage;
}

/*!
 * @brief This function moves the value in member usage
 * @param _usage New value to be moved in member usage
 */
void tg_msgs::dds::MsgDiskStatST::usage(
        std::string&& _usage)
{
    m_usage = std::move(_usage);
}

/*!
 * @brief This function returns a constant reference to member usage
 * @return Constant reference to member usage
 */
const std::string& tg_msgs::dds::MsgDiskStatST::usage() const
{
    return m_usage;
}

/*!
 * @brief This function returns a reference to member usage
 * @return Reference to member usage
 */
std::string& tg_msgs::dds::MsgDiskStatST::usage()
{
    return m_usage;
}

size_t tg_msgs::dds::MsgDiskStatST::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool tg_msgs::dds::MsgDiskStatST::isKeyDefined()
{
    return false;
}

void tg_msgs::dds::MsgDiskStatST::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}

tg_msgs::dds::MsgDiskMonitor::MsgDiskMonitor()
{
    // m_moudle com.eprosima.idl.parser.typecode.EnumTypeCode@3c0a50da
    m_moudle = tg_msgs::dds::UnknownModule;
    // m_diskList com.eprosima.idl.parser.typecode.SequenceTypeCode@646be2c3


    // Just to register all known types
    registersystemInfoTypes();
}

tg_msgs::dds::MsgDiskMonitor::~MsgDiskMonitor()
{


}

tg_msgs::dds::MsgDiskMonitor::MsgDiskMonitor(
        const MsgDiskMonitor& x)
{
    m_moudle = x.m_moudle;
    m_diskList = x.m_diskList;
}

tg_msgs::dds::MsgDiskMonitor::MsgDiskMonitor(
        MsgDiskMonitor&& x)
{
    m_moudle = x.m_moudle;
    m_diskList = std::move(x.m_diskList);
}

tg_msgs::dds::MsgDiskMonitor& tg_msgs::dds::MsgDiskMonitor::operator =(
        const MsgDiskMonitor& x)
{

    m_moudle = x.m_moudle;
    m_diskList = x.m_diskList;

    return *this;
}

tg_msgs::dds::MsgDiskMonitor& tg_msgs::dds::MsgDiskMonitor::operator =(
        MsgDiskMonitor&& x)
{

    m_moudle = x.m_moudle;
    m_diskList = std::move(x.m_diskList);

    return *this;
}

size_t tg_msgs::dds::MsgDiskMonitor::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += tg_msgs::dds::MsgDiskStatST::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t tg_msgs::dds::MsgDiskMonitor::getCdrSerializedSize(
        const tg_msgs::dds::MsgDiskMonitor& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.diskList().size(); ++a)
    {
        current_alignment += tg_msgs::dds::MsgDiskStatST::getCdrSerializedSize(data.diskList().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void tg_msgs::dds::MsgDiskMonitor::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_moudle;
    scdr << m_diskList;

}

void tg_msgs::dds::MsgDiskMonitor::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_moudle = (tg_msgs::dds::moudleType)enum_value;
    }

    dcdr >> m_diskList;
}

/*!
 * @brief This function sets a value in member moudle
 * @param _moudle New value for member moudle
 */
void tg_msgs::dds::MsgDiskMonitor::moudle(
        tg_msgs::dds::moudleType _moudle)
{
    m_moudle = _moudle;
}

/*!
 * @brief This function returns the value of member moudle
 * @return Value of member moudle
 */
tg_msgs::dds::moudleType tg_msgs::dds::MsgDiskMonitor::moudle() const
{
    return m_moudle;
}

/*!
 * @brief This function returns a reference to member moudle
 * @return Reference to member moudle
 */
tg_msgs::dds::moudleType& tg_msgs::dds::MsgDiskMonitor::moudle()
{
    return m_moudle;
}

/*!
 * @brief This function copies the value in member diskList
 * @param _diskList New value to be copied in member diskList
 */
void tg_msgs::dds::MsgDiskMonitor::diskList(
        const std::vector<tg_msgs::dds::MsgDiskStatST>& _diskList)
{
    m_diskList = _diskList;
}

/*!
 * @brief This function moves the value in member diskList
 * @param _diskList New value to be moved in member diskList
 */
void tg_msgs::dds::MsgDiskMonitor::diskList(
        std::vector<tg_msgs::dds::MsgDiskStatST>&& _diskList)
{
    m_diskList = std::move(_diskList);
}

/*!
 * @brief This function returns a constant reference to member diskList
 * @return Constant reference to member diskList
 */
const std::vector<tg_msgs::dds::MsgDiskStatST>& tg_msgs::dds::MsgDiskMonitor::diskList() const
{
    return m_diskList;
}

/*!
 * @brief This function returns a reference to member diskList
 * @return Reference to member diskList
 */
std::vector<tg_msgs::dds::MsgDiskStatST>& tg_msgs::dds::MsgDiskMonitor::diskList()
{
    return m_diskList;
}

size_t tg_msgs::dds::MsgDiskMonitor::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool tg_msgs::dds::MsgDiskMonitor::isKeyDefined()
{
    return false;
}

void tg_msgs::dds::MsgDiskMonitor::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}


tg_msgs::dds::MsgProcessST::MsgProcessST()
{
    // m_process com.eprosima.idl.parser.typecode.StringTypeCode@971d0d8
    m_process ="";
    // m_pid com.eprosima.idl.parser.typecode.PrimitiveTypeCode@51931956
    m_pid = 0;
    // m_pCPUUsage com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2b4a2ec7
    m_pCPUUsage = 0.0;
    // m_pMEMUsage com.eprosima.idl.parser.typecode.PrimitiveTypeCode@564718df
    m_pMEMUsage = 0.0;

    // Just to register all known types
    registersystemInfoTypes();
}

tg_msgs::dds::MsgProcessST::~MsgProcessST()
{




}

tg_msgs::dds::MsgProcessST::MsgProcessST(
        const MsgProcessST& x)
{
    m_process = x.m_process;
    m_pid = x.m_pid;
    m_pCPUUsage = x.m_pCPUUsage;
    m_pMEMUsage = x.m_pMEMUsage;
}

tg_msgs::dds::MsgProcessST::MsgProcessST(
        MsgProcessST&& x)
{
    m_process = std::move(x.m_process);
    m_pid = x.m_pid;
    m_pCPUUsage = x.m_pCPUUsage;
    m_pMEMUsage = x.m_pMEMUsage;
}

tg_msgs::dds::MsgProcessST& tg_msgs::dds::MsgProcessST::operator =(
        const MsgProcessST& x)
{

    m_process = x.m_process;
    m_pid = x.m_pid;
    m_pCPUUsage = x.m_pCPUUsage;
    m_pMEMUsage = x.m_pMEMUsage;

    return *this;
}

tg_msgs::dds::MsgProcessST& tg_msgs::dds::MsgProcessST::operator =(
        MsgProcessST&& x)
{

    m_process = std::move(x.m_process);
    m_pid = x.m_pid;
    m_pCPUUsage = x.m_pCPUUsage;
    m_pMEMUsage = x.m_pMEMUsage;

    return *this;
}

size_t tg_msgs::dds::MsgProcessST::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t tg_msgs::dds::MsgProcessST::getCdrSerializedSize(
        const tg_msgs::dds::MsgProcessST& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.process().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void tg_msgs::dds::MsgProcessST::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_process;
    scdr << m_pid;
    scdr << m_pCPUUsage;
    scdr << m_pMEMUsage;

}

void tg_msgs::dds::MsgProcessST::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_process;
    dcdr >> m_pid;
    dcdr >> m_pCPUUsage;
    dcdr >> m_pMEMUsage;
}

/*!
 * @brief This function copies the value in member process
 * @param _process New value to be copied in member process
 */
void tg_msgs::dds::MsgProcessST::process(
        const std::string& _process)
{
    m_process = _process;
}

/*!
 * @brief This function moves the value in member process
 * @param _process New value to be moved in member process
 */
void tg_msgs::dds::MsgProcessST::process(
        std::string&& _process)
{
    m_process = std::move(_process);
}

/*!
 * @brief This function returns a constant reference to member process
 * @return Constant reference to member process
 */
const std::string& tg_msgs::dds::MsgProcessST::process() const
{
    return m_process;
}

/*!
 * @brief This function returns a reference to member process
 * @return Reference to member process
 */
std::string& tg_msgs::dds::MsgProcessST::process()
{
    return m_process;
}
/*!
 * @brief This function sets a value in member pid
 * @param _pid New value for member pid
 */
void tg_msgs::dds::MsgProcessST::pid(
        uint32_t _pid)
{
    m_pid = _pid;
}

/*!
 * @brief This function returns the value of member pid
 * @return Value of member pid
 */
uint32_t tg_msgs::dds::MsgProcessST::pid() const
{
    return m_pid;
}

/*!
 * @brief This function returns a reference to member pid
 * @return Reference to member pid
 */
uint32_t& tg_msgs::dds::MsgProcessST::pid()
{
    return m_pid;
}

/*!
 * @brief This function sets a value in member pCPUUsage
 * @param _pCPUUsage New value for member pCPUUsage
 */
void tg_msgs::dds::MsgProcessST::pCPUUsage(
        float _pCPUUsage)
{
    m_pCPUUsage = _pCPUUsage;
}

/*!
 * @brief This function returns the value of member pCPUUsage
 * @return Value of member pCPUUsage
 */
float tg_msgs::dds::MsgProcessST::pCPUUsage() const
{
    return m_pCPUUsage;
}

/*!
 * @brief This function returns a reference to member pCPUUsage
 * @return Reference to member pCPUUsage
 */
float& tg_msgs::dds::MsgProcessST::pCPUUsage()
{
    return m_pCPUUsage;
}

/*!
 * @brief This function sets a value in member pMEMUsage
 * @param _pMEMUsage New value for member pMEMUsage
 */
void tg_msgs::dds::MsgProcessST::pMEMUsage(
        float _pMEMUsage)
{
    m_pMEMUsage = _pMEMUsage;
}

/*!
 * @brief This function returns the value of member pMEMUsage
 * @return Value of member pMEMUsage
 */
float tg_msgs::dds::MsgProcessST::pMEMUsage() const
{
    return m_pMEMUsage;
}

/*!
 * @brief This function returns a reference to member pMEMUsage
 * @return Reference to member pMEMUsage
 */
float& tg_msgs::dds::MsgProcessST::pMEMUsage()
{
    return m_pMEMUsage;
}


size_t tg_msgs::dds::MsgProcessST::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool tg_msgs::dds::MsgProcessST::isKeyDefined()
{
    return false;
}

void tg_msgs::dds::MsgProcessST::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
        
}

tg_msgs::dds::MsgCPUMEMMonitor::MsgCPUMEMMonitor()
{
    // m_moudle com.eprosima.idl.parser.typecode.EnumTypeCode@3c0a50da
    m_moudle = tg_msgs::dds::UnknownModule;
    // m_CPUUsage com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1a38c59b
    m_CPUUsage = 0.0;
    // m_CPUTemp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7f9fcf7f
    m_CPUTemp = 0.0;
    // m_MEMUsage com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2357d90a
    m_MEMUsage = 0.0;
    // m_processList com.eprosima.idl.parser.typecode.SequenceTypeCode@6328d34a


    // Just to register all known types
    registersystemInfoTypes();
}

tg_msgs::dds::MsgCPUMEMMonitor::~MsgCPUMEMMonitor()
{





}

tg_msgs::dds::MsgCPUMEMMonitor::MsgCPUMEMMonitor(
        const MsgCPUMEMMonitor& x)
{
    m_moudle = x.m_moudle;
    m_CPUUsage = x.m_CPUUsage;
    m_CPUTemp = x.m_CPUTemp;
    m_MEMUsage = x.m_MEMUsage;
    m_processList = x.m_processList;
}

tg_msgs::dds::MsgCPUMEMMonitor::MsgCPUMEMMonitor(
        MsgCPUMEMMonitor&& x)
{
    m_moudle = x.m_moudle;
    m_CPUUsage = x.m_CPUUsage;
    m_CPUTemp = x.m_CPUTemp;
    m_MEMUsage = x.m_MEMUsage;
    m_processList = std::move(x.m_processList);
}

tg_msgs::dds::MsgCPUMEMMonitor& tg_msgs::dds::MsgCPUMEMMonitor::operator =(
        const MsgCPUMEMMonitor& x)
{

    m_moudle = x.m_moudle;
    m_CPUUsage = x.m_CPUUsage;
    m_CPUTemp = x.m_CPUTemp;
    m_MEMUsage = x.m_MEMUsage;
    m_processList = x.m_processList;

    return *this;
}

tg_msgs::dds::MsgCPUMEMMonitor& tg_msgs::dds::MsgCPUMEMMonitor::operator =(
        MsgCPUMEMMonitor&& x)
{

    m_moudle = x.m_moudle;
    m_CPUUsage = x.m_CPUUsage;
    m_CPUTemp = x.m_CPUTemp;
    m_MEMUsage = x.m_MEMUsage;
    m_processList = std::move(x.m_processList);

    return *this;
}

size_t tg_msgs::dds::MsgCPUMEMMonitor::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += tg_msgs::dds::MsgProcessST::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t tg_msgs::dds::MsgCPUMEMMonitor::getCdrSerializedSize(
        const tg_msgs::dds::MsgCPUMEMMonitor& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.processList().size(); ++a)
    {
        current_alignment += tg_msgs::dds::MsgProcessST::getCdrSerializedSize(data.processList().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void tg_msgs::dds::MsgCPUMEMMonitor::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_moudle;
    scdr << m_CPUUsage;
    scdr << m_CPUTemp;
    scdr << m_MEMUsage;
    scdr << m_processList;

}

void tg_msgs::dds::MsgCPUMEMMonitor::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_moudle = (tg_msgs::dds::moudleType)enum_value;
    }

    dcdr >> m_CPUUsage;
    dcdr >> m_CPUTemp;
    dcdr >> m_MEMUsage;
    dcdr >> m_processList;
}

/*!
 * @brief This function sets a value in member moudle
 * @param _moudle New value for member moudle
 */
void tg_msgs::dds::MsgCPUMEMMonitor::moudle(
        tg_msgs::dds::moudleType _moudle)
{
    m_moudle = _moudle;
}

/*!
 * @brief This function returns the value of member moudle
 * @return Value of member moudle
 */
tg_msgs::dds::moudleType tg_msgs::dds::MsgCPUMEMMonitor::moudle() const
{
    return m_moudle;
}

/*!
 * @brief This function returns a reference to member moudle
 * @return Reference to member moudle
 */
tg_msgs::dds::moudleType& tg_msgs::dds::MsgCPUMEMMonitor::moudle()
{
    return m_moudle;
}

/*!
 * @brief This function sets a value in member CPUUsage
 * @param _CPUUsage New value for member CPUUsage
 */
void tg_msgs::dds::MsgCPUMEMMonitor::CPUUsage(
        float _CPUUsage)
{
    m_CPUUsage = _CPUUsage;
}

/*!
 * @brief This function returns the value of member CPUUsage
 * @return Value of member CPUUsage
 */
float tg_msgs::dds::MsgCPUMEMMonitor::CPUUsage() const
{
    return m_CPUUsage;
}

/*!
 * @brief This function returns a reference to member CPUUsage
 * @return Reference to member CPUUsage
 */
float& tg_msgs::dds::MsgCPUMEMMonitor::CPUUsage()
{
    return m_CPUUsage;
}

/*!
 * @brief This function sets a value in member CPUTemp
 * @param _CPUTemp New value for member CPUTemp
 */
void tg_msgs::dds::MsgCPUMEMMonitor::CPUTemp(
        float _CPUTemp)
{
    m_CPUTemp = _CPUTemp;
}

/*!
 * @brief This function returns the value of member CPUTemp
 * @return Value of member CPUTemp
 */
float tg_msgs::dds::MsgCPUMEMMonitor::CPUTemp() const
{
    return m_CPUTemp;
}

/*!
 * @brief This function returns a reference to member CPUTemp
 * @return Reference to member CPUTemp
 */
float& tg_msgs::dds::MsgCPUMEMMonitor::CPUTemp()
{
    return m_CPUTemp;
}

/*!
 * @brief This function sets a value in member MEMUsage
 * @param _MEMUsage New value for member MEMUsage
 */
void tg_msgs::dds::MsgCPUMEMMonitor::MEMUsage(
        float _MEMUsage)
{
    m_MEMUsage = _MEMUsage;
}

/*!
 * @brief This function returns the value of member MEMUsage
 * @return Value of member MEMUsage
 */
float tg_msgs::dds::MsgCPUMEMMonitor::MEMUsage() const
{
    return m_MEMUsage;
}

/*!
 * @brief This function returns a reference to member MEMUsage
 * @return Reference to member MEMUsage
 */
float& tg_msgs::dds::MsgCPUMEMMonitor::MEMUsage()
{
    return m_MEMUsage;
}

/*!
 * @brief This function copies the value in member processList
 * @param _processList New value to be copied in member processList
 */
void tg_msgs::dds::MsgCPUMEMMonitor::processList(
        const std::vector<tg_msgs::dds::MsgProcessST>& _processList)
{
    m_processList = _processList;
}

/*!
 * @brief This function moves the value in member processList
 * @param _processList New value to be moved in member processList
 */
void tg_msgs::dds::MsgCPUMEMMonitor::processList(
        std::vector<tg_msgs::dds::MsgProcessST>&& _processList)
{
    m_processList = std::move(_processList);
}

/*!
 * @brief This function returns a constant reference to member processList
 * @return Constant reference to member processList
 */
const std::vector<tg_msgs::dds::MsgProcessST>& tg_msgs::dds::MsgCPUMEMMonitor::processList() const
{
    return m_processList;
}

/*!
 * @brief This function returns a reference to member processList
 * @return Reference to member processList
 */
std::vector<tg_msgs::dds::MsgProcessST>& tg_msgs::dds::MsgCPUMEMMonitor::processList()
{
    return m_processList;
}

size_t tg_msgs::dds::MsgCPUMEMMonitor::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;








    return current_align;
}

bool tg_msgs::dds::MsgCPUMEMMonitor::isKeyDefined()
{
    return false;
}

void tg_msgs::dds::MsgCPUMEMMonitor::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
         
}


tg_msgs::dds::MsgKILLProcess::MsgKILLProcess()
{
    // m_moudle com.eprosima.idl.parser.typecode.EnumTypeCode@3c0a50da
    m_moudle = tg_msgs::dds::UnknownModule;
    // m_pid com.eprosima.idl.parser.typecode.PrimitiveTypeCode@36f0f1be
    m_pid = 0;
    // m_name com.eprosima.idl.parser.typecode.StringTypeCode@55040f2f
    m_name ="";

    // Just to register all known types
    registersystemInfoTypes();
}

tg_msgs::dds::MsgKILLProcess::~MsgKILLProcess()
{



}

tg_msgs::dds::MsgKILLProcess::MsgKILLProcess(
        const MsgKILLProcess& x)
{
    m_moudle = x.m_moudle;
    m_pid = x.m_pid;
    m_name = x.m_name;
}

tg_msgs::dds::MsgKILLProcess::MsgKILLProcess(
        MsgKILLProcess&& x)
{
    m_moudle = x.m_moudle;
    m_pid = x.m_pid;
    m_name = std::move(x.m_name);
}

tg_msgs::dds::MsgKILLProcess& tg_msgs::dds::MsgKILLProcess::operator =(
        const MsgKILLProcess& x)
{

    m_moudle = x.m_moudle;
    m_pid = x.m_pid;
    m_name = x.m_name;

    return *this;
}

tg_msgs::dds::MsgKILLProcess& tg_msgs::dds::MsgKILLProcess::operator =(
        MsgKILLProcess&& x)
{

    m_moudle = x.m_moudle;
    m_pid = x.m_pid;
    m_name = std::move(x.m_name);

    return *this;
}

size_t tg_msgs::dds::MsgKILLProcess::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t tg_msgs::dds::MsgKILLProcess::getCdrSerializedSize(
        const tg_msgs::dds::MsgKILLProcess& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.name().size() + 1;


    return current_alignment - initial_alignment;
}

void tg_msgs::dds::MsgKILLProcess::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_moudle;
    scdr << m_pid;
    scdr << m_name;

}

void tg_msgs::dds::MsgKILLProcess::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_moudle = (tg_msgs::dds::moudleType)enum_value;
    }

    dcdr >> m_pid;
    dcdr >> m_name;
}

/*!
 * @brief This function sets a value in member moudle
 * @param _moudle New value for member moudle
 */
void tg_msgs::dds::MsgKILLProcess::moudle(
        tg_msgs::dds::moudleType _moudle)
{
    m_moudle = _moudle;
}

/*!
 * @brief This function returns the value of member moudle
 * @return Value of member moudle
 */
tg_msgs::dds::moudleType tg_msgs::dds::MsgKILLProcess::moudle() const
{
    return m_moudle;
}

/*!
 * @brief This function returns a reference to member moudle
 * @return Reference to member moudle
 */
tg_msgs::dds::moudleType& tg_msgs::dds::MsgKILLProcess::moudle()
{
    return m_moudle;
}

/*!
 * @brief This function sets a value in member pid
 * @param _pid New value for member pid
 */
void tg_msgs::dds::MsgKILLProcess::pid(
        uint32_t _pid)
{
    m_pid = _pid;
}

/*!
 * @brief This function returns the value of member pid
 * @return Value of member pid
 */
uint32_t tg_msgs::dds::MsgKILLProcess::pid() const
{
    return m_pid;
}

/*!
 * @brief This function returns a reference to member pid
 * @return Reference to member pid
 */
uint32_t& tg_msgs::dds::MsgKILLProcess::pid()
{
    return m_pid;
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void tg_msgs::dds::MsgKILLProcess::name(
        const std::string& _name)
{
    m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void tg_msgs::dds::MsgKILLProcess::name(
        std::string&& _name)
{
    m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const std::string& tg_msgs::dds::MsgKILLProcess::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
std::string& tg_msgs::dds::MsgKILLProcess::name()
{
    return m_name;
}

size_t tg_msgs::dds::MsgKILLProcess::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool tg_msgs::dds::MsgKILLProcess::isKeyDefined()
{
    return false;
}

void tg_msgs::dds::MsgKILLProcess::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


tg_msgs::dds::MsgClearAll::MsgClearAll()
{
    // m_moudle com.eprosima.idl.parser.typecode.EnumTypeCode@3c0a50da
    m_moudle = tg_msgs::dds::UnknownModule;

    // Just to register all known types
    registersystemInfoTypes();
}

tg_msgs::dds::MsgClearAll::~MsgClearAll()
{
}

tg_msgs::dds::MsgClearAll::MsgClearAll(
        const MsgClearAll& x)
{
    m_moudle = x.m_moudle;
}

tg_msgs::dds::MsgClearAll::MsgClearAll(
        MsgClearAll&& x)
{
    m_moudle = x.m_moudle;
}

tg_msgs::dds::MsgClearAll& tg_msgs::dds::MsgClearAll::operator =(
        const MsgClearAll& x)
{

    m_moudle = x.m_moudle;

    return *this;
}

tg_msgs::dds::MsgClearAll& tg_msgs::dds::MsgClearAll::operator =(
        MsgClearAll&& x)
{

    m_moudle = x.m_moudle;

    return *this;
}

size_t tg_msgs::dds::MsgClearAll::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t tg_msgs::dds::MsgClearAll::getCdrSerializedSize(
        const tg_msgs::dds::MsgClearAll& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void tg_msgs::dds::MsgClearAll::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_moudle;

}

void tg_msgs::dds::MsgClearAll::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_moudle = (tg_msgs::dds::moudleType)enum_value;
    }

}

/*!
 * @brief This function sets a value in member moudle
 * @param _moudle New value for member moudle
 */
void tg_msgs::dds::MsgClearAll::moudle(
        tg_msgs::dds::moudleType _moudle)
{
    m_moudle = _moudle;
}

/*!
 * @brief This function returns the value of member moudle
 * @return Value of member moudle
 */
tg_msgs::dds::moudleType tg_msgs::dds::MsgClearAll::moudle() const
{
    return m_moudle;
}

/*!
 * @brief This function returns a reference to member moudle
 * @return Reference to member moudle
 */
tg_msgs::dds::moudleType& tg_msgs::dds::MsgClearAll::moudle()
{
    return m_moudle;
}


size_t tg_msgs::dds::MsgClearAll::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool tg_msgs::dds::MsgClearAll::isKeyDefined()
{
    return false;
}

void tg_msgs::dds::MsgClearAll::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}


tg_msgs::dds::MsgShellCMD::MsgShellCMD()
{
    // m_moudle com.eprosima.idl.parser.typecode.EnumTypeCode@3c0a50da
    m_moudle = tg_msgs::dds::UnknownModule;
    // m_overTime com.eprosima.idl.parser.typecode.PrimitiveTypeCode@589b3632
    m_overTime = 0;
    // m_cmd com.eprosima.idl.parser.typecode.StringTypeCode@45f45fa1
    m_cmd ="";

    // Just to register all known types
    registersystemInfoTypes();
}

tg_msgs::dds::MsgShellCMD::~MsgShellCMD()
{



}

tg_msgs::dds::MsgShellCMD::MsgShellCMD(
        const MsgShellCMD& x)
{
    m_moudle = x.m_moudle;
    m_overTime = x.m_overTime;
    m_cmd = x.m_cmd;
}

tg_msgs::dds::MsgShellCMD::MsgShellCMD(
        MsgShellCMD&& x)
{
    m_moudle = x.m_moudle;
    m_overTime = x.m_overTime;
    m_cmd = std::move(x.m_cmd);
}

tg_msgs::dds::MsgShellCMD& tg_msgs::dds::MsgShellCMD::operator =(
        const MsgShellCMD& x)
{

    m_moudle = x.m_moudle;
    m_overTime = x.m_overTime;
    m_cmd = x.m_cmd;

    return *this;
}

tg_msgs::dds::MsgShellCMD& tg_msgs::dds::MsgShellCMD::operator =(
        MsgShellCMD&& x)
{

    m_moudle = x.m_moudle;
    m_overTime = x.m_overTime;
    m_cmd = std::move(x.m_cmd);

    return *this;
}

size_t tg_msgs::dds::MsgShellCMD::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t tg_msgs::dds::MsgShellCMD::getCdrSerializedSize(
        const tg_msgs::dds::MsgShellCMD& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.cmd().size() + 1;


    return current_alignment - initial_alignment;
}

void tg_msgs::dds::MsgShellCMD::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_moudle;
    scdr << m_overTime;
    scdr << m_cmd;

}

void tg_msgs::dds::MsgShellCMD::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_moudle = (tg_msgs::dds::moudleType)enum_value;
    }

    dcdr >> m_overTime;
    dcdr >> m_cmd;
}

/*!
 * @brief This function sets a value in member moudle
 * @param _moudle New value for member moudle
 */
void tg_msgs::dds::MsgShellCMD::moudle(
        tg_msgs::dds::moudleType _moudle)
{
    m_moudle = _moudle;
}

/*!
 * @brief This function returns the value of member moudle
 * @return Value of member moudle
 */
tg_msgs::dds::moudleType tg_msgs::dds::MsgShellCMD::moudle() const
{
    return m_moudle;
}

/*!
 * @brief This function returns a reference to member moudle
 * @return Reference to member moudle
 */
tg_msgs::dds::moudleType& tg_msgs::dds::MsgShellCMD::moudle()
{
    return m_moudle;
}

/*!
 * @brief This function sets a value in member overTime
 * @param _overTime New value for member overTime
 */
void tg_msgs::dds::MsgShellCMD::overTime(
        uint16_t _overTime)
{
    m_overTime = _overTime;
}

/*!
 * @brief This function returns the value of member overTime
 * @return Value of member overTime
 */
uint16_t tg_msgs::dds::MsgShellCMD::overTime() const
{
    return m_overTime;
}

/*!
 * @brief This function returns a reference to member overTime
 * @return Reference to member overTime
 */
uint16_t& tg_msgs::dds::MsgShellCMD::overTime()
{
    return m_overTime;
}

/*!
 * @brief This function copies the value in member cmd
 * @param _cmd New value to be copied in member cmd
 */
void tg_msgs::dds::MsgShellCMD::cmd(
        const std::string& _cmd)
{
    m_cmd = _cmd;
}

/*!
 * @brief This function moves the value in member cmd
 * @param _cmd New value to be moved in member cmd
 */
void tg_msgs::dds::MsgShellCMD::cmd(
        std::string&& _cmd)
{
    m_cmd = std::move(_cmd);
}

/*!
 * @brief This function returns a constant reference to member cmd
 * @return Constant reference to member cmd
 */
const std::string& tg_msgs::dds::MsgShellCMD::cmd() const
{
    return m_cmd;
}

/*!
 * @brief This function returns a reference to member cmd
 * @return Reference to member cmd
 */
std::string& tg_msgs::dds::MsgShellCMD::cmd()
{
    return m_cmd;
}

size_t tg_msgs::dds::MsgShellCMD::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool tg_msgs::dds::MsgShellCMD::isKeyDefined()
{
    return false;
}

void tg_msgs::dds::MsgShellCMD::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


tg_msgs::dds::MsgShellCMDResult::MsgShellCMDResult()
{
    // m_moudle com.eprosima.idl.parser.typecode.EnumTypeCode@3c0a50da
    m_moudle = tg_msgs::dds::UnknownModule;
    // m_cmd com.eprosima.idl.parser.typecode.StringTypeCode@5b0abc94
    m_cmd ="";
    // m_result com.eprosima.idl.parser.typecode.StringTypeCode@75c072cb
    m_result ="";

    // Just to register all known types
    registersystemInfoTypes();
}

tg_msgs::dds::MsgShellCMDResult::~MsgShellCMDResult()
{



}

tg_msgs::dds::MsgShellCMDResult::MsgShellCMDResult(
        const MsgShellCMDResult& x)
{
    m_moudle = x.m_moudle;
    m_cmd = x.m_cmd;
    m_result = x.m_result;
}

tg_msgs::dds::MsgShellCMDResult::MsgShellCMDResult(
        MsgShellCMDResult&& x)
{
    m_moudle = x.m_moudle;
    m_cmd = std::move(x.m_cmd);
    m_result = std::move(x.m_result);
}

tg_msgs::dds::MsgShellCMDResult& tg_msgs::dds::MsgShellCMDResult::operator =(
        const MsgShellCMDResult& x)
{

    m_moudle = x.m_moudle;
    m_cmd = x.m_cmd;
    m_result = x.m_result;

    return *this;
}

tg_msgs::dds::MsgShellCMDResult& tg_msgs::dds::MsgShellCMDResult::operator =(
        MsgShellCMDResult&& x)
{

    m_moudle = x.m_moudle;
    m_cmd = std::move(x.m_cmd);
    m_result = std::move(x.m_result);

    return *this;
}

size_t tg_msgs::dds::MsgShellCMDResult::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t tg_msgs::dds::MsgShellCMDResult::getCdrSerializedSize(
        const tg_msgs::dds::MsgShellCMDResult& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.cmd().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.result().size() + 1;


    return current_alignment - initial_alignment;
}

void tg_msgs::dds::MsgShellCMDResult::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_moudle;
    scdr << m_cmd;
    scdr << m_result;

}

void tg_msgs::dds::MsgShellCMDResult::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_moudle = (tg_msgs::dds::moudleType)enum_value;
    }

    dcdr >> m_cmd;
    dcdr >> m_result;
}

/*!
 * @brief This function sets a value in member moudle
 * @param _moudle New value for member moudle
 */
void tg_msgs::dds::MsgShellCMDResult::moudle(
        tg_msgs::dds::moudleType _moudle)
{
    m_moudle = _moudle;
}

/*!
 * @brief This function returns the value of member moudle
 * @return Value of member moudle
 */
tg_msgs::dds::moudleType tg_msgs::dds::MsgShellCMDResult::moudle() const
{
    return m_moudle;
}

/*!
 * @brief This function returns a reference to member moudle
 * @return Reference to member moudle
 */
tg_msgs::dds::moudleType& tg_msgs::dds::MsgShellCMDResult::moudle()
{
    return m_moudle;
}

/*!
 * @brief This function copies the value in member cmd
 * @param _cmd New value to be copied in member cmd
 */
void tg_msgs::dds::MsgShellCMDResult::cmd(
        const std::string& _cmd)
{
    m_cmd = _cmd;
}

/*!
 * @brief This function moves the value in member cmd
 * @param _cmd New value to be moved in member cmd
 */
void tg_msgs::dds::MsgShellCMDResult::cmd(
        std::string&& _cmd)
{
    m_cmd = std::move(_cmd);
}

/*!
 * @brief This function returns a constant reference to member cmd
 * @return Constant reference to member cmd
 */
const std::string& tg_msgs::dds::MsgShellCMDResult::cmd() const
{
    return m_cmd;
}

/*!
 * @brief This function returns a reference to member cmd
 * @return Reference to member cmd
 */
std::string& tg_msgs::dds::MsgShellCMDResult::cmd()
{
    return m_cmd;
}
/*!
 * @brief This function copies the value in member result
 * @param _result New value to be copied in member result
 */
void tg_msgs::dds::MsgShellCMDResult::result(
        const std::string& _result)
{
    m_result = _result;
}

/*!
 * @brief This function moves the value in member result
 * @param _result New value to be moved in member result
 */
void tg_msgs::dds::MsgShellCMDResult::result(
        std::string&& _result)
{
    m_result = std::move(_result);
}

/*!
 * @brief This function returns a constant reference to member result
 * @return Constant reference to member result
 */
const std::string& tg_msgs::dds::MsgShellCMDResult::result() const
{
    return m_result;
}

/*!
 * @brief This function returns a reference to member result
 * @return Reference to member result
 */
std::string& tg_msgs::dds::MsgShellCMDResult::result()
{
    return m_result;
}

size_t tg_msgs::dds::MsgShellCMDResult::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool tg_msgs::dds::MsgShellCMDResult::isKeyDefined()
{
    return false;
}

void tg_msgs::dds::MsgShellCMDResult::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}


